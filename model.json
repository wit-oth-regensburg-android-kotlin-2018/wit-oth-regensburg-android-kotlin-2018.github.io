[
  {
    "lotype": "1",
    "los": "2",
    "walls": "3",
    "options": "4",
    "icon": "5",
    "faIcon": "6",
    "folder": "7",
    "parentFolder": "8",
    "img": "9",
    "properties": "10",
    "title": "11",
    "objectivesWithoutHeader": "9",
    "link": "12",
    "course": "0",
    "panelVideos": "13",
    "panelTalks": "14",
    "units": "15"
  },
  "course",
  [
    "16",
    "17",
    "18",
    "19",
    "20",
    "21",
    "22",
    "23",
    "24",
    "25",
    "26",
    "27",
    "28"
  ],
  ["29", "30", "31", "32", "33", "34"],
  {
    "version": "35",
    "rootPath": "36"
  },
  "book",
  "fas fa-book",
  "oth-android-kotlin-2018",
  "2018",
  "",
  {
    "highlightstyle": "37",
    "credits": "38",
    "courseurl": "39",
    "slack": "40",
    "moodle": "41",
    "license": "42"
  },
  "Android Programming with Kotlin ",
  "index.html",
  [],
  [],
  [],
  {
    "parent": "0",
    "lotype": "43",
    "los": "44",
    "icon": "45",
    "folder": "46",
    "parentFolder": "7",
    "img": "47",
    "properties": "48",
    "title": "49",
    "objectivesWithoutHeader": "50",
    "link": "12",
    "units": "51",
    "panelVideos": "52",
    "panelTalks": "53",
    "standardLos": "54",
    "course": "0",
    "topicUrl": "55"
  },
  {
    "parent": "0",
    "lotype": "43",
    "los": "56",
    "icon": "45",
    "folder": "57",
    "parentFolder": "7",
    "img": "58",
    "properties": "59",
    "title": "60",
    "objectivesWithoutHeader": "61",
    "link": "12",
    "units": "62",
    "panelVideos": "63",
    "panelTalks": "64",
    "standardLos": "65",
    "course": "0",
    "topicUrl": "66"
  },
  {
    "parent": "0",
    "lotype": "43",
    "los": "67",
    "icon": "45",
    "folder": "68",
    "parentFolder": "7",
    "img": "58",
    "properties": "69",
    "title": "70",
    "objectivesWithoutHeader": "71",
    "link": "12",
    "units": "72",
    "panelVideos": "73",
    "panelTalks": "74",
    "standardLos": "75",
    "course": "0",
    "topicUrl": "76"
  },
  {
    "parent": "0",
    "lotype": "43",
    "los": "77",
    "icon": "45",
    "folder": "78",
    "parentFolder": "7",
    "img": "58",
    "properties": "79",
    "title": "80",
    "objectivesWithoutHeader": "81",
    "link": "12",
    "units": "82",
    "panelVideos": "83",
    "panelTalks": "84",
    "standardLos": "85",
    "course": "0",
    "topicUrl": "86"
  },
  {
    "parent": "0",
    "lotype": "43",
    "los": "87",
    "icon": "45",
    "folder": "88",
    "parentFolder": "7",
    "img": "58",
    "properties": "89",
    "title": "90",
    "objectivesWithoutHeader": "91",
    "link": "12",
    "units": "92",
    "panelVideos": "93",
    "panelTalks": "94",
    "standardLos": "95",
    "course": "0",
    "topicUrl": "96"
  },
  {
    "parent": "0",
    "lotype": "43",
    "los": "97",
    "icon": "45",
    "folder": "98",
    "parentFolder": "7",
    "img": "58",
    "properties": "99",
    "title": "100",
    "objectivesWithoutHeader": "101",
    "link": "12",
    "units": "102",
    "panelVideos": "103",
    "panelTalks": "104",
    "standardLos": "105",
    "course": "0",
    "topicUrl": "106"
  },
  {
    "parent": "0",
    "lotype": "43",
    "los": "107",
    "icon": "45",
    "folder": "108",
    "parentFolder": "7",
    "img": "47",
    "properties": "109",
    "title": "110",
    "objectivesWithoutHeader": "111",
    "link": "12",
    "units": "112",
    "panelVideos": "113",
    "panelTalks": "114",
    "standardLos": "115",
    "course": "0",
    "topicUrl": "116"
  },
  {
    "parent": "0",
    "lotype": "43",
    "los": "117",
    "icon": "45",
    "folder": "118",
    "parentFolder": "7",
    "img": "58",
    "properties": "119",
    "title": "120",
    "objectivesWithoutHeader": "121",
    "link": "12",
    "units": "122",
    "panelVideos": "123",
    "panelTalks": "124",
    "standardLos": "125",
    "course": "0",
    "topicUrl": "126"
  },
  {
    "parent": "0",
    "lotype": "43",
    "los": "127",
    "icon": "45",
    "folder": "128",
    "parentFolder": "7",
    "img": "58",
    "properties": "129",
    "title": "130",
    "objectivesWithoutHeader": "131",
    "link": "12",
    "units": "132",
    "panelVideos": "133",
    "panelTalks": "134",
    "standardLos": "135",
    "course": "0",
    "topicUrl": "136"
  },
  {
    "parent": "0",
    "lotype": "43",
    "los": "137",
    "icon": "45",
    "folder": "138",
    "parentFolder": "7",
    "img": "58",
    "properties": "139",
    "title": "140",
    "objectivesWithoutHeader": "141",
    "link": "12",
    "units": "142",
    "panelVideos": "143",
    "panelTalks": "144",
    "standardLos": "145",
    "course": "0",
    "topicUrl": "146"
  },
  {
    "parent": "0",
    "lotype": "43",
    "los": "147",
    "icon": "45",
    "folder": "148",
    "parentFolder": "7",
    "img": "47",
    "properties": "149",
    "title": "150",
    "objectivesWithoutHeader": "151",
    "link": "12",
    "units": "152",
    "panelVideos": "153",
    "panelTalks": "154",
    "standardLos": "155",
    "course": "0",
    "topicUrl": "156"
  },
  {
    "parent": "0",
    "lotype": "43",
    "los": "157",
    "icon": "45",
    "folder": "158",
    "parentFolder": "7",
    "img": "47",
    "properties": "159",
    "title": "160",
    "objectivesWithoutHeader": "161",
    "link": "12",
    "units": "162",
    "panelVideos": "163",
    "panelTalks": "164",
    "standardLos": "165",
    "course": "0",
    "topicUrl": "166"
  },
  {
    "parent": "0",
    "lotype": "167",
    "link": "168",
    "icon": "169",
    "folder": "170",
    "parentFolder": "7",
    "img": "171",
    "properties": "172",
    "title": "173",
    "objectivesWithoutHeader": "174",
    "absoluteLink": true,
    "videoid": "175",
    "course": "0"
  },
  {
    "course": "0",
    "isWall": true,
    "los": "176"
  },
  {
    "course": "0",
    "isWall": true,
    "los": "177"
  },
  {
    "course": "0",
    "isWall": true,
    "los": "178"
  },
  {
    "course": "0",
    "isWall": true,
    "los": "179"
  },
  {
    "course": "0",
    "isWall": true,
    "los": "180"
  },
  {
    "course": "0",
    "isWall": true,
    "los": "181"
  },
  "2.7.1",
  "/Users/edeleastar/repos/tools/tutors-ts",
  "railscasts",
  "Eamonn de Leastar, WIT for OTH Regensburg",
  "https://wit-oth-regensburg-android-kotlin-2018.github.io/",
  "https://koltin-android-oth.slack.com/messages/CB7R90DQX/",
  "https://elearning.uni-regensburg.de/course/view.php?id=34200",
  "Unless otherwise stated, this work is licensed under a <a rel=\"license\" href=\"http://creativecommons.org/licenses/by/4.0/\">Creative Commons Attribution 4.0 International License</a>.",
  "topic",
  ["182", "183", "184"],
  "sitemap",
  "topic-00-overview",
  "topic.jpg",
  {
    "highlightstyle": "37",
    "credits": "38",
    "courseurl": "39",
    "slack": "40",
    "moodle": "41",
    "license": "42"
  },
  "00: Overview ",
  "<p>Preview the module, get a flavour of Kotlin. Introduce the Android platform</p>\n",
  ["182", "183", "184"],
  [],
  [],
  [],
  "://wit-oth-regensburg-android-kotlin-2018.github.io//topic-00-overview",
  ["185"],
  "topic-01-activity",
  "topic.png",
  {
    "highlightstyle": "37",
    "credits": "38",
    "courseurl": "39",
    "slack": "40",
    "moodle": "41",
    "license": "42"
  },
  "01: Activities ",
  "<p>Take the first steps with a Kotlin Android. Explore the source in detail.</p>\n",
  ["185"],
  [],
  [],
  [],
  "://wit-oth-regensburg-android-kotlin-2018.github.io//topic-01-activity",
  ["186", "187"],
  "topic-02-adapters",
  {
    "highlightstyle": "37",
    "credits": "38",
    "courseurl": "39",
    "slack": "40",
    "moodle": "41",
    "license": "42"
  },
  "02: Adapters ",
  "<p>Look at Kotlin in more depth. Deep dive into some of its features. Extend the app to manage lists of placemarks using the adapter pattern.</p>\n",
  ["186", "187"],
  [],
  [],
  [],
  "://wit-oth-regensburg-android-kotlin-2018.github.io//topic-02-adapters",
  ["188", "189"],
  "topic-03-models",
  {
    "highlightstyle": "37",
    "credits": "38",
    "courseurl": "39",
    "slack": "40",
    "moodle": "41",
    "license": "42"
  },
  "03: Models ",
  "<p>Examine key Kotlin Idioms. Start comparing simple Java &amp; Kotlin statements. Introduce a more complete model into Placemark.</p>\n",
  ["188", "189"],
  [],
  [],
  [],
  "://wit-oth-regensburg-android-kotlin-2018.github.io//topic-03-models",
  ["190", "191"],
  "topic-04-images",
  {
    "highlightstyle": "37",
    "credits": "38",
    "courseurl": "39",
    "slack": "40",
    "moodle": "41",
    "license": "42"
  },
  "04: Images ",
  "<p>A more detailed look at the fundamental types in Kotlin. How to manage images in android, including selecting and displaying images from the phone gallery.</p>\n",
  ["190", "191"],
  [],
  [],
  [],
  "://wit-oth-regensburg-android-kotlin-2018.github.io//topic-04-images",
  ["192", "193"],
  "topic-05-map-activity",
  {
    "highlightstyle": "37",
    "credits": "38",
    "courseurl": "39",
    "slack": "40",
    "moodle": "41",
    "license": "42"
  },
  "05: Maps ",
  "<p>Review Kotlin Packages + Control flow. Introducing Google Maps into and android app.</p>\n",
  ["192", "193"],
  [],
  [],
  [],
  "://wit-oth-regensburg-android-kotlin-2018.github.io//topic-05-map-activity",
  ["194", "195"],
  "topic-06-persistence",
  {
    "highlightstyle": "37",
    "credits": "38",
    "courseurl": "39",
    "slack": "40",
    "moodle": "41",
    "license": "42"
  },
  "06: Persistence ",
  "<p>Kotlin Classes in detail. New Placemark Store class to save placemarks to the file system.</p>\n",
  ["194", "195"],
  [],
  [],
  [],
  "://wit-oth-regensburg-android-kotlin-2018.github.io//topic-06-persistence",
  ["196", "197"],
  "topic-07-layouts",
  {
    "highlightstyle": "37",
    "credits": "38",
    "courseurl": "39",
    "slack": "40",
    "moodle": "41",
    "license": "42"
  },
  "07: Layouts ",
  "<p>Kotlin properties, fields, &amp; interfaces. Constraint Layout. Introduce activity to display all placemark locations + details.</p>\n",
  ["196", "197"],
  [],
  [],
  [],
  "://wit-oth-regensburg-android-kotlin-2018.github.io//topic-07-layouts",
  ["198", "199", "200"],
  "topic-08-mvp",
  {
    "highlightstyle": "37",
    "credits": "38",
    "courseurl": "39",
    "slack": "40",
    "moodle": "41",
    "license": "42"
  },
  "08: Presenters ",
  "<p>Introducing Model View Presenter - a pattern to enhance separation of concerns in the Activity classes</p>\n",
  ["198", "199", "200"],
  [],
  [],
  [],
  "://wit-oth-regensburg-android-kotlin-2018.github.io//topic-08-mvp",
  ["201", "202", "203", "204", "205"],
  "topic-09-location",
  {
    "highlightstyle": "37",
    "credits": "38",
    "courseurl": "39",
    "slack": "40",
    "moodle": "41",
    "license": "42"
  },
  "09: Location ",
  "<p>Kotlin visibility &amp; extensions. Determine the devices current location &amp; resolve in a map.</p>\n",
  ["201", "202", "203", "204"],
  ["205"],
  [],
  [],
  "://wit-oth-regensburg-android-kotlin-2018.github.io//topic-09-location",
  ["206", "207", "208", "209"],
  "topic-10-rooms",
  {
    "highlightstyle": "37",
    "credits": "38",
    "courseurl": "39",
    "slack": "40",
    "moodle": "41",
    "license": "42"
  },
  "10: Rooms ",
  "<p>Kotlin Data &amp; Sealed classes, Generics. Android Architecture Components. The Room framework. PlacemarkStoreRoom implementation</p>\n",
  ["206", "207", "208"],
  ["209"],
  [],
  [],
  "://wit-oth-regensburg-android-kotlin-2018.github.io//topic-10-rooms",
  ["210", "211", "212"],
  "topic-11-firebase",
  {
    "highlightstyle": "37",
    "credits": "38",
    "courseurl": "39",
    "slack": "40",
    "moodle": "41",
    "license": "42"
  },
  "11: Firebase ",
  "<p>Introducing Firebase Authentication, Database and Storage services.</p>\n",
  ["210", "211", "212"],
  [],
  [],
  [],
  "://wit-oth-regensburg-android-kotlin-2018.github.io//topic-11-firebase",
  "github",
  "https://github.com/wit-mobile-app-dev/placemark-18-solution",
  "git square",
  "github-placemark",
  "github.jpg",
  {
    "highlightstyle": "37",
    "credits": "38",
    "courseurl": "39",
    "slack": "40",
    "moodle": "41",
    "license": "42"
  },
  "Placemark Repo ",
  "<p>This is a complete repo of the Placemark application, including tags for all labs</p>\n",
  "none",
  [
    "213",
    "214",
    "215",
    "216",
    "217",
    "218",
    "219",
    "220",
    "221",
    "222",
    "223",
    "224",
    "225",
    "226",
    "227",
    "228",
    "229",
    "230",
    "231",
    "232",
    "233",
    "234",
    "235",
    "236",
    "237",
    "238",
    "239",
    "240",
    "241",
    "242",
    "243",
    "244",
    "245",
    "246",
    "247",
    "248",
    "249",
    "250",
    "251",
    "252",
    "253",
    "254",
    "255",
    "256",
    "257",
    "258",
    "259",
    "260",
    "261",
    "262",
    "263",
    "264",
    "265",
    "266",
    "267",
    "268",
    "269",
    "270",
    "271"
  ],
  [
    "272",
    "273",
    "274",
    "275",
    "276",
    "277",
    "278",
    "279",
    "280",
    "281",
    "282",
    "283",
    "284",
    "285",
    "286",
    "287",
    "288"
  ],
  [],
  ["205", "209"],
  ["28"],
  ["289"],
  {
    "parent": "16",
    "lotype": "290",
    "los": "291",
    "icon": "45",
    "folder": "292",
    "parentFolder": "46",
    "img": "293",
    "properties": "294",
    "title": "295",
    "objectivesWithoutHeader": "9",
    "link": "12",
    "units": "296",
    "panelVideos": "297",
    "panelTalks": "298",
    "standardLos": "299",
    "course": "0",
    "topicUrl": "300"
  },
  {
    "parent": "16",
    "lotype": "290",
    "los": "301",
    "icon": "45",
    "folder": "302",
    "parentFolder": "46",
    "img": "303",
    "properties": "304",
    "title": "305",
    "objectivesWithoutHeader": "9",
    "link": "12",
    "units": "306",
    "panelVideos": "307",
    "panelTalks": "308",
    "standardLos": "309",
    "course": "0",
    "topicUrl": "310"
  },
  {
    "parent": "16",
    "lotype": "290",
    "los": "311",
    "icon": "45",
    "folder": "312",
    "parentFolder": "46",
    "img": "313",
    "properties": "314",
    "title": "315",
    "objectivesWithoutHeader": "9",
    "link": "12",
    "units": "316",
    "panelVideos": "317",
    "panelTalks": "318",
    "standardLos": "319",
    "course": "0",
    "topicUrl": "320"
  },
  {
    "parent": "17",
    "lotype": "290",
    "los": "321",
    "icon": "45",
    "folder": "322",
    "parentFolder": "57",
    "img": "323",
    "properties": "324",
    "title": "325",
    "objectivesWithoutHeader": "9",
    "link": "12",
    "units": "326",
    "panelVideos": "327",
    "panelTalks": "328",
    "standardLos": "329",
    "course": "0",
    "topicUrl": "330"
  },
  {
    "parent": "18",
    "lotype": "290",
    "los": "331",
    "icon": "45",
    "folder": "332",
    "parentFolder": "68",
    "img": "333",
    "properties": "334",
    "title": "335",
    "objectivesWithoutHeader": "9",
    "link": "12",
    "units": "336",
    "panelVideos": "337",
    "panelTalks": "338",
    "standardLos": "339",
    "course": "0",
    "topicUrl": "340"
  },
  {
    "parent": "18",
    "lotype": "290",
    "los": "341",
    "icon": "45",
    "folder": "342",
    "parentFolder": "68",
    "img": "343",
    "properties": "344",
    "title": "345",
    "objectivesWithoutHeader": "9",
    "link": "12",
    "units": "346",
    "panelVideos": "347",
    "panelTalks": "348",
    "standardLos": "349",
    "course": "0",
    "topicUrl": "350"
  },
  {
    "parent": "19",
    "lotype": "290",
    "los": "351",
    "icon": "45",
    "folder": "352",
    "parentFolder": "78",
    "img": "353",
    "properties": "354",
    "title": "355",
    "objectivesWithoutHeader": "356",
    "link": "12",
    "units": "357",
    "panelVideos": "358",
    "panelTalks": "359",
    "standardLos": "360",
    "course": "0",
    "topicUrl": "361"
  },
  {
    "parent": "19",
    "lotype": "290",
    "los": "362",
    "icon": "45",
    "folder": "363",
    "parentFolder": "78",
    "img": "364",
    "properties": "365",
    "title": "366",
    "objectivesWithoutHeader": "9",
    "link": "12",
    "units": "367",
    "panelVideos": "368",
    "panelTalks": "369",
    "standardLos": "370",
    "course": "0",
    "topicUrl": "371"
  },
  {
    "parent": "20",
    "lotype": "290",
    "los": "372",
    "icon": "45",
    "folder": "373",
    "parentFolder": "88",
    "img": "374",
    "properties": "375",
    "title": "376",
    "objectivesWithoutHeader": "9",
    "link": "12",
    "units": "377",
    "panelVideos": "378",
    "panelTalks": "379",
    "standardLos": "380",
    "course": "0",
    "topicUrl": "381"
  },
  {
    "parent": "20",
    "lotype": "290",
    "los": "382",
    "icon": "45",
    "folder": "383",
    "parentFolder": "88",
    "img": "384",
    "properties": "385",
    "title": "386",
    "objectivesWithoutHeader": "9",
    "link": "12",
    "units": "387",
    "panelVideos": "388",
    "panelTalks": "389",
    "standardLos": "390",
    "course": "0",
    "topicUrl": "391"
  },
  {
    "parent": "21",
    "lotype": "290",
    "los": "392",
    "icon": "45",
    "folder": "393",
    "parentFolder": "98",
    "img": "394",
    "properties": "395",
    "title": "396",
    "objectivesWithoutHeader": "9",
    "link": "12",
    "units": "397",
    "panelVideos": "398",
    "panelTalks": "399",
    "standardLos": "400",
    "course": "0",
    "topicUrl": "401"
  },
  {
    "parent": "21",
    "lotype": "290",
    "los": "402",
    "icon": "45",
    "folder": "403",
    "parentFolder": "98",
    "img": "404",
    "properties": "405",
    "title": "406",
    "objectivesWithoutHeader": "9",
    "link": "12",
    "units": "407",
    "panelVideos": "408",
    "panelTalks": "409",
    "standardLos": "410",
    "course": "0",
    "topicUrl": "411"
  },
  {
    "parent": "22",
    "lotype": "290",
    "los": "412",
    "icon": "45",
    "folder": "413",
    "parentFolder": "108",
    "img": "414",
    "properties": "415",
    "title": "416",
    "objectivesWithoutHeader": "417",
    "link": "12",
    "units": "418",
    "panelVideos": "419",
    "panelTalks": "420",
    "standardLos": "421",
    "course": "0",
    "topicUrl": "422"
  },
  {
    "parent": "22",
    "lotype": "290",
    "los": "423",
    "icon": "45",
    "folder": "424",
    "parentFolder": "108",
    "img": "425",
    "properties": "426",
    "title": "427",
    "objectivesWithoutHeader": "428",
    "link": "12",
    "units": "429",
    "panelVideos": "430",
    "panelTalks": "431",
    "standardLos": "432",
    "course": "0",
    "topicUrl": "433"
  },
  {
    "parent": "23",
    "lotype": "290",
    "los": "434",
    "icon": "45",
    "folder": "435",
    "parentFolder": "118",
    "img": "436",
    "properties": "437",
    "title": "438",
    "objectivesWithoutHeader": "9",
    "link": "12",
    "units": "439",
    "panelVideos": "440",
    "panelTalks": "441",
    "standardLos": "442",
    "course": "0",
    "topicUrl": "443"
  },
  {
    "parent": "23",
    "lotype": "290",
    "los": "444",
    "icon": "45",
    "folder": "445",
    "parentFolder": "118",
    "img": "58",
    "properties": "446",
    "title": "447",
    "objectivesWithoutHeader": "448",
    "link": "12",
    "units": "449",
    "panelVideos": "450",
    "panelTalks": "451",
    "standardLos": "452",
    "course": "0",
    "topicUrl": "453"
  },
  {
    "parent": "24",
    "lotype": "290",
    "los": "454",
    "icon": "45",
    "folder": "455",
    "parentFolder": "128",
    "img": "456",
    "properties": "457",
    "title": "458",
    "objectivesWithoutHeader": "9",
    "link": "12",
    "units": "459",
    "panelVideos": "460",
    "panelTalks": "461",
    "standardLos": "462",
    "course": "0",
    "topicUrl": "463"
  },
  {
    "parent": "24",
    "lotype": "290",
    "los": "464",
    "icon": "45",
    "folder": "465",
    "parentFolder": "128",
    "img": "466",
    "properties": "467",
    "title": "468",
    "objectivesWithoutHeader": "469",
    "link": "12",
    "units": "470",
    "panelVideos": "471",
    "panelTalks": "472",
    "standardLos": "473",
    "course": "0",
    "topicUrl": "474"
  },
  {
    "parent": "24",
    "lotype": "290",
    "los": "475",
    "icon": "45",
    "folder": "476",
    "parentFolder": "128",
    "img": "477",
    "properties": "478",
    "title": "479",
    "objectivesWithoutHeader": "480",
    "link": "12",
    "units": "481",
    "panelVideos": "482",
    "panelTalks": "483",
    "standardLos": "484",
    "course": "0",
    "topicUrl": "485"
  },
  {
    "parent": "25",
    "lotype": "290",
    "los": "486",
    "icon": "45",
    "folder": "487",
    "parentFolder": "138",
    "img": "9",
    "properties": "488",
    "title": "43",
    "link": "12",
    "units": "489",
    "panelVideos": "490",
    "panelTalks": "491",
    "standardLos": "492",
    "course": "0",
    "topicUrl": "493"
  },
  {
    "parent": "25",
    "lotype": "290",
    "los": "494",
    "icon": "45",
    "folder": "495",
    "parentFolder": "138",
    "img": "496",
    "properties": "497",
    "title": "498",
    "objectivesWithoutHeader": "9",
    "link": "12",
    "units": "499",
    "panelVideos": "500",
    "panelTalks": "501",
    "standardLos": "502",
    "course": "0",
    "topicUrl": "503"
  },
  {
    "parent": "25",
    "lotype": "290",
    "los": "504",
    "icon": "45",
    "folder": "505",
    "parentFolder": "138",
    "img": "506",
    "properties": "507",
    "title": "508",
    "objectivesWithoutHeader": "509",
    "link": "12",
    "units": "510",
    "panelVideos": "511",
    "panelTalks": "512",
    "standardLos": "513",
    "course": "0",
    "topicUrl": "514"
  },
  {
    "parent": "25",
    "lotype": "290",
    "los": "515",
    "icon": "45",
    "folder": "516",
    "parentFolder": "138",
    "img": "517",
    "properties": "518",
    "title": "519",
    "objectivesWithoutHeader": "509",
    "link": "12",
    "units": "520",
    "panelVideos": "521",
    "panelTalks": "522",
    "standardLos": "523",
    "course": "0",
    "topicUrl": "524"
  },
  {
    "parent": "25",
    "lotype": "525",
    "link": "526",
    "icon": "527",
    "folder": "525",
    "parentFolder": "138",
    "img": "9",
    "properties": "528",
    "title": "529",
    "objectivesWithoutHeader": "9",
    "videoid": "526",
    "course": "0"
  },
  {
    "parent": "26",
    "lotype": "290",
    "los": "530",
    "icon": "45",
    "folder": "531",
    "parentFolder": "148",
    "img": "532",
    "properties": "533",
    "title": "534",
    "objectivesWithoutHeader": "9",
    "link": "12",
    "units": "535",
    "panelVideos": "536",
    "panelTalks": "537",
    "standardLos": "538",
    "course": "0",
    "topicUrl": "539"
  },
  {
    "parent": "26",
    "lotype": "290",
    "los": "540",
    "icon": "45",
    "folder": "541",
    "parentFolder": "148",
    "img": "542",
    "properties": "543",
    "title": "544",
    "objectivesWithoutHeader": "545",
    "link": "12",
    "units": "546",
    "panelVideos": "547",
    "panelTalks": "548",
    "standardLos": "549",
    "course": "0",
    "topicUrl": "550"
  },
  {
    "parent": "26",
    "lotype": "290",
    "los": "551",
    "icon": "45",
    "folder": "552",
    "parentFolder": "148",
    "img": "553",
    "properties": "554",
    "title": "555",
    "objectivesWithoutHeader": "9",
    "link": "12",
    "units": "556",
    "panelVideos": "557",
    "panelTalks": "558",
    "standardLos": "559",
    "course": "0",
    "topicUrl": "560"
  },
  {
    "parent": "26",
    "lotype": "525",
    "link": "561",
    "icon": "527",
    "folder": "525",
    "parentFolder": "148",
    "img": "9",
    "properties": "562",
    "title": "555",
    "objectivesWithoutHeader": "9",
    "videoid": "561",
    "course": "0"
  },
  {
    "parent": "27",
    "lotype": "290",
    "los": "563",
    "icon": "45",
    "folder": "564",
    "parentFolder": "158",
    "img": "565",
    "properties": "566",
    "title": "567",
    "objectivesWithoutHeader": "568",
    "link": "12",
    "units": "569",
    "panelVideos": "570",
    "panelTalks": "571",
    "standardLos": "572",
    "course": "0",
    "topicUrl": "573"
  },
  {
    "parent": "27",
    "lotype": "290",
    "los": "574",
    "icon": "45",
    "folder": "575",
    "parentFolder": "158",
    "img": "576",
    "properties": "577",
    "title": "578",
    "objectivesWithoutHeader": "9",
    "link": "12",
    "units": "579",
    "panelVideos": "580",
    "panelTalks": "581",
    "standardLos": "582",
    "course": "0",
    "topicUrl": "583"
  },
  {
    "parent": "27",
    "lotype": "290",
    "los": "584",
    "icon": "45",
    "folder": "585",
    "parentFolder": "158",
    "img": "586",
    "properties": "587",
    "title": "588",
    "objectivesWithoutHeader": "9",
    "link": "12",
    "units": "589",
    "panelVideos": "590",
    "panelTalks": "591",
    "standardLos": "592",
    "course": "0",
    "topicUrl": "593"
  },
  {
    "parent": "182",
    "lotype": "594",
    "videoid": "595",
    "icon": "596",
    "link": "597",
    "folder": "598",
    "parentFolder": "292",
    "img": "599",
    "properties": "600",
    "title": "295",
    "objectivesWithoutHeader": "601",
    "course": "0"
  },
  {
    "parent": "182",
    "lotype": "594",
    "videoid": "602",
    "icon": "596",
    "link": "603",
    "folder": "604",
    "parentFolder": "292",
    "img": "605",
    "properties": "606",
    "title": "607",
    "objectivesWithoutHeader": "608",
    "course": "0"
  },
  {
    "parent": "183",
    "lotype": "594",
    "videoid": "609",
    "icon": "596",
    "link": "610",
    "folder": "611",
    "parentFolder": "302",
    "img": "612",
    "properties": "613",
    "title": "305",
    "objectivesWithoutHeader": "614",
    "course": "0"
  },
  {
    "parent": "184",
    "lotype": "594",
    "videoid": "175",
    "icon": "596",
    "link": "615",
    "folder": "616",
    "parentFolder": "312",
    "img": "617",
    "properties": "618",
    "title": "619",
    "objectivesWithoutHeader": "620",
    "course": "0"
  },
  {
    "parent": "185",
    "lotype": "594",
    "videoid": "175",
    "icon": "596",
    "link": "621",
    "folder": "622",
    "parentFolder": "322",
    "img": "623",
    "properties": "624",
    "title": "625",
    "objectivesWithoutHeader": "626",
    "course": "0"
  },
  {
    "parent": "185",
    "lotype": "594",
    "videoid": "175",
    "icon": "596",
    "link": "627",
    "folder": "628",
    "parentFolder": "322",
    "img": "629",
    "properties": "630",
    "title": "631",
    "objectivesWithoutHeader": "632",
    "course": "0"
  },
  {
    "parent": "186",
    "lotype": "594",
    "videoid": "175",
    "icon": "596",
    "link": "633",
    "folder": "634",
    "parentFolder": "332",
    "img": "635",
    "properties": "636",
    "title": "637",
    "objectivesWithoutHeader": "638",
    "course": "0"
  },
  {
    "parent": "186",
    "lotype": "594",
    "videoid": "175",
    "icon": "596",
    "link": "639",
    "folder": "640",
    "parentFolder": "332",
    "img": "641",
    "properties": "642",
    "title": "643",
    "objectivesWithoutHeader": "644",
    "course": "0"
  },
  {
    "parent": "186",
    "lotype": "594",
    "videoid": "175",
    "icon": "596",
    "link": "645",
    "folder": "646",
    "parentFolder": "332",
    "img": "647",
    "properties": "648",
    "title": "376",
    "objectivesWithoutHeader": "649",
    "course": "0"
  },
  {
    "parent": "187",
    "lotype": "594",
    "videoid": "175",
    "icon": "596",
    "link": "650",
    "folder": "651",
    "parentFolder": "342",
    "img": "652",
    "properties": "653",
    "title": "654",
    "objectivesWithoutHeader": "655",
    "course": "0"
  },
  {
    "parent": "187",
    "lotype": "594",
    "videoid": "175",
    "icon": "596",
    "link": "656",
    "folder": "657",
    "parentFolder": "342",
    "img": "658",
    "properties": "659",
    "title": "660",
    "objectivesWithoutHeader": "661",
    "course": "0"
  },
  {
    "parent": "188",
    "lotype": "594",
    "videoid": "175",
    "icon": "596",
    "link": "662",
    "folder": "663",
    "parentFolder": "352",
    "img": "664",
    "properties": "665",
    "title": "666",
    "objectivesWithoutHeader": "667",
    "course": "0"
  },
  {
    "parent": "188",
    "lotype": "594",
    "videoid": "175",
    "icon": "596",
    "link": "668",
    "folder": "669",
    "parentFolder": "352",
    "img": "670",
    "properties": "671",
    "title": "672",
    "objectivesWithoutHeader": "673",
    "course": "0"
  },
  {
    "parent": "189",
    "lotype": "594",
    "videoid": "175",
    "icon": "596",
    "link": "674",
    "folder": "675",
    "parentFolder": "363",
    "img": "676",
    "properties": "677",
    "title": "678",
    "objectivesWithoutHeader": "679",
    "course": "0"
  },
  {
    "parent": "189",
    "lotype": "594",
    "videoid": "175",
    "icon": "596",
    "link": "680",
    "folder": "681",
    "parentFolder": "363",
    "img": "682",
    "properties": "683",
    "title": "684",
    "objectivesWithoutHeader": "685",
    "course": "0"
  },
  {
    "parent": "189",
    "lotype": "594",
    "videoid": "175",
    "icon": "596",
    "link": "686",
    "folder": "687",
    "parentFolder": "363",
    "img": "688",
    "properties": "689",
    "title": "690",
    "objectivesWithoutHeader": "691",
    "course": "0"
  },
  {
    "parent": "189",
    "lotype": "594",
    "videoid": "175",
    "icon": "596",
    "link": "692",
    "folder": "693",
    "parentFolder": "363",
    "img": "694",
    "properties": "695",
    "title": "696",
    "objectivesWithoutHeader": "697",
    "course": "0"
  },
  {
    "parent": "190",
    "lotype": "594",
    "videoid": "175",
    "icon": "596",
    "link": "698",
    "folder": "699",
    "parentFolder": "373",
    "img": "700",
    "properties": "701",
    "title": "702",
    "objectivesWithoutHeader": "703",
    "course": "0"
  },
  {
    "parent": "190",
    "lotype": "594",
    "videoid": "175",
    "icon": "596",
    "link": "704",
    "folder": "705",
    "parentFolder": "373",
    "img": "706",
    "properties": "707",
    "title": "708",
    "objectivesWithoutHeader": "709",
    "course": "0"
  },
  {
    "parent": "191",
    "lotype": "594",
    "videoid": "175",
    "icon": "596",
    "link": "710",
    "folder": "711",
    "parentFolder": "383",
    "img": "712",
    "properties": "713",
    "title": "714",
    "objectivesWithoutHeader": "715",
    "course": "0"
  },
  {
    "parent": "191",
    "lotype": "594",
    "videoid": "175",
    "icon": "596",
    "link": "716",
    "folder": "717",
    "parentFolder": "383",
    "img": "718",
    "properties": "719",
    "title": "720",
    "objectivesWithoutHeader": "721",
    "course": "0"
  },
  {
    "parent": "191",
    "lotype": "594",
    "videoid": "175",
    "icon": "596",
    "link": "722",
    "folder": "723",
    "parentFolder": "383",
    "img": "724",
    "properties": "725",
    "title": "726",
    "objectivesWithoutHeader": "727",
    "course": "0"
  },
  {
    "parent": "192",
    "lotype": "594",
    "videoid": "175",
    "icon": "596",
    "link": "728",
    "folder": "729",
    "parentFolder": "393",
    "img": "730",
    "properties": "731",
    "title": "732",
    "objectivesWithoutHeader": "733",
    "course": "0"
  },
  {
    "parent": "192",
    "lotype": "594",
    "videoid": "175",
    "icon": "596",
    "link": "734",
    "folder": "735",
    "parentFolder": "393",
    "img": "736",
    "properties": "737",
    "title": "738",
    "objectivesWithoutHeader": "739",
    "course": "0"
  },
  {
    "parent": "192",
    "lotype": "594",
    "videoid": "175",
    "icon": "596",
    "link": "740",
    "folder": "741",
    "parentFolder": "393",
    "img": "742",
    "properties": "743",
    "title": "744",
    "objectivesWithoutHeader": "745",
    "course": "0"
  },
  {
    "parent": "193",
    "lotype": "594",
    "videoid": "175",
    "icon": "596",
    "link": "746",
    "folder": "747",
    "parentFolder": "403",
    "img": "748",
    "properties": "749",
    "title": "750",
    "objectivesWithoutHeader": "751",
    "course": "0"
  },
  {
    "parent": "193",
    "lotype": "594",
    "videoid": "175",
    "icon": "596",
    "link": "752",
    "folder": "753",
    "parentFolder": "403",
    "img": "754",
    "properties": "755",
    "title": "756",
    "objectivesWithoutHeader": "757",
    "course": "0"
  },
  {
    "parent": "193",
    "lotype": "594",
    "videoid": "175",
    "icon": "596",
    "link": "758",
    "folder": "759",
    "parentFolder": "403",
    "img": "760",
    "properties": "761",
    "title": "762",
    "objectivesWithoutHeader": "763",
    "course": "0"
  },
  {
    "parent": "194",
    "lotype": "594",
    "videoid": "175",
    "icon": "596",
    "link": "764",
    "folder": "765",
    "parentFolder": "413",
    "img": "766",
    "properties": "767",
    "title": "768",
    "objectivesWithoutHeader": "769",
    "course": "0"
  },
  {
    "parent": "194",
    "lotype": "594",
    "videoid": "175",
    "icon": "596",
    "link": "770",
    "folder": "771",
    "parentFolder": "413",
    "img": "772",
    "properties": "773",
    "title": "774",
    "objectivesWithoutHeader": "775",
    "course": "0"
  },
  {
    "parent": "195",
    "lotype": "594",
    "videoid": "175",
    "icon": "596",
    "link": "776",
    "folder": "777",
    "parentFolder": "424",
    "img": "778",
    "properties": "779",
    "title": "780",
    "objectivesWithoutHeader": "781",
    "course": "0"
  },
  {
    "parent": "195",
    "lotype": "594",
    "videoid": "175",
    "icon": "596",
    "link": "782",
    "folder": "783",
    "parentFolder": "424",
    "img": "784",
    "properties": "785",
    "title": "786",
    "objectivesWithoutHeader": "787",
    "course": "0"
  },
  {
    "parent": "195",
    "lotype": "594",
    "videoid": "175",
    "icon": "596",
    "link": "788",
    "folder": "789",
    "parentFolder": "424",
    "img": "790",
    "properties": "791",
    "title": "792",
    "objectivesWithoutHeader": "793",
    "course": "0"
  },
  {
    "parent": "196",
    "lotype": "594",
    "videoid": "175",
    "icon": "596",
    "link": "794",
    "folder": "795",
    "parentFolder": "435",
    "img": "796",
    "properties": "797",
    "title": "798",
    "objectivesWithoutHeader": "799",
    "course": "0"
  },
  {
    "parent": "196",
    "lotype": "594",
    "videoid": "175",
    "icon": "596",
    "link": "800",
    "folder": "801",
    "parentFolder": "435",
    "img": "802",
    "properties": "803",
    "title": "804",
    "objectivesWithoutHeader": "805",
    "course": "0"
  },
  {
    "parent": "197",
    "lotype": "594",
    "videoid": "175",
    "icon": "596",
    "link": "806",
    "folder": "807",
    "parentFolder": "445",
    "img": "808",
    "properties": "809",
    "title": "810",
    "objectivesWithoutHeader": "811",
    "course": "0"
  },
  {
    "parent": "197",
    "lotype": "594",
    "videoid": "175",
    "icon": "596",
    "link": "812",
    "folder": "813",
    "parentFolder": "445",
    "img": "814",
    "properties": "815",
    "title": "816",
    "objectivesWithoutHeader": "817",
    "course": "0"
  },
  {
    "parent": "198",
    "lotype": "594",
    "videoid": "175",
    "icon": "596",
    "link": "818",
    "folder": "819",
    "parentFolder": "455",
    "img": "820",
    "properties": "821",
    "title": "822",
    "objectivesWithoutHeader": "823",
    "course": "0"
  },
  {
    "parent": "198",
    "lotype": "594",
    "videoid": "175",
    "icon": "596",
    "link": "824",
    "folder": "825",
    "parentFolder": "455",
    "img": "826",
    "properties": "827",
    "title": "828",
    "objectivesWithoutHeader": "829",
    "course": "0"
  },
  {
    "parent": "199",
    "lotype": "594",
    "videoid": "175",
    "icon": "596",
    "link": "830",
    "folder": "831",
    "parentFolder": "465",
    "img": "832",
    "properties": "833",
    "title": "468",
    "objectivesWithoutHeader": "834",
    "course": "0"
  },
  {
    "parent": "199",
    "lotype": "594",
    "videoid": "175",
    "icon": "596",
    "link": "835",
    "folder": "836",
    "parentFolder": "465",
    "img": "837",
    "properties": "838",
    "title": "839",
    "objectivesWithoutHeader": "840",
    "course": "0"
  },
  {
    "parent": "200",
    "lotype": "594",
    "videoid": "175",
    "icon": "596",
    "link": "835",
    "folder": "841",
    "parentFolder": "476",
    "img": "837",
    "properties": "842",
    "title": "843",
    "objectivesWithoutHeader": "844",
    "course": "0"
  },
  {
    "parent": "202",
    "lotype": "594",
    "videoid": "845",
    "icon": "596",
    "link": "846",
    "folder": "847",
    "parentFolder": "495",
    "img": "848",
    "properties": "849",
    "title": "850",
    "objectivesWithoutHeader": "851",
    "course": "0"
  },
  {
    "parent": "202",
    "lotype": "594",
    "videoid": "852",
    "icon": "596",
    "link": "853",
    "folder": "854",
    "parentFolder": "495",
    "img": "855",
    "properties": "856",
    "title": "857",
    "objectivesWithoutHeader": "858",
    "course": "0"
  },
  {
    "parent": "202",
    "lotype": "594",
    "videoid": "859",
    "icon": "596",
    "link": "860",
    "folder": "861",
    "parentFolder": "495",
    "img": "862",
    "properties": "863",
    "title": "864",
    "objectivesWithoutHeader": "865",
    "course": "0"
  },
  {
    "parent": "203",
    "lotype": "594",
    "videoid": "866",
    "icon": "596",
    "link": "867",
    "folder": "868",
    "parentFolder": "505",
    "img": "869",
    "properties": "870",
    "title": "871",
    "objectivesWithoutHeader": "872",
    "course": "0"
  },
  {
    "parent": "203",
    "lotype": "594",
    "videoid": "873",
    "icon": "596",
    "link": "874",
    "folder": "875",
    "parentFolder": "505",
    "img": "876",
    "properties": "877",
    "title": "878",
    "objectivesWithoutHeader": "879",
    "course": "0"
  },
  {
    "parent": "204",
    "lotype": "594",
    "videoid": "880",
    "icon": "596",
    "link": "881",
    "folder": "882",
    "parentFolder": "516",
    "img": "883",
    "properties": "884",
    "title": "885",
    "objectivesWithoutHeader": "886",
    "course": "0"
  },
  {
    "parent": "206",
    "lotype": "594",
    "videoid": "175",
    "icon": "596",
    "link": "887",
    "folder": "888",
    "parentFolder": "531",
    "img": "889",
    "properties": "890",
    "title": "891",
    "objectivesWithoutHeader": "892",
    "course": "0"
  },
  {
    "parent": "206",
    "lotype": "594",
    "videoid": "175",
    "icon": "596",
    "link": "893",
    "folder": "894",
    "parentFolder": "531",
    "img": "895",
    "properties": "896",
    "title": "897",
    "objectivesWithoutHeader": "898",
    "course": "0"
  },
  {
    "parent": "206",
    "lotype": "594",
    "videoid": "175",
    "icon": "596",
    "link": "899",
    "folder": "900",
    "parentFolder": "531",
    "img": "901",
    "properties": "902",
    "title": "903",
    "objectivesWithoutHeader": "904",
    "course": "0"
  },
  {
    "parent": "207",
    "lotype": "594",
    "videoid": "175",
    "icon": "596",
    "link": "905",
    "folder": "906",
    "parentFolder": "541",
    "img": "907",
    "properties": "908",
    "title": "909",
    "objectivesWithoutHeader": "910",
    "course": "0"
  },
  {
    "parent": "207",
    "lotype": "594",
    "videoid": "175",
    "icon": "596",
    "link": "911",
    "folder": "912",
    "parentFolder": "541",
    "img": "913",
    "properties": "914",
    "title": "915",
    "objectivesWithoutHeader": "916",
    "course": "0"
  },
  {
    "parent": "208",
    "lotype": "594",
    "videoid": "175",
    "icon": "596",
    "link": "917",
    "folder": "918",
    "parentFolder": "552",
    "img": "919",
    "properties": "920",
    "title": "555",
    "objectivesWithoutHeader": "921",
    "course": "0"
  },
  {
    "parent": "208",
    "lotype": "594",
    "videoid": "175",
    "icon": "596",
    "link": "922",
    "folder": "923",
    "parentFolder": "552",
    "img": "924",
    "properties": "925",
    "title": "926",
    "objectivesWithoutHeader": "927",
    "course": "0"
  },
  {
    "parent": "210",
    "lotype": "594",
    "videoid": "175",
    "icon": "596",
    "link": "928",
    "folder": "929",
    "parentFolder": "564",
    "img": "930",
    "properties": "931",
    "title": "932",
    "objectivesWithoutHeader": "933",
    "course": "0"
  },
  {
    "parent": "210",
    "lotype": "594",
    "videoid": "175",
    "icon": "596",
    "link": "934",
    "folder": "935",
    "parentFolder": "564",
    "img": "936",
    "properties": "937",
    "title": "938",
    "objectivesWithoutHeader": "939",
    "course": "0"
  },
  {
    "parent": "211",
    "lotype": "594",
    "videoid": "175",
    "icon": "596",
    "link": "940",
    "folder": "941",
    "parentFolder": "575",
    "img": "942",
    "properties": "943",
    "title": "944",
    "objectivesWithoutHeader": "945",
    "course": "0"
  },
  {
    "parent": "212",
    "lotype": "594",
    "videoid": "175",
    "icon": "596",
    "link": "946",
    "folder": "947",
    "parentFolder": "585",
    "img": "948",
    "properties": "949",
    "title": "950",
    "objectivesWithoutHeader": "951",
    "course": "0"
  },
  {
    "parent": "183",
    "lotype": "952",
    "directories": "953",
    "chapters": "954",
    "videoid": "955",
    "icon": "952",
    "folder": "956",
    "parentFolder": "302",
    "img": "957",
    "properties": "958",
    "title": "959",
    "objectivesWithoutHeader": "960",
    "link": "12",
    "course": "0"
  },
  {
    "parent": "185",
    "lotype": "952",
    "directories": "961",
    "chapters": "962",
    "videoid": "175",
    "icon": "952",
    "folder": "963",
    "parentFolder": "322",
    "img": "957",
    "properties": "964",
    "title": "965",
    "objectivesWithoutHeader": "966",
    "link": "12",
    "course": "0"
  },
  {
    "parent": "187",
    "lotype": "952",
    "directories": "967",
    "chapters": "968",
    "videoid": "175",
    "icon": "952",
    "folder": "969",
    "parentFolder": "342",
    "img": "957",
    "properties": "970",
    "title": "971",
    "objectivesWithoutHeader": "972",
    "link": "12",
    "course": "0"
  },
  {
    "parent": "189",
    "lotype": "952",
    "directories": "973",
    "chapters": "974",
    "videoid": "175",
    "icon": "952",
    "folder": "975",
    "parentFolder": "363",
    "img": "957",
    "properties": "976",
    "title": "977",
    "objectivesWithoutHeader": "978",
    "link": "12",
    "course": "0"
  },
  {
    "parent": "191",
    "lotype": "952",
    "directories": "979",
    "chapters": "980",
    "videoid": "175",
    "icon": "952",
    "folder": "981",
    "parentFolder": "383",
    "img": "957",
    "properties": "982",
    "title": "983",
    "objectivesWithoutHeader": "984",
    "link": "12",
    "course": "0"
  },
  {
    "parent": "193",
    "lotype": "952",
    "directories": "985",
    "chapters": "986",
    "videoid": "175",
    "icon": "952",
    "folder": "987",
    "parentFolder": "403",
    "img": "957",
    "properties": "988",
    "title": "989",
    "objectivesWithoutHeader": "990",
    "link": "12",
    "course": "0"
  },
  {
    "parent": "195",
    "lotype": "952",
    "directories": "991",
    "chapters": "992",
    "videoid": "175",
    "icon": "952",
    "folder": "993",
    "parentFolder": "424",
    "img": "957",
    "properties": "994",
    "title": "995",
    "objectivesWithoutHeader": "996",
    "link": "12",
    "course": "0"
  },
  {
    "parent": "197",
    "lotype": "952",
    "directories": "997",
    "chapters": "998",
    "videoid": "175",
    "icon": "952",
    "folder": "999",
    "parentFolder": "445",
    "img": "957",
    "properties": "1000",
    "title": "1001",
    "objectivesWithoutHeader": "1002",
    "link": "12",
    "course": "0"
  },
  {
    "parent": "199",
    "lotype": "952",
    "directories": "1003",
    "chapters": "1004",
    "videoid": "175",
    "icon": "952",
    "folder": "1005",
    "parentFolder": "465",
    "img": "1006",
    "properties": "1007",
    "title": "1008",
    "objectivesWithoutHeader": "1009",
    "link": "12",
    "course": "0"
  },
  {
    "parent": "200",
    "lotype": "952",
    "directories": "1010",
    "chapters": "1011",
    "videoid": "175",
    "icon": "952",
    "folder": "1012",
    "parentFolder": "476",
    "img": "1006",
    "properties": "1013",
    "title": "1014",
    "objectivesWithoutHeader": "1015",
    "link": "12",
    "course": "0"
  },
  {
    "parent": "203",
    "lotype": "952",
    "directories": "1016",
    "chapters": "1017",
    "videoid": "175",
    "icon": "952",
    "folder": "1018",
    "parentFolder": "505",
    "img": "957",
    "properties": "1019",
    "title": "1020",
    "objectivesWithoutHeader": "1021",
    "link": "12",
    "course": "0"
  },
  {
    "parent": "204",
    "lotype": "952",
    "directories": "1022",
    "chapters": "1023",
    "videoid": "175",
    "icon": "952",
    "folder": "1024",
    "parentFolder": "516",
    "img": "957",
    "properties": "1025",
    "title": "1026",
    "objectivesWithoutHeader": "1027",
    "link": "12",
    "course": "0"
  },
  {
    "parent": "207",
    "lotype": "952",
    "directories": "1028",
    "chapters": "1029",
    "videoid": "175",
    "icon": "952",
    "folder": "1030",
    "parentFolder": "541",
    "img": "957",
    "properties": "1031",
    "title": "1032",
    "objectivesWithoutHeader": "1033",
    "link": "12",
    "course": "0"
  },
  {
    "parent": "208",
    "lotype": "952",
    "directories": "1034",
    "chapters": "1035",
    "videoid": "175",
    "icon": "952",
    "folder": "1030",
    "parentFolder": "552",
    "img": "957",
    "properties": "1036",
    "title": "1037",
    "objectivesWithoutHeader": "1038",
    "link": "12",
    "course": "0"
  },
  {
    "parent": "210",
    "lotype": "952",
    "directories": "1039",
    "chapters": "1040",
    "videoid": "175",
    "icon": "952",
    "folder": "5",
    "parentFolder": "564",
    "img": "957",
    "properties": "1041",
    "title": "1042",
    "objectivesWithoutHeader": "1043",
    "link": "12",
    "course": "0"
  },
  {
    "parent": "211",
    "lotype": "952",
    "directories": "1044",
    "chapters": "1045",
    "videoid": "175",
    "icon": "952",
    "folder": "5",
    "parentFolder": "575",
    "img": "957",
    "properties": "1046",
    "title": "1047",
    "objectivesWithoutHeader": "1048",
    "link": "12",
    "course": "0"
  },
  {
    "parent": "212",
    "lotype": "952",
    "directories": "1049",
    "chapters": "1050",
    "videoid": "175",
    "icon": "952",
    "folder": "5",
    "parentFolder": "585",
    "img": "957",
    "properties": "1051",
    "title": "1052",
    "objectivesWithoutHeader": "1053",
    "link": "12",
    "course": "0"
  },
  {
    "parent": "184",
    "lotype": "1054",
    "icon": "1054",
    "link": "1055",
    "folder": "1054",
    "parentFolder": "312",
    "img": "1056",
    "properties": "1057",
    "title": "1058",
    "objectivesWithoutHeader": "1059",
    "course": "0"
  },
  "unit",
  ["213", "214"],
  "unit-01-overview",
  "talk-0-overview/talk.png",
  {
    "highlightstyle": "37",
    "credits": "38",
    "courseurl": "39",
    "slack": "40",
    "moodle": "41",
    "license": "42"
  },
  "Module Overview ",
  [],
  [],
  [],
  ["213", "214"],
  "://wit-oth-regensburg-android-kotlin-2018.github.io//unit-01-overview",
  ["215", "272"],
  "unit-2-android",
  "talk-1-intro-to-android/intro.to.android.png",
  {
    "highlightstyle": "37",
    "credits": "38",
    "courseurl": "39",
    "slack": "40",
    "moodle": "41",
    "license": "42"
  },
  "Android Overview ",
  [],
  [],
  [],
  ["215", "272"],
  "://wit-oth-regensburg-android-kotlin-2018.github.io//unit-2-android",
  ["216", "289", "1060"],
  "unit-3-assignment",
  "talk-project-1/project-1.jpg",
  {
    "highlightstyle": "37",
    "credits": "38",
    "courseurl": "39",
    "slack": "40",
    "moodle": "41",
    "license": "42"
  },
  "Assignment Specification ",
  [],
  [],
  [],
  ["216", "289", "1060"],
  "://wit-oth-regensburg-android-kotlin-2018.github.io//unit-3-assignment",
  ["217", "218", "273"],
  "unit-01b-android-activitiy",
  "talk-00-android-platform/android-platform.png",
  {
    "highlightstyle": "37",
    "credits": "38",
    "courseurl": "39",
    "slack": "40",
    "moodle": "41",
    "license": "42"
  },
  "Android Activities ",
  [],
  [],
  [],
  ["217", "218", "273"],
  "://wit-oth-regensburg-android-kotlin-2018.github.io//unit-01b-android-activitiy",
  ["219", "220", "221"],
  "unit-02a-kotlin-basics",
  "talk-1-origins/kotlin-origins.png",
  {
    "highlightstyle": "37",
    "credits": "38",
    "courseurl": "39",
    "slack": "40",
    "moodle": "41",
    "license": "42"
  },
  "Kotlin Fundamentals ",
  [],
  [],
  [],
  ["219", "220", "221"],
  "://wit-oth-regensburg-android-kotlin-2018.github.io//unit-02a-kotlin-basics",
  ["222", "223", "274"],
  "unit-02b-android-adapters",
  "talk-01-app-objects/app-object.png",
  {
    "highlightstyle": "37",
    "credits": "38",
    "courseurl": "39",
    "slack": "40",
    "moodle": "41",
    "license": "42"
  },
  "Android Adapters ",
  [],
  [],
  [],
  ["222", "223", "274"],
  "://wit-oth-regensburg-android-kotlin-2018.github.io//unit-02b-android-adapters",
  ["224", "225"],
  "unit-03a-kotlin-idioms",
  "talk-1-idioms/02-idioms.jpg",
  {
    "highlightstyle": "37",
    "credits": "38",
    "courseurl": "39",
    "slack": "40",
    "moodle": "41",
    "license": "42"
  },
  "Kotlin Idioms ",
  "<p>Kotlin Idioms</p>\n",
  [],
  [],
  [],
  ["224", "225"],
  "://wit-oth-regensburg-android-kotlin-2018.github.io//unit-03a-kotlin-idioms",
  ["226", "227", "228", "229", "275"],
  "unit-03b-android-models",
  "talk-01-toolbar/toolbar.png",
  {
    "highlightstyle": "37",
    "credits": "38",
    "courseurl": "39",
    "slack": "40",
    "moodle": "41",
    "license": "42"
  },
  "Android Models ",
  [],
  [],
  [],
  ["226", "227", "228", "229", "275"],
  "://wit-oth-regensburg-android-kotlin-2018.github.io//unit-03b-android-models",
  ["230", "231"],
  "unit-04a-kotlin-types-and-packages",
  "talk-1-kotlin-types/types.png",
  {
    "highlightstyle": "37",
    "credits": "38",
    "courseurl": "39",
    "slack": "40",
    "moodle": "41",
    "license": "42"
  },
  "Kotlin Deep Dive ",
  [],
  [],
  [],
  ["230", "231"],
  "://wit-oth-regensburg-android-kotlin-2018.github.io//unit-04a-kotlin-types-and-packages",
  ["232", "233", "234", "276"],
  "unit-04b-images",
  "talk-01-resources/resources.png",
  {
    "highlightstyle": "37",
    "credits": "38",
    "courseurl": "39",
    "slack": "40",
    "moodle": "41",
    "license": "42"
  },
  "Images  ",
  [],
  [],
  [],
  ["232", "233", "234", "276"],
  "://wit-oth-regensburg-android-kotlin-2018.github.io//unit-04b-images",
  ["235", "236", "237"],
  "unit-05a-kotlin-packages-and-control-flow",
  "talk-01-kotlin-packages/packages.png",
  {
    "highlightstyle": "37",
    "credits": "38",
    "courseurl": "39",
    "slack": "40",
    "moodle": "41",
    "license": "42"
  },
  "Kotlin Packages & Control Flow ",
  [],
  [],
  [],
  ["235", "236", "237"],
  "://wit-oth-regensburg-android-kotlin-2018.github.io//unit-05a-kotlin-packages-and-control-flow",
  ["238", "239", "240", "277"],
  "unit-05b-map-activity",
  "talk-01-architecture/arch.png",
  {
    "highlightstyle": "37",
    "credits": "38",
    "courseurl": "39",
    "slack": "40",
    "moodle": "41",
    "license": "42"
  },
  "GoogleMap Activity ",
  [],
  [],
  [],
  ["238", "239", "240", "277"],
  "://wit-oth-regensburg-android-kotlin-2018.github.io//unit-05b-map-activity",
  ["241", "242"],
  "unit-06a-classes-and-inheritance",
  "talk-1-classes-1/classes-1.png",
  {
    "highlightstyle": "37",
    "credits": "38",
    "courseurl": "39",
    "slack": "40",
    "moodle": "41",
    "license": "42"
  },
  "Kotlin Classes I ",
  "<p>Kotlin Classes I</p>\n",
  [],
  [],
  [],
  ["241", "242"],
  "://wit-oth-regensburg-android-kotlin-2018.github.io//unit-06a-classes-and-inheritance",
  ["243", "244", "245", "278"],
  "unit-06b-json",
  "talk-1-file-formats/b-file-formats.png",
  {
    "highlightstyle": "37",
    "credits": "38",
    "courseurl": "39",
    "slack": "40",
    "moodle": "41",
    "license": "42"
  },
  "Persistence ",
  "<p>Korlin classes &amp; Inheritance. Storing and retrieving placemarks. JSON file serialization</p>\n",
  [],
  [],
  [],
  ["243", "244", "245", "278"],
  "://wit-oth-regensburg-android-kotlin-2018.github.io//unit-06b-json",
  ["246", "247"],
  "unit-07a-classes-2",
  "talk-1-properties-and-fields/properties-and-fields.png",
  {
    "highlightstyle": "37",
    "credits": "38",
    "courseurl": "39",
    "slack": "40",
    "moodle": "41",
    "license": "42"
  },
  "Kotlin Classes ",
  [],
  [],
  [],
  ["246", "247"],
  "://wit-oth-regensburg-android-kotlin-2018.github.io//unit-07a-classes-2",
  ["248", "249", "279"],
  "unit-07b-map-view",
  {
    "highlightstyle": "37",
    "credits": "38",
    "courseurl": "39",
    "slack": "40",
    "moodle": "41",
    "license": "42"
  },
  "Layouts ",
  "<p>Constraint layout. Managing embedded maps. Initialisation and manipulation.</p>\n",
  [],
  [],
  [],
  ["248", "249", "279"],
  "://wit-oth-regensburg-android-kotlin-2018.github.io//unit-07b-map-view",
  ["250", "251"],
  "unit-08a-interfaces",
  "talk-1-interfaces/interfaces.png",
  {
    "highlightstyle": "37",
    "credits": "38",
    "courseurl": "39",
    "slack": "40",
    "moodle": "41",
    "license": "42"
  },
  "Kotlin Interfaces & Visibility Modifiers ",
  [],
  [],
  [],
  ["250", "251"],
  "://wit-oth-regensburg-android-kotlin-2018.github.io//unit-08a-interfaces",
  ["252", "253", "1061", "1062", "280"],
  "unit-08b",
  "talk-mvp/mvp.png",
  {
    "highlightstyle": "37",
    "credits": "38",
    "courseurl": "39",
    "slack": "40",
    "moodle": "41",
    "license": "42"
  },
  "Model View Presenter ",
  "<p>Model View Presenter</p>\n",
  [],
  [],
  [],
  ["252", "253", "1061", "1062", "280"],
  "://wit-oth-regensburg-android-kotlin-2018.github.io//unit-08b",
  ["254", "281"],
  "unit-08c",
  "talk-mvp-2-baseview-presenter/mvp-placemark.png",
  {
    "highlightstyle": "37",
    "credits": "38",
    "courseurl": "39",
    "slack": "40",
    "moodle": "41",
    "license": "42"
  },
  "BaseView / BasePresenter ",
  "<p>BaseView / BasePresenter</p>\n",
  [],
  [],
  [],
  ["254", "281"],
  "://wit-oth-regensburg-android-kotlin-2018.github.io//unit-08c",
  ["1063"],
  "unit-08b-location",
  {
    "highlightstyle": "37",
    "credits": "38",
    "courseurl": "39",
    "slack": "40",
    "moodle": "41",
    "license": "42"
  },
  [],
  [],
  [],
  ["1063"],
  "://wit-oth-regensburg-android-kotlin-2018.github.io//unit-08b-location",
  ["255", "256", "257"],
  "unit-09a-extensions-sealed",
  "talk-1-extensions/extensions.jpg",
  {
    "highlightstyle": "37",
    "credits": "38",
    "courseurl": "39",
    "slack": "40",
    "moodle": "41",
    "license": "42"
  },
  "Kotlin Extensions, Data & Sealed Classes ",
  [],
  [],
  [],
  ["255", "256", "257"],
  "://wit-oth-regensburg-android-kotlin-2018.github.io//unit-09a-extensions-sealed",
  ["258", "259", "282"],
  "unit-09b-location",
  "talk-0-location-api/location-api.png",
  {
    "highlightstyle": "37",
    "credits": "38",
    "courseurl": "39",
    "slack": "40",
    "moodle": "41",
    "license": "42"
  },
  "Last Known Location ",
  "<p>Configure Markers and listen for marker events</p>\n",
  [],
  [],
  [],
  ["258", "259", "282"],
  "://wit-oth-regensburg-android-kotlin-2018.github.io//unit-09b-location",
  ["260", "283"],
  "unit-09c",
  "talk-2-tracking/tracking.jpg",
  {
    "highlightstyle": "37",
    "credits": "38",
    "courseurl": "39",
    "slack": "40",
    "moodle": "41",
    "license": "42"
  },
  "Current Location Tracking ",
  [],
  [],
  [],
  ["260", "283"],
  "://wit-oth-regensburg-android-kotlin-2018.github.io//unit-09c",
  "panelvideo",
  "Ai_WRkdtwEc",
  "film",
  {
    "highlightstyle": "37",
    "credits": "38",
    "courseurl": "39",
    "slack": "40",
    "moodle": "41",
    "license": "42"
  },
  "Location Overview ",
  ["261", "262", "263"],
  "unit-10a-kotlin",
  "talk-1-nested-and-enums/nested-and-enums.png",
  {
    "highlightstyle": "37",
    "credits": "38",
    "courseurl": "39",
    "slack": "40",
    "moodle": "41",
    "license": "42"
  },
  "Kotlin  ",
  [],
  [],
  [],
  ["261", "262", "263"],
  "://wit-oth-regensburg-android-kotlin-2018.github.io//unit-10a-kotlin",
  ["264", "265", "284"],
  "unit-10b-version-mgmt",
  "talk-0-android-x/android-x.png",
  {
    "highlightstyle": "37",
    "credits": "38",
    "courseurl": "39",
    "slack": "40",
    "moodle": "41",
    "license": "42"
  },
  "AndroidX ",
  "<p>AndroidX</p>\n",
  [],
  [],
  [],
  ["264", "265", "284"],
  "://wit-oth-regensburg-android-kotlin-2018.github.io//unit-10b-version-mgmt",
  ["266", "267", "285"],
  "unit-10c-rooms",
  "talk-1-rooms/rooms.png",
  {
    "highlightstyle": "37",
    "credits": "38",
    "courseurl": "39",
    "slack": "40",
    "moodle": "41",
    "license": "42"
  },
  "Rooms ",
  [],
  [],
  [],
  ["266", "267", "285"],
  "://wit-oth-regensburg-android-kotlin-2018.github.io//unit-10c-rooms",
  "xv_ICzIEDDs",
  {
    "highlightstyle": "37",
    "credits": "38",
    "courseurl": "39",
    "slack": "40",
    "moodle": "41",
    "license": "42"
  },
  ["268", "269", "286"],
  "unit-11a-firebase-auth",
  "talk-1-firebase/firebase.png",
  {
    "highlightstyle": "37",
    "credits": "38",
    "courseurl": "39",
    "slack": "40",
    "moodle": "41",
    "license": "42"
  },
  "Firebase Authentication ",
  "<p>Firebase Authentication</p>\n",
  [],
  [],
  [],
  ["268", "269", "286"],
  "://wit-oth-regensburg-android-kotlin-2018.github.io//unit-11a-firebase-auth",
  ["270", "287"],
  "unit-11b",
  "talk-1-database/firebase-database.png",
  {
    "highlightstyle": "37",
    "credits": "38",
    "courseurl": "39",
    "slack": "40",
    "moodle": "41",
    "license": "42"
  },
  "Firebase Database ",
  [],
  [],
  [],
  ["270", "287"],
  "://wit-oth-regensburg-android-kotlin-2018.github.io//unit-11b",
  ["271", "288"],
  "unit-11c",
  "talk-1-storage/storage.png",
  {
    "highlightstyle": "37",
    "credits": "38",
    "courseurl": "39",
    "slack": "40",
    "moodle": "41",
    "license": "42"
  },
  "Firebase Storage ",
  [],
  [],
  [],
  ["271", "288"],
  "://wit-oth-regensburg-android-kotlin-2018.github.io//unit-11c",
  "talk",
  "y8kxc3B2b0Q",
  "object group",
  "talk.pdf",
  "talk-0-overview",
  "talk.png",
  {
    "highlightstyle": "37",
    "credits": "38",
    "courseurl": "39",
    "slack": "40",
    "moodle": "41",
    "license": "42"
  },
  "<p>Outline of the structure and content of the module</p>\n",
  "JPsLfTwj8b8",
  "d-programming-example.pdf",
  "talk-2-convergence",
  "d-programming-example.png",
  {
    "highlightstyle": "37",
    "credits": "38",
    "courseurl": "39",
    "slack": "40",
    "moodle": "41",
    "license": "42"
  },
  "Convergence ",
  "<p>A simple algorithm expressed in Java, Groovy, Swift and Kotlin</p>\n",
  "Vvcoy-HAz3U",
  "intro.to.android.pdf",
  "talk-1-intro-to-android",
  "intro.to.android.png",
  {
    "highlightstyle": "37",
    "credits": "38",
    "courseurl": "39",
    "slack": "40",
    "moodle": "41",
    "license": "42"
  },
  "<p>Introduction to the Android platform - its goals and major components</p>\n",
  "project-1.pdf",
  "talk-project-1",
  "project-1.jpg",
  {
    "highlightstyle": "37",
    "credits": "38",
    "courseurl": "39",
    "slack": "40",
    "moodle": "41",
    "license": "42"
  },
  "Archaeological Fieldwork  ",
  "<p>Specification, grading guidelines and schedule for the Assignment</p>\n",
  "android-platform.pdf",
  "talk-00-android-platform",
  "android-platform.png",
  {
    "highlightstyle": "37",
    "credits": "38",
    "courseurl": "39",
    "slack": "40",
    "moodle": "41",
    "license": "42"
  },
  "Android Platform, Components & Activities ",
  "<p>Key features of the platform, the principle components + the activity model</p>\n",
  "01-foundation.pdf",
  "talk-01-foundation",
  "01-foundation.jpg",
  {
    "highlightstyle": "37",
    "credits": "38",
    "courseurl": "39",
    "slack": "40",
    "moodle": "41",
    "license": "42"
  },
  "Android: Foundation ",
  "<p>A first look at the structure of a simple Kotlin Android application</p>\n",
  "kotlin-origins.pdf",
  "talk-1-origins",
  "kotlin-origins.png",
  {
    "highlightstyle": "37",
    "credits": "38",
    "courseurl": "39",
    "slack": "40",
    "moodle": "41",
    "license": "42"
  },
  "Kotlin Structure ",
  "<p>The fundamental characteristics of the language</p>\n",
  "01-basic-syntax.pdf",
  "talk-2-basic-syntax",
  "01-basic-syntax.jpg",
  {
    "highlightstyle": "37",
    "credits": "38",
    "courseurl": "39",
    "slack": "40",
    "moodle": "41",
    "license": "42"
  },
  "Basic Syntax ",
  "<p>Rapid tour of the basic syntax of Kotlin</p>\n",
  "deep-dive.pdf",
  "talk-3-deep-dive",
  "deep-dive.png",
  {
    "highlightstyle": "37",
    "credits": "38",
    "courseurl": "39",
    "slack": "40",
    "moodle": "41",
    "license": "42"
  },
  "<p>A deep dive into some key Kotlin features: Data Classes &amp; Lambdas</p>\n",
  "app-object.pdf",
  "talk-01-app-objects",
  "app-object.png",
  {
    "highlightstyle": "37",
    "credits": "38",
    "courseurl": "39",
    "slack": "40",
    "moodle": "41",
    "license": "42"
  },
  "Android Application Object ",
  "<p>This class enables a global application object to be defined, accessible from all activities</p>\n",
  "adapter.pdf",
  "talk-02-adapters",
  "adapter.png",
  {
    "highlightstyle": "37",
    "credits": "38",
    "courseurl": "39",
    "slack": "40",
    "moodle": "41",
    "license": "42"
  },
  "Recycler View + Adapters ",
  "<p>Managing lists is facilitated by the RecyclerView + Adapters - 2 key patterns in Android development</p>\n",
  "02-idioms.pdf",
  "talk-1-idioms",
  "02-idioms.jpg",
  {
    "highlightstyle": "37",
    "credits": "38",
    "courseurl": "39",
    "slack": "40",
    "moodle": "41",
    "license": "42"
  },
  "Idioms ",
  "<p>A tour of the common idioms in Kotlin</p>\n",
  "a-J2k-variables.pdf",
  "talk-2-j2k-variables",
  "a-J2k-variables.jpg",
  {
    "highlightstyle": "37",
    "credits": "38",
    "courseurl": "39",
    "slack": "40",
    "moodle": "41",
    "license": "42"
  },
  "J2K Variables & Expressions ",
  "<p>Snippets of the same code in Java &amp; Kotlin</p>\n",
  "toolbar.pdf",
  "talk-01-toolbar",
  "toolbar.png",
  {
    "highlightstyle": "37",
    "credits": "38",
    "courseurl": "39",
    "slack": "40",
    "moodle": "41",
    "license": "42"
  },
  "Toolbar ",
  "<p>The Android Support Library implements AppCompatActivity + a range of general purpose components, including a ToolBar</p>\n",
  "store.pdf",
  "talk-02-store",
  "store.jpg",
  {
    "highlightstyle": "37",
    "credits": "38",
    "courseurl": "39",
    "slack": "40",
    "moodle": "41",
    "license": "42"
  },
  "Memory Store ",
  "<p>Abstract the Placemarks data structure into PlacemarkStore interface + in-memory implementation.</p>\n",
  "adapter-listener.pdf",
  "talk-03-adapter-listeners",
  "adapter-listener.png",
  {
    "highlightstyle": "37",
    "credits": "38",
    "courseurl": "39",
    "slack": "40",
    "moodle": "41",
    "license": "42"
  },
  "Adapter + Listener ",
  "<p>Equip the Adapter with a Listener interface. Use this interface to communicate from the adapter to the host Activity</p>\n",
  "parcelable.pdf",
  "talk-04-parcelable",
  "parcelable.jpg",
  {
    "highlightstyle": "37",
    "credits": "38",
    "courseurl": "39",
    "slack": "40",
    "moodle": "41",
    "license": "42"
  },
  "Parcelable ",
  "<p>Encapsulate model data for transmission between Activities</p>\n",
  "types.pdf",
  "talk-1-kotlin-types",
  "types.png",
  {
    "highlightstyle": "37",
    "credits": "38",
    "courseurl": "39",
    "slack": "40",
    "moodle": "41",
    "license": "42"
  },
  "Types ",
  "<p>Summary of the basic types in the Kotlin programming language</p>\n",
  "d-j2k-collections.pdf",
  "talk-2-j2k-collections",
  "d-j2k-collections.jpg",
  {
    "highlightstyle": "37",
    "credits": "38",
    "courseurl": "39",
    "slack": "40",
    "moodle": "41",
    "license": "42"
  },
  "J2K Collections ",
  "<p>Collection examples: Java &amp; Kotlin equivalents</p>\n",
  "resources.pdf",
  "talk-01-resources",
  "resources.png",
  {
    "highlightstyle": "37",
    "credits": "38",
    "courseurl": "39",
    "slack": "40",
    "moodle": "41",
    "license": "42"
  },
  "Resources ",
  "<p>A general term for all layout, strings, bitmaps and other XML artefacts in an Android Project</p>\n",
  "model-updates.pdf",
  "talk-02-model-updates",
  "model-updates.png",
  {
    "highlightstyle": "37",
    "credits": "38",
    "courseurl": "39",
    "slack": "40",
    "moodle": "41",
    "license": "42"
  },
  "Model Updates ",
  "<p>Creating and updating a Placemark. Updating the placemark list.</p>\n",
  "images.pdf",
  "talk-03-images",
  "images.png",
  {
    "highlightstyle": "37",
    "credits": "38",
    "courseurl": "39",
    "slack": "40",
    "moodle": "41",
    "license": "42"
  },
  "Images ",
  "<p>Support selecting image from phone gallery, and then displaying them in an activity.</p>\n",
  "packages.pdf",
  "talk-01-kotlin-packages",
  "packages.png",
  {
    "highlightstyle": "37",
    "credits": "38",
    "courseurl": "39",
    "slack": "40",
    "moodle": "41",
    "license": "42"
  },
  "Kotlin Packages ",
  "<p>Source files start with a package declaration. This can be used to access (import) features from the source file.</p>\n",
  "control-flow-and-ranges.pdf",
  "talk-02-kotlin-control-flow",
  "control-flow-and-ranges.png",
  {
    "highlightstyle": "37",
    "credits": "38",
    "courseurl": "39",
    "slack": "40",
    "moodle": "41",
    "license": "42"
  },
  "Kotlin Control Flow ",
  "<p>if, when, for and while statements</p>\n",
  "b-j2k-control-structures.pdf",
  "talk-3-j2k-control",
  "b-j2k-control-structures.png",
  {
    "highlightstyle": "37",
    "credits": "38",
    "courseurl": "39",
    "slack": "40",
    "moodle": "41",
    "license": "42"
  },
  "J2K Control Flow ",
  "<p>Control flow examples in Java and Kotlin</p>\n",
  "arch.pdf",
  "talk-01-architecture",
  "arch.png",
  {
    "highlightstyle": "37",
    "credits": "38",
    "courseurl": "39",
    "slack": "40",
    "moodle": "41",
    "license": "42"
  },
  "App Structure ",
  "<p>Key classes and relationships in the application.</p>\n",
  "google-map.pdf",
  "talk-02-google-map",
  "google-map.png",
  {
    "highlightstyle": "37",
    "credits": "38",
    "courseurl": "39",
    "slack": "40",
    "moodle": "41",
    "license": "42"
  },
  "Map Activity ",
  "<p>Google Map Activity can be inserted into an app via a Wizard from Studio. API Keys must be acquired from google directly.</p>\n",
  "markers.pdf",
  "talk-03-markers",
  "markers.png",
  {
    "highlightstyle": "37",
    "credits": "38",
    "courseurl": "39",
    "slack": "40",
    "moodle": "41",
    "license": "42"
  },
  "Cameras & Markers ",
  "<p>These abstractions enable the map view to be manipulated programatically, and facilitate direct manipulation by the user.</p>\n",
  "classes-1.pdf",
  "talk-1-classes-1",
  "classes-1.png",
  {
    "highlightstyle": "37",
    "credits": "38",
    "courseurl": "39",
    "slack": "40",
    "moodle": "41",
    "license": "42"
  },
  "Classes & Inheritance ",
  "<p>In kotlin, classes are more concise, explicit and fine-grained then Java</p>\n",
  "c-j2k-functions.pdf",
  "talk-2-j2k-functions",
  "c-j2k-functions.png",
  {
    "highlightstyle": "37",
    "credits": "38",
    "courseurl": "39",
    "slack": "40",
    "moodle": "41",
    "license": "42"
  },
  "J2K: Functions ",
  "<p>Functions in Java &amp; Kotlin</p>\n",
  "b-file-formats.pdf",
  "talk-1-file-formats",
  "b-file-formats.png",
  {
    "highlightstyle": "37",
    "credits": "38",
    "courseurl": "39",
    "slack": "40",
    "moodle": "41",
    "license": "42"
  },
  "File Formats ",
  "<p>When a simple file persistence strategy, CSV, Name/Value, YAML, XML &amp; JSON are all potential candidate formats for file-based storage.</p>\n",
  "json.pdf",
  "talk-2-json",
  "json.gif",
  {
    "highlightstyle": "37",
    "credits": "38",
    "courseurl": "39",
    "slack": "40",
    "moodle": "41",
    "license": "42"
  },
  "JSON ",
  "<p>A detailed look at the syntax of JSON</p>\n",
  "placemarkj-json.pdf",
  "talk-2-placemark-json",
  "placemarkj-json.png",
  {
    "highlightstyle": "37",
    "credits": "38",
    "courseurl": "39",
    "slack": "40",
    "moodle": "41",
    "license": "42"
  },
  "JSON Store ",
  "<p>A new PlacemarkStore implementation - PlacemarkJSONStore - to persist placemarks to a JSON file.</p>\n",
  "properties-and-fields.pdf",
  "talk-1-properties-and-fields",
  "properties-and-fields.png",
  {
    "highlightstyle": "37",
    "credits": "38",
    "courseurl": "39",
    "slack": "40",
    "moodle": "41",
    "license": "42"
  },
  "Properties & Fields ",
  "<p>Kotlin properties and fields offer a richer set of features and variants over Java</p>\n",
  "f-j2k-classes-and-objects.pdf",
  "talk-3-j2k-classes-and-objects",
  "f-j2k-classes-and-objects.jpg",
  {
    "highlightstyle": "37",
    "credits": "38",
    "courseurl": "39",
    "slack": "40",
    "moodle": "41",
    "license": "42"
  },
  "J2K : Classes ",
  "<p>Classes in Java &amp; Kotlin</p>\n",
  "constraint.pdf",
  "talk-a-constraint-layout",
  "constraint.png",
  {
    "highlightstyle": "37",
    "credits": "38",
    "courseurl": "39",
    "slack": "40",
    "moodle": "41",
    "license": "42"
  },
  "Constraint Layout ",
  "<p>ConstraintLayout allows you to create large and complex layouts with a flat view</p>\n",
  "map.pdf",
  "talk-b-overall-map",
  "map.jpg",
  {
    "highlightstyle": "37",
    "credits": "38",
    "courseurl": "39",
    "slack": "40",
    "moodle": "41",
    "license": "42"
  },
  "Overall Map Activity ",
  "<p>Introduce an activity to display all placemarks on a single map.</p>\n",
  "interfaces.pdf",
  "talk-1-interfaces",
  "interfaces.png",
  {
    "highlightstyle": "37",
    "credits": "38",
    "courseurl": "39",
    "slack": "40",
    "moodle": "41",
    "license": "42"
  },
  "Interfaces ",
  "<p>Kotlin interfaces largely follow Java 8 conventions</p>\n",
  "visibility.pdf",
  "talk-2-visibility",
  "visibility.jpg",
  {
    "highlightstyle": "37",
    "credits": "38",
    "courseurl": "39",
    "slack": "40",
    "moodle": "41",
    "license": "42"
  },
  "Visibility ",
  "<p>Classes, objects, interfaces, constructors, functions, properties and their setters can have visibility modifiers.</p>\n",
  "mvp.pdf",
  "talk-mvp",
  "mvp.png",
  {
    "highlightstyle": "37",
    "credits": "38",
    "courseurl": "39",
    "slack": "40",
    "moodle": "41",
    "license": "42"
  },
  "<p>Overview of Model View Controller &amp; Model View Presenter patterns</p>\n",
  "mvp-placemark.pdf",
  "talk-mvp-1-in-placemark",
  "mvp-placemark.png",
  {
    "highlightstyle": "37",
    "credits": "38",
    "courseurl": "39",
    "slack": "40",
    "moodle": "41",
    "license": "42"
  },
  "View/Presenter ",
  "<p>Detailed review of conversion of PlacemarkActivity to PlacemarkView &amp; PlacemarkPresenter</p>\n",
  "talk-mvp-2-baseview-presenter",
  {
    "highlightstyle": "37",
    "credits": "38",
    "courseurl": "39",
    "slack": "40",
    "moodle": "41",
    "license": "42"
  },
  "BaseView BasePresenter ",
  "<p>Factor out common MVP features into BaseView/Presenter classes</p>\n",
  "UgB4tJD4QQY",
  "extensions.pdf",
  "talk-1-extensions",
  "extensions.jpg",
  {
    "highlightstyle": "37",
    "credits": "38",
    "courseurl": "39",
    "slack": "40",
    "moodle": "41",
    "license": "42"
  },
  "Extensions  ",
  "<p>The ability to extend a class with new functionality without having to inherit from the class</p>\n",
  "Oa6YSKHvsZQ",
  "data-classes.pdf",
  "talk-2-data-classes",
  "data-classes.png",
  {
    "highlightstyle": "37",
    "credits": "38",
    "courseurl": "39",
    "slack": "40",
    "moodle": "41",
    "license": "42"
  },
  "Data Classes ",
  "<p>Classes whose main purpose is to hold data.</p>\n",
  "Nkc9p4rO0hk",
  "sealed-classes.pdf",
  "talk-3-sealed-classes",
  "sealed-classes.png",
  {
    "highlightstyle": "37",
    "credits": "38",
    "courseurl": "39",
    "slack": "40",
    "moodle": "41",
    "license": "42"
  },
  "Sealed Classes ",
  "<p>Sealed classes are used for representing restricted class hierarchies</p>\n",
  "p82--E7dLII",
  "location-api.pdf",
  "talk-0-location-api",
  "location-api.png",
  {
    "highlightstyle": "37",
    "credits": "38",
    "courseurl": "39",
    "slack": "40",
    "moodle": "41",
    "license": "42"
  },
  "Location API ",
  "<p>The location APIs available in Google Play services</p>\n",
  "19xhLiWnUGw",
  "map-current-location.pdf",
  "talk-1-map-current-location copy",
  "map-current-location.jpg",
  {
    "highlightstyle": "37",
    "credits": "38",
    "courseurl": "39",
    "slack": "40",
    "moodle": "41",
    "license": "42"
  },
  "Current Location ",
  "<p>Using the  Fused Location Provider to recover the last known location</p>\n",
  "mMOCcZb6Q9o",
  "tracking.pdf",
  "talk-2-tracking",
  "tracking.jpg",
  {
    "highlightstyle": "37",
    "credits": "38",
    "courseurl": "39",
    "slack": "40",
    "moodle": "41",
    "license": "42"
  },
  "Location Tracking ",
  "<p>Track the location, in real time, of the device.</p>\n",
  "nested-and-enums.pdf",
  "talk-1-nested-and-enums",
  "nested-and-enums.png",
  {
    "highlightstyle": "37",
    "credits": "38",
    "courseurl": "39",
    "slack": "40",
    "moodle": "41",
    "license": "42"
  },
  "Nested Classes & Enums ",
  "<p>Classes can be nested in other classes. Enums provide an elegant notation for a limited set of constant values</p>\n",
  "objects.pdf",
  "talk-2-objects",
  "objects.png",
  {
    "highlightstyle": "37",
    "credits": "38",
    "courseurl": "39",
    "slack": "40",
    "moodle": "41",
    "license": "42"
  },
  "Objects ",
  "<p>Objects, Singletons &amp; Companion objects</p>\n",
  "delegation.pdf",
  "talk-3-delegation",
  "delegation.png",
  {
    "highlightstyle": "37",
    "credits": "38",
    "courseurl": "39",
    "slack": "40",
    "moodle": "41",
    "license": "42"
  },
  "Delegation ",
  "<p>A class can implement an interface Base by delegating all of its public members to a specified object</p>\n",
  "android-x.pdf",
  "talk-0-android-x",
  "android-x.png",
  {
    "highlightstyle": "37",
    "credits": "38",
    "courseurl": "39",
    "slack": "40",
    "moodle": "41",
    "license": "42"
  },
  "Jetpack & AndroidX ",
  "<p>AndroidX is the open-source project that the Android team uses to develop, test, package, version and release libraries within Jetpack</p>\n",
  "version-mgmt.pdf",
  "talk-1-version-mgmt",
  "version-mgmt.png",
  {
    "highlightstyle": "37",
    "credits": "38",
    "courseurl": "39",
    "slack": "40",
    "moodle": "41",
    "license": "42"
  },
  "Semantic Version Management ",
  "<p>A simple set of rules and requirements that dictate how version numbers are assigned and incremented</p>\n",
  "rooms.pdf",
  "talk-1-rooms",
  "rooms.png",
  {
    "highlightstyle": "37",
    "credits": "38",
    "courseurl": "39",
    "slack": "40",
    "moodle": "41",
    "license": "42"
  },
  "<p>The Room persistence library provides an abstraction layer over SQLite</p>\n",
  "placemark-rooms.pdf",
  "talk-2-placemark-rooms",
  "placemark-rooms.png",
  {
    "highlightstyle": "37",
    "credits": "38",
    "courseurl": "39",
    "slack": "40",
    "moodle": "41",
    "license": "42"
  },
  "Rooms in Placemark ",
  "<p>Implementation of PlacemarkStoreRoom, which stores placemarks in a SQLite database</p>\n",
  "firebase.pdf",
  "talk-1-firebase",
  "firebase.png",
  {
    "highlightstyle": "37",
    "credits": "38",
    "courseurl": "39",
    "slack": "40",
    "moodle": "41",
    "license": "42"
  },
  "Firebase ",
  "<p>A set of cloud services from google delivering app infrastructure</p>\n",
  "firebase-auth.pdf",
  "talk-2-firebase-auth",
  "firebase-auth.png",
  {
    "highlightstyle": "37",
    "credits": "38",
    "courseurl": "39",
    "slack": "40",
    "moodle": "41",
    "license": "42"
  },
  "Firebase Auth ",
  "<p>Signup, Login and Logout in Placemark</p>\n",
  "firebase-database.pdf",
  "talk-1-database",
  "firebase-database.png",
  {
    "highlightstyle": "37",
    "credits": "38",
    "courseurl": "39",
    "slack": "40",
    "moodle": "41",
    "license": "42"
  },
  "Realtime Database ",
  "<p>Storing &amp; Retrieving placemarks to/from Firebase</p>\n",
  "storage.pdf",
  "talk-1-storage",
  "storage.png",
  {
    "highlightstyle": "37",
    "credits": "38",
    "courseurl": "39",
    "slack": "40",
    "moodle": "41",
    "license": "42"
  },
  "Storage ",
  "<p>Storing &amp; Retrieving placemark images</p>\n",
  "lab",
  ["1064", "1065"],
  ["1066", "1067", "1068", "1069", "1070", "1071", "1072"],
  "6kcITTgMPxA",
  "book-00-studio",
  "img/main.png",
  {
    "highlightstyle": "37",
    "credits": "38",
    "courseurl": "39",
    "slack": "40",
    "moodle": "41",
    "license": "42"
  },
  "Lab-00 Studio",
  "<p>Download and configure Android Studio. Generate and run a sample application.</p>\n",
  ["1064", "1065"],
  ["1073", "1074", "1075", "1076", "1077", "1078", "1079"],
  "book-01-activity",
  {
    "highlightstyle": "37",
    "credits": "38",
    "courseurl": "39",
    "slack": "40",
    "moodle": "41",
    "license": "42"
  },
  "Lab-01 Activities",
  "<p>Layout the PlacemarkActivity - supporting create/edit of placemarks</p>\n",
  ["1064", "1065"],
  ["1080", "1081", "1082", "1083", "1084", "1085", "1086", "1087"],
  "book-02-adapters",
  {
    "highlightstyle": "37",
    "credits": "38",
    "courseurl": "39",
    "slack": "40",
    "moodle": "41",
    "license": "42"
  },
  "Lab-02 Adapters",
  "<p>Introduce new activity to display a list of placemarks. Support adding to this list.</p>\n",
  ["1064", "1065"],
  ["1088", "1089", "1090", "1091", "1092", "1093", "1094", "1095"],
  "book-03-models",
  {
    "highlightstyle": "37",
    "credits": "38",
    "courseurl": "39",
    "slack": "40",
    "moodle": "41",
    "license": "42"
  },
  "Lab-03 Models",
  "<p>Application object + Model classes to manage placemarks.</p>\n",
  ["1064", "1065"],
  ["1096", "1097", "1098", "1099", "1100", "1101", "1102", "1103"],
  "book-04-images",
  {
    "highlightstyle": "37",
    "credits": "38",
    "courseurl": "39",
    "slack": "40",
    "moodle": "41",
    "license": "42"
  },
  "Lab-04 Images",
  "<p>Allow an image to be selected from the phones photos, and stored with the placemark</p>\n",
  ["1064", "1065"],
  ["1104", "1105", "1106", "1107", "1108", "1109", "1110", "1111", "1112"],
  "book-maps",
  {
    "highlightstyle": "37",
    "credits": "38",
    "courseurl": "39",
    "slack": "40",
    "moodle": "41",
    "license": "42"
  },
  "Lab-05 MapActivity",
  "<p>Include a MapActivity, enabling the user to select the location of the placemark</p>\n",
  ["1064", "1065"],
  ["1113", "1114", "1115", "1116", "1117", "1118", "1119", "1120"],
  "book-json",
  {
    "highlightstyle": "37",
    "credits": "38",
    "courseurl": "39",
    "slack": "40",
    "moodle": "41",
    "license": "42"
  },
  "Lab-06 JSON",
  "<p>Save and restore placemarks from a JSON formatted file</p>\n",
  ["1064", "1065"],
  ["1121", "1122", "1123", "1124", "1125", "1126", "1127", "1128", "1129"],
  "book-0-map-view",
  {
    "highlightstyle": "37",
    "credits": "38",
    "courseurl": "39",
    "slack": "40",
    "moodle": "41",
    "license": "42"
  },
  "Lab-07 MapView",
  "<p>Display all placemarks on a map in a new activity</p>\n",
  ["1064", "1065"],
  ["1130", "1131", "1132", "1133", "1134", "1135", "1136", "1137", "1138"],
  "book-1-mvp-1",
  "img/main.jpg",
  {
    "highlightstyle": "37",
    "credits": "38",
    "courseurl": "39",
    "slack": "40",
    "moodle": "41",
    "license": "42"
  },
  "Lab-08a MVP I",
  "<p>Refactor Activities to use the Model View Presenter pattern</p>\n",
  ["1064", "1065"],
  ["1139", "1140", "1141", "1142", "1143", "1144", "1145"],
  "book-2-mvp-2",
  {
    "highlightstyle": "37",
    "credits": "38",
    "courseurl": "39",
    "slack": "40",
    "moodle": "41",
    "license": "42"
  },
  "Lab-08b MVP II",
  "<p>Complete the presenter pattern implementation, introducing BaseView &amp; BasePresenter classes</p>\n",
  ["1064", "1065"],
  ["1146", "1147", "1148", "1149", "1150", "1151", "1152", "1153", "1154"],
  "book-1-location",
  {
    "highlightstyle": "37",
    "credits": "38",
    "courseurl": "39",
    "slack": "40",
    "moodle": "41",
    "license": "42"
  },
  "Lab-09a Location",
  "<p>When creating a new placemark, use the current location as the starting point.</p>\n",
  ["1064", "1065"],
  ["1155", "1156", "1157", "1158", "1159"],
  "book-2-location",
  {
    "highlightstyle": "37",
    "credits": "38",
    "courseurl": "39",
    "slack": "40",
    "moodle": "41",
    "license": "42"
  },
  "Lab-09b Tracking",
  "<p>Extend the location facility to track location in real time.</p>\n",
  ["1064", "1065"],
  ["1160", "1161", "1162", "1163", "1164", "1165"],
  "book-1",
  {
    "highlightstyle": "37",
    "credits": "38",
    "courseurl": "39",
    "slack": "40",
    "moodle": "41",
    "license": "42"
  },
  "Lab-10a AndroidX",
  "<p>Migrate to AndroidX + manage library versions more optimally</p>\n",
  ["1064", "1065"],
  ["1166", "1167", "1168", "1169", "1170", "1171", "1172", "1173"],
  {
    "highlightstyle": "37",
    "credits": "38",
    "courseurl": "39",
    "slack": "40",
    "moodle": "41",
    "license": "42"
  },
  "Lab-10b Rooms",
  "<p>Introduce a new PlacemarkStore implementation to persist to an SQLite database</p>\n",
  ["1064", "1065"],
  [
    "1174",
    "1175",
    "1176",
    "1177",
    "1178",
    "1179",
    "1180",
    "1181",
    "1182",
    "1183"
  ],
  {
    "highlightstyle": "37",
    "credits": "38",
    "courseurl": "39",
    "slack": "40",
    "moodle": "41",
    "license": "42"
  },
  "Lab-11a Firebase Auth",
  "<p>Authenticate users against the Firebase Authentication service</p>\n",
  ["1064", "1065"],
  ["1184", "1185", "1186", "1187", "1188", "1189", "1190", "1191", "1192"],
  {
    "highlightstyle": "37",
    "credits": "38",
    "courseurl": "39",
    "slack": "40",
    "moodle": "41",
    "license": "42"
  },
  "Lab-11b Firebase Database",
  "<p>Store placemarks in Firebase Realtime Database</p>\n",
  ["1064", "1065"],
  ["1193", "1194", "1195", "1196", "1197"],
  {
    "highlightstyle": "37",
    "credits": "38",
    "courseurl": "39",
    "slack": "40",
    "moodle": "41",
    "license": "42"
  },
  "Lab-11c Firebase Storage",
  "<p>Store images in Firebase Storage</p>\n",
  "archive",
  "template.docx.zip",
  "template.docx.png",
  {
    "highlightstyle": "37",
    "credits": "38",
    "courseurl": "39",
    "slack": "40",
    "moodle": "41",
    "license": "42"
  },
  "Project Submission Template ",
  "<p>An archive of a word document to be submitted with assignment 2</p>\n",
  {
    "parent": "184",
    "lotype": "1198",
    "link": "1199",
    "folder": "1198",
    "parentFolder": "312",
    "img": "1200",
    "properties": "1201",
    "title": "1202",
    "objectivesWithoutHeader": "1203",
    "absoluteLink": true,
    "course": "0"
  },
  {
    "parent": "199",
    "lotype": "594",
    "videoid": "175",
    "icon": "596",
    "link": "1204",
    "course": "0"
  },
  {
    "parent": "199",
    "lotype": "952",
    "directories": "1205",
    "chapters": "1206",
    "videoid": "175",
    "icon": "952",
    "link": "12",
    "course": "0"
  },
  {
    "parent": "201",
    "lotype": "952",
    "directories": "1207",
    "chapters": "1208",
    "videoid": "175",
    "icon": "952",
    "link": "12",
    "course": "0"
  },
  "archives",
  "img",
  {
    "file": "1209",
    "title": "1210",
    "shortTitle": "959",
    "content": "1211",
    "contentWithoutHeader": "960"
  },
  {
    "file": "1212",
    "title": "1213",
    "shortTitle": "1214",
    "content": "1215",
    "contentWithoutHeader": "1216"
  },
  {
    "file": "1217",
    "title": "1218",
    "shortTitle": "1219",
    "content": "1220",
    "contentWithoutHeader": "1221"
  },
  {
    "file": "1222",
    "title": "1223",
    "shortTitle": "1224",
    "content": "1225",
    "contentWithoutHeader": "1226"
  },
  {
    "file": "1227",
    "title": "1228",
    "shortTitle": "1229",
    "content": "1230",
    "contentWithoutHeader": "1231"
  },
  {
    "file": "1232",
    "title": "1233",
    "shortTitle": "1234",
    "content": "1235",
    "contentWithoutHeader": "1236"
  },
  {
    "file": "1237",
    "title": "1238",
    "shortTitle": "1239",
    "content": "1240",
    "contentWithoutHeader": "1241"
  },
  {
    "file": "1242",
    "title": "1210",
    "shortTitle": "965",
    "content": "1243",
    "contentWithoutHeader": "966"
  },
  {
    "file": "1212",
    "title": "1244",
    "shortTitle": "1214",
    "content": "1245",
    "contentWithoutHeader": "1246"
  },
  {
    "file": "1217",
    "title": "1247",
    "shortTitle": "1219",
    "content": "1248",
    "contentWithoutHeader": "1249"
  },
  {
    "file": "1222",
    "title": "1250",
    "shortTitle": "1224",
    "content": "1251",
    "contentWithoutHeader": "1236"
  },
  {
    "file": "1227",
    "title": "1252",
    "shortTitle": "1229",
    "content": "1253",
    "contentWithoutHeader": "1254"
  },
  {
    "file": "1232",
    "title": "1255",
    "shortTitle": "1234",
    "content": "1256",
    "contentWithoutHeader": "1257"
  },
  {
    "file": "1237",
    "title": "1238",
    "shortTitle": "1239",
    "content": "1258",
    "contentWithoutHeader": "1241"
  },
  {
    "file": "1259",
    "title": "1260",
    "shortTitle": "971",
    "content": "1261",
    "contentWithoutHeader": "972"
  },
  {
    "file": "1262",
    "title": "1263",
    "shortTitle": "1264",
    "content": "1265",
    "contentWithoutHeader": "1266"
  },
  {
    "file": "1217",
    "title": "1267",
    "shortTitle": "1219",
    "content": "1268",
    "contentWithoutHeader": "1269"
  },
  {
    "file": "1222",
    "title": "1270",
    "shortTitle": "1224",
    "content": "1271",
    "contentWithoutHeader": "1272"
  },
  {
    "file": "1227",
    "title": "1273",
    "shortTitle": "1229",
    "content": "1274",
    "contentWithoutHeader": "1275"
  },
  {
    "file": "1232",
    "title": "1276",
    "shortTitle": "1234",
    "content": "1277",
    "contentWithoutHeader": "1278"
  },
  {
    "file": "1279",
    "title": "1280",
    "shortTitle": "1281",
    "content": "1282",
    "contentWithoutHeader": "1283"
  },
  {
    "file": "1284",
    "title": "1285",
    "shortTitle": "1239",
    "content": "1286",
    "contentWithoutHeader": "1241"
  },
  {
    "file": "1287",
    "title": "1288",
    "shortTitle": "977",
    "content": "1289",
    "contentWithoutHeader": "978"
  },
  {
    "file": "1262",
    "title": "1290",
    "shortTitle": "1264",
    "content": "1291",
    "contentWithoutHeader": "1292"
  },
  {
    "file": "1217",
    "title": "1293",
    "shortTitle": "1219",
    "content": "1294",
    "contentWithoutHeader": "1295"
  },
  {
    "file": "1222",
    "title": "1296",
    "shortTitle": "1224",
    "content": "1297",
    "contentWithoutHeader": "1298"
  },
  {
    "file": "1227",
    "title": "1299",
    "shortTitle": "1229",
    "content": "1300",
    "contentWithoutHeader": "1301"
  },
  {
    "file": "1232",
    "title": "1302",
    "shortTitle": "1234",
    "content": "1303",
    "contentWithoutHeader": "1304"
  },
  {
    "file": "1279",
    "title": "1305",
    "shortTitle": "1281",
    "content": "1306",
    "contentWithoutHeader": "1307"
  },
  {
    "file": "1284",
    "title": "1285",
    "shortTitle": "1239",
    "content": "1308",
    "contentWithoutHeader": "1241"
  },
  {
    "file": "1309",
    "title": "1260",
    "shortTitle": "983",
    "content": "1310",
    "contentWithoutHeader": "984"
  },
  {
    "file": "1262",
    "title": "1311",
    "shortTitle": "1264",
    "content": "1312",
    "contentWithoutHeader": "1313"
  },
  {
    "file": "1217",
    "title": "1314",
    "shortTitle": "1219",
    "content": "1315",
    "contentWithoutHeader": "1316"
  },
  {
    "file": "1222",
    "title": "1317",
    "shortTitle": "1224",
    "content": "1318",
    "contentWithoutHeader": "1319"
  },
  {
    "file": "1227",
    "title": "1320",
    "shortTitle": "1229",
    "content": "1321",
    "contentWithoutHeader": "1322"
  },
  {
    "file": "1232",
    "title": "1323",
    "shortTitle": "1234",
    "content": "1324",
    "contentWithoutHeader": "1325"
  },
  {
    "file": "1279",
    "title": "1326",
    "shortTitle": "1281",
    "content": "1327",
    "contentWithoutHeader": "1328"
  },
  {
    "file": "1284",
    "title": "1285",
    "shortTitle": "1239",
    "content": "1329",
    "contentWithoutHeader": "1241"
  },
  {
    "file": "1330",
    "title": "1331",
    "shortTitle": "989",
    "content": "1332",
    "contentWithoutHeader": "990"
  },
  {
    "file": "1262",
    "title": "1290",
    "shortTitle": "1264",
    "content": "1333",
    "contentWithoutHeader": "1334"
  },
  {
    "file": "1217",
    "title": "1335",
    "shortTitle": "1219",
    "content": "1336",
    "contentWithoutHeader": "1337"
  },
  {
    "file": "1222",
    "title": "1338",
    "shortTitle": "1224",
    "content": "1339",
    "contentWithoutHeader": "1340"
  },
  {
    "file": "1227",
    "title": "1341",
    "shortTitle": "1229",
    "content": "1342",
    "contentWithoutHeader": "1343"
  },
  {
    "file": "1232",
    "title": "1344",
    "shortTitle": "1234",
    "content": "1345",
    "contentWithoutHeader": "1346"
  },
  {
    "file": "1279",
    "title": "1347",
    "shortTitle": "1281",
    "content": "1348",
    "contentWithoutHeader": "1349"
  },
  {
    "file": "1350",
    "title": "1351",
    "shortTitle": "1352",
    "content": "1353",
    "contentWithoutHeader": "1354"
  },
  {
    "file": "1355",
    "title": "1285",
    "shortTitle": "1239",
    "content": "1356",
    "contentWithoutHeader": "1241"
  },
  {
    "file": "1357",
    "title": "1260",
    "shortTitle": "995",
    "content": "1358",
    "contentWithoutHeader": "996"
  },
  {
    "file": "1212",
    "title": "1359",
    "shortTitle": "1214",
    "content": "1360",
    "contentWithoutHeader": "1361"
  },
  {
    "file": "1217",
    "title": "1362",
    "shortTitle": "1219",
    "content": "1363",
    "contentWithoutHeader": "1364"
  },
  {
    "file": "1222",
    "title": "1365",
    "shortTitle": "1224",
    "content": "1366",
    "contentWithoutHeader": "1367"
  },
  {
    "file": "1227",
    "title": "1368",
    "shortTitle": "1229",
    "content": "1369",
    "contentWithoutHeader": "1370"
  },
  {
    "file": "1232",
    "title": "1371",
    "shortTitle": "1234",
    "content": "1372",
    "contentWithoutHeader": "1373"
  },
  {
    "file": "1350",
    "title": "1374",
    "shortTitle": "1352",
    "content": "1375",
    "contentWithoutHeader": "1376"
  },
  {
    "file": "1355",
    "title": "1377",
    "shortTitle": "1239",
    "content": "1378",
    "contentWithoutHeader": "1241"
  },
  {
    "file": "1379",
    "title": "1260",
    "shortTitle": "1001",
    "content": "1380",
    "contentWithoutHeader": "1002"
  },
  {
    "file": "1212",
    "title": "1359",
    "shortTitle": "1214",
    "content": "1381",
    "contentWithoutHeader": "1334"
  },
  {
    "file": "1217",
    "title": "1382",
    "shortTitle": "1219",
    "content": "1383",
    "contentWithoutHeader": "1384"
  },
  {
    "file": "1222",
    "title": "1385",
    "shortTitle": "1224",
    "content": "1386",
    "contentWithoutHeader": "1387"
  },
  {
    "file": "1227",
    "title": "1388",
    "shortTitle": "1229",
    "content": "1389",
    "contentWithoutHeader": "1390"
  },
  {
    "file": "1232",
    "title": "1391",
    "shortTitle": "1234",
    "content": "1392",
    "contentWithoutHeader": "1393"
  },
  {
    "file": "1279",
    "title": "1394",
    "shortTitle": "1281",
    "content": "1395",
    "contentWithoutHeader": "1396"
  },
  {
    "file": "1350",
    "title": "1397",
    "shortTitle": "1352",
    "content": "1398",
    "contentWithoutHeader": "1399"
  },
  {
    "file": "1400",
    "title": "1377",
    "shortTitle": "1401",
    "content": "1402",
    "contentWithoutHeader": "1241"
  },
  {
    "file": "1403",
    "title": "1260",
    "shortTitle": "1008",
    "content": "1404",
    "contentWithoutHeader": "1009"
  },
  {
    "file": "1212",
    "title": "1405",
    "shortTitle": "1214",
    "content": "1406",
    "contentWithoutHeader": "1334"
  },
  {
    "file": "1217",
    "title": "1405",
    "shortTitle": "1219",
    "content": "1407",
    "contentWithoutHeader": "1408"
  },
  {
    "file": "1222",
    "title": "1409",
    "shortTitle": "1224",
    "content": "1410",
    "contentWithoutHeader": "1411"
  },
  {
    "file": "1227",
    "title": "1412",
    "shortTitle": "1229",
    "content": "1413",
    "contentWithoutHeader": "1414"
  },
  {
    "file": "1232",
    "title": "1415",
    "shortTitle": "1234",
    "content": "1416",
    "contentWithoutHeader": "1417"
  },
  {
    "file": "1279",
    "title": "1418",
    "shortTitle": "1281",
    "content": "1419",
    "contentWithoutHeader": "1420"
  },
  {
    "file": "1350",
    "title": "1421",
    "shortTitle": "1352",
    "content": "1422",
    "contentWithoutHeader": "1423"
  },
  {
    "file": "1284",
    "title": "1359",
    "shortTitle": "1239",
    "content": "1424",
    "contentWithoutHeader": "1241"
  },
  {
    "file": "1425",
    "title": "1210",
    "shortTitle": "1014",
    "content": "1426",
    "contentWithoutHeader": "1015"
  },
  {
    "file": "1212",
    "title": "1427",
    "shortTitle": "1214",
    "content": "1428",
    "contentWithoutHeader": "1334"
  },
  {
    "file": "1217",
    "title": "1427",
    "shortTitle": "1219",
    "content": "1429",
    "contentWithoutHeader": "1430"
  },
  {
    "file": "1222",
    "title": "1431",
    "shortTitle": "1224",
    "content": "1432",
    "contentWithoutHeader": "1433"
  },
  {
    "file": "1227",
    "title": "1434",
    "shortTitle": "1229",
    "content": "1435",
    "contentWithoutHeader": "1436"
  },
  {
    "file": "1232",
    "title": "1437",
    "shortTitle": "1234",
    "content": "1438",
    "contentWithoutHeader": "1439"
  },
  {
    "file": "1284",
    "title": "1285",
    "shortTitle": "1239",
    "content": "1440",
    "contentWithoutHeader": "1241"
  },
  {
    "file": "1441",
    "title": "1210",
    "shortTitle": "1020",
    "content": "1442",
    "contentWithoutHeader": "1021"
  },
  {
    "file": "1212",
    "title": "1427",
    "shortTitle": "1214",
    "content": "1443",
    "contentWithoutHeader": "1361"
  },
  {
    "file": "1217",
    "title": "1427",
    "shortTitle": "1219",
    "content": "1444",
    "contentWithoutHeader": "1445"
  },
  {
    "file": "1222",
    "title": "1446",
    "shortTitle": "1224",
    "content": "1447",
    "contentWithoutHeader": "1448"
  },
  {
    "file": "1227",
    "title": "1449",
    "shortTitle": "1229",
    "content": "1450",
    "contentWithoutHeader": "1451"
  },
  {
    "file": "1232",
    "title": "1452",
    "shortTitle": "1234",
    "content": "1453",
    "contentWithoutHeader": "1454"
  },
  {
    "file": "1279",
    "title": "1455",
    "shortTitle": "1281",
    "content": "1456",
    "contentWithoutHeader": "1457"
  },
  {
    "file": "1350",
    "title": "1458",
    "shortTitle": "1352",
    "content": "1459",
    "contentWithoutHeader": "1460"
  },
  {
    "file": "1284",
    "title": "1285",
    "shortTitle": "1239",
    "content": "1461",
    "contentWithoutHeader": "1241"
  },
  {
    "file": "1462",
    "title": "1210",
    "shortTitle": "1026",
    "content": "1463",
    "contentWithoutHeader": "1027"
  },
  {
    "file": "1212",
    "title": "1464",
    "shortTitle": "1214",
    "content": "1465",
    "contentWithoutHeader": "1466"
  },
  {
    "file": "1217",
    "title": "1449",
    "shortTitle": "1219",
    "content": "1467",
    "contentWithoutHeader": "1468"
  },
  {
    "file": "1222",
    "title": "1469",
    "shortTitle": "1224",
    "content": "1470",
    "contentWithoutHeader": "1471"
  },
  {
    "file": "1472",
    "title": "1359",
    "shortTitle": "1239",
    "content": "1473",
    "contentWithoutHeader": "1241"
  },
  {
    "file": "1474",
    "title": "1210",
    "shortTitle": "1032",
    "content": "1475",
    "contentWithoutHeader": "1033"
  },
  {
    "file": "1212",
    "title": "1476",
    "shortTitle": "1214",
    "content": "1477",
    "contentWithoutHeader": "1478"
  },
  {
    "file": "1217",
    "title": "1479",
    "shortTitle": "1219",
    "content": "1480",
    "contentWithoutHeader": "1481"
  },
  {
    "file": "1222",
    "title": "1482",
    "shortTitle": "1224",
    "content": "1483",
    "contentWithoutHeader": "1484"
  },
  {
    "file": "1227",
    "title": "1485",
    "shortTitle": "1229",
    "content": "1486",
    "contentWithoutHeader": "1487"
  },
  {
    "file": "1284",
    "title": "1359",
    "shortTitle": "1239",
    "content": "1488",
    "contentWithoutHeader": "1241"
  },
  {
    "file": "1489",
    "title": "1210",
    "shortTitle": "1037",
    "content": "1490",
    "contentWithoutHeader": "1038"
  },
  {
    "file": "1212",
    "title": "1491",
    "shortTitle": "1214",
    "content": "1492",
    "contentWithoutHeader": "1493"
  },
  {
    "file": "1217",
    "title": "1494",
    "shortTitle": "1219",
    "content": "1495",
    "contentWithoutHeader": "1496"
  },
  {
    "file": "1222",
    "title": "1497",
    "shortTitle": "1224",
    "content": "1498",
    "contentWithoutHeader": "1499"
  },
  {
    "file": "1227",
    "title": "1500",
    "shortTitle": "1229",
    "content": "1501",
    "contentWithoutHeader": "1502"
  },
  {
    "file": "1232",
    "title": "1503",
    "shortTitle": "1234",
    "content": "1504",
    "contentWithoutHeader": "1505"
  },
  {
    "file": "1279",
    "title": "1506",
    "shortTitle": "1281",
    "content": "1507",
    "contentWithoutHeader": "1508"
  },
  {
    "file": "1237",
    "title": "1377",
    "shortTitle": "1239",
    "content": "1509",
    "contentWithoutHeader": "1241"
  },
  {
    "file": "1510",
    "title": "1260",
    "shortTitle": "1042",
    "content": "1511",
    "contentWithoutHeader": "1043"
  },
  {
    "file": "1212",
    "title": "1512",
    "shortTitle": "1214",
    "content": "1513",
    "contentWithoutHeader": "1514"
  },
  {
    "file": "1217",
    "title": "1515",
    "shortTitle": "1219",
    "content": "1516",
    "contentWithoutHeader": "1517"
  },
  {
    "file": "1222",
    "title": "1518",
    "shortTitle": "1224",
    "content": "1519",
    "contentWithoutHeader": "1520"
  },
  {
    "file": "1227",
    "title": "1521",
    "shortTitle": "1229",
    "content": "1522",
    "contentWithoutHeader": "1523"
  },
  {
    "file": "1232",
    "title": "1524",
    "shortTitle": "1234",
    "content": "1525",
    "contentWithoutHeader": "1526"
  },
  {
    "file": "1279",
    "title": "1527",
    "shortTitle": "1281",
    "content": "1528",
    "contentWithoutHeader": "1529"
  },
  {
    "file": "1350",
    "title": "1530",
    "shortTitle": "1352",
    "content": "1531",
    "contentWithoutHeader": "1532"
  },
  {
    "file": "1533",
    "title": "1534",
    "shortTitle": "1535",
    "content": "1536",
    "contentWithoutHeader": "1537"
  },
  {
    "file": "1538",
    "title": "1285",
    "shortTitle": "1239",
    "content": "1539",
    "contentWithoutHeader": "1241"
  },
  {
    "file": "1540",
    "title": "1260",
    "shortTitle": "1047",
    "content": "1541",
    "contentWithoutHeader": "1048"
  },
  {
    "file": "1542",
    "title": "1427",
    "shortTitle": "1543",
    "content": "1544",
    "contentWithoutHeader": "1545"
  },
  {
    "file": "1217",
    "title": "1546",
    "shortTitle": "1219",
    "content": "1547",
    "contentWithoutHeader": "1548"
  },
  {
    "file": "1222",
    "title": "1549",
    "shortTitle": "1224",
    "content": "1550",
    "contentWithoutHeader": "1551"
  },
  {
    "file": "1227",
    "title": "1552",
    "shortTitle": "1229",
    "content": "1553",
    "contentWithoutHeader": "1554"
  },
  {
    "file": "1232",
    "title": "1555",
    "shortTitle": "1234",
    "content": "1556",
    "contentWithoutHeader": "1557"
  },
  {
    "file": "1279",
    "title": "1558",
    "shortTitle": "1281",
    "content": "1559",
    "contentWithoutHeader": "1560"
  },
  {
    "file": "1350",
    "title": "1561",
    "shortTitle": "1352",
    "content": "1562",
    "contentWithoutHeader": "1563"
  },
  {
    "file": "1355",
    "title": "1285",
    "shortTitle": "1239",
    "content": "1564",
    "contentWithoutHeader": "1241"
  },
  {
    "file": "1565",
    "title": "1210",
    "shortTitle": "1052",
    "content": "1566",
    "contentWithoutHeader": "1053"
  },
  {
    "file": "1212",
    "title": "1567",
    "shortTitle": "1214",
    "content": "1568",
    "contentWithoutHeader": "1569"
  },
  {
    "file": "1217",
    "title": "1570",
    "shortTitle": "1219",
    "content": "1571",
    "contentWithoutHeader": "1572"
  },
  {
    "file": "1222",
    "title": "1573",
    "shortTitle": "1224",
    "content": "1574",
    "contentWithoutHeader": "1575"
  },
  {
    "file": "1472",
    "title": "1285",
    "shortTitle": "1239",
    "content": "1576",
    "contentWithoutHeader": "1241"
  },
  "web",
  "https://elearning.uni-regensburg.de/mod/assign/view.php?id=1052998",
  "web.jpg",
  {
    "highlightstyle": "37",
    "credits": "38",
    "courseurl": "39",
    "slack": "40",
    "moodle": "41",
    "license": "42"
  },
  "Assignment 2 Submission ",
  "<p>Moodle assignment dropbox for Assignment 2</p>\n",
  "error: missing talk",
  [],
  [],
  [],
  [],
  "00.Lab-00 Studio.md",
  " Objectives",
  "<h1>Objectives</h1>\n<p>Download and configure Android Studio. Generate and run a sample application.</p>\n",
  "01.01.md",
  " Setup",
  "01",
  "<h1>Setup</h1>\n<p>Download and install the latest Android Studio (3.2 when this lab was updated last).</p>\n<ul>\n<li><a href=\"https://developer.android.com/studio/\">https://developer.android.com/studio/</a></li>\n</ul>\n<h2>Indentation Levels</h2>\n<p>Run Android Studio, and before creating an application, we can. make some adjustments to the indentation styles. These options are available in the Adnroid-&gt;Preferences option.</p>\n<p>We will be looking to change the following settings available in Preferences-&gt;Editor-&gt;Core Style-&gt;Kotlin:</p>\n<ul>\n<li>change the code settings to use tab size = 2, indent = 2 and continuation indent = 4 for Kotlin:</li>\n</ul>\n<p><img src=\"img/01x.png\" alt=\"\"></p>\n<p>Do the same for XML, Groovy, Java and JSON. </p>\n",
  "<p>Download and install the latest Android Studio (3.2 when this lab was updated last).</p>\n",
  "02.02.md",
  "# New Project",
  "02",
  "<h2>New Project</h2>\n<p>Create an new Android project with the following key characteristics:</p>\n<ul>\n<li>Kotlin</li>\n<li>Single &#39;Blank&#39; activity</li>\n</ul>\n<p>Follow the structure and parameters outlined here:</p>\n<p><img src=\"img/01.png\" alt=\"\">\n<img src=\"img/02.png\" alt=\"\">\n<img src=\"img/03.png\" alt=\"\">\n<img src=\"img/04.png\" alt=\"\"></p>\n<p>Your project should look like this:</p>\n<p><img src=\"img/06.png\" alt=\"\"></p>\n",
  "<p>Create an new Android project with the following key characteristics:</p>\n",
  "03.03.md",
  " Run",
  "03",
  "<h1>Run</h1>\n<p>Make sure you can build and run the project. When you first attempt to run the app, you will be asked to create a Virtual Machine. You might create a VM configured like this:</p>\n<p><img src=\"img/02x.png\" alt=\"\"></p>\n<p>Which will appear in a list of VMs like this:</p>\n<p><img src=\"img/03x.png\" alt=\"\"></p>\n<p>The version, size and resolution are a reasonable compromise. </p>\n<p>If it launches successfully, if should look like this in the VM:</p>\n<p><img src=\"img/04x.png\" alt=\"\"></p>\n<h2>.gitignore</h2>\n<p>If you are using git, you might want to make the following small adjustments to the generated .gitignore file:</p>\n<pre><code>*.iml\n.gradle\n/local.properties\n/.idea\n.DS_Store\n/build\n/captures\n.externalNativeBuild</code></pre>\n<p>(we are excluding all .idea files)</p>\n<p>If you are using git, it is a good idea to commit the project to a repository now.</p>\n",
  "<p>Make sure you can build and run the project. When you first attempt to run the app, you will be asked to create a Virtual Machine. You might create a VM configured like this:</p>\n",
  "04.04.md",
  " Key Project Files & Resources",
  "04",
  "<h1>Key Project Files &amp; Resources</h1>\n<p>Although the project structure looks daunting, there are only a small number of source files to work with regularly:</p>\n<p>Find each of these files now (there are presented here without filenames)</p>\n<pre><code>package org.wit.placemark\n\nimport android.support.v7.app.AppCompatActivity\nimport android.os.Bundle\n\nclass PlacemarkActivity : AppCompatActivity() {\n\n  override fun onCreate(savedInstanceState: Bundle?) {\n    super.onCreate(savedInstanceState)\n    setContentView(R.layout.activity_placemark)\n  }\n}</code></pre>\n<hr>\n<pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;\n&lt;manifest xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;\n          package=&quot;org.wit.placemark&quot;&gt;\n\n  &lt;application\n      android:allowBackup=&quot;true&quot;\n      android:icon=&quot;@mipmap/ic_launcher&quot;\n      android:label=&quot;@string/app_name&quot;\n      android:roundIcon=&quot;@mipmap/ic_launcher_round&quot;\n      android:supportsRtl=&quot;true&quot;\n      android:theme=&quot;@style/AppTheme&quot;&gt;\n    &lt;activity android:name=&quot;.PlacemarkActivity&quot;&gt;\n      &lt;intent-filter&gt;\n        &lt;action android:name=&quot;android.intent.action.MAIN&quot;/&gt;\n\n        &lt;category android:name=&quot;android.intent.category.LAUNCHER&quot;/&gt;\n      &lt;/intent-filter&gt;\n    &lt;/activity&gt;\n  &lt;/application&gt;\n\n&lt;/manifest&gt;</code></pre>\n<hr>\n<pre><code>apply plugin: &#39;com.android.application&#39;\n\napply plugin: &#39;kotlin-android&#39;\n\napply plugin: &#39;kotlin-android-extensions&#39;\n\nandroid {\n  compileSdkVersion 28\n  defaultConfig {\n    applicationId &quot;org.wit.placemark&quot;\n    minSdkVersion 23\n    targetSdkVersion 28\n    versionCode 1\n    versionName &quot;1.0&quot;\n    testInstrumentationRunner &quot;android.support.test.runner.AndroidJUnitRunner&quot;\n  }\n  buildTypes {\n    release {\n      minifyEnabled false\n      proguardFiles getDefaultProguardFile(&#39;proguard-android.txt&#39;), &#39;proguard-rules.pro&#39;\n    }\n  }\n}\n\ndependencies {\n  implementation fileTree(dir: &#39;libs&#39;, include: [&#39;*.jar&#39;])\n  implementation &quot;org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version&quot;\n  implementation &#39;com.android.support:appcompat-v7:28.0.0&#39;\n  implementation &#39;com.android.support.constraint:constraint-layout:1.1.3&#39;\n  testImplementation &#39;junit:junit:4.12&#39;\n  androidTestImplementation &#39;com.android.support.test:runner:1.0.2&#39;\n  androidTestImplementation &#39;com.android.support.test.espresso:espresso-core:3.0.2&#39;\n}</code></pre>\n<hr>\n<pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;\n&lt;android.support.constraint.ConstraintLayout\n    xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;\n    xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot;\n    xmlns:tools=&quot;http://schemas.android.com/tools&quot;\n    android:layout_width=&quot;match_parent&quot;\n    android:layout_height=&quot;match_parent&quot;\n    tools:context=&quot;org.wit.placemark.PlacemarkActivity&quot;&gt;\n\n  &lt;TextView\n      android:layout_width=&quot;wrap_content&quot;\n      android:layout_height=&quot;wrap_content&quot;\n      android:text=&quot;Hello World!&quot;\n      app:layout_constraintBottom_toBottomOf=&quot;parent&quot;\n      app:layout_constraintLeft_toLeftOf=&quot;parent&quot;\n      app:layout_constraintRight_toRightOf=&quot;parent&quot;\n      app:layout_constraintTop_toTopOf=&quot;parent&quot;/&gt;\n\n&lt;/android.support.constraint.ConstraintLayout&gt;</code></pre>\n<hr>\n<pre><code>&lt;resources&gt;\n  &lt;string name=&quot;app_name&quot;&gt;Placemark&lt;/string&gt;\n&lt;/resources&gt;</code></pre>\n<hr>\n<pre><code>&lt;resources&gt;\n\n  &lt;!-- Base application theme. --&gt;\n  &lt;style name=&quot;AppTheme&quot; parent=&quot;Theme.AppCompat.Light.DarkActionBar&quot;&gt;\n    &lt;!-- Customize your theme here. --&gt;\n    &lt;item name=&quot;colorPrimary&quot;&gt;@color/colorPrimary&lt;/item&gt;\n    &lt;item name=&quot;colorPrimaryDark&quot;&gt;@color/colorPrimaryDark&lt;/item&gt;\n    &lt;item name=&quot;colorAccent&quot;&gt;@color/colorAccent&lt;/item&gt;\n  &lt;/style&gt;\n\n&lt;/resources&gt;</code></pre>\n<hr>\n<p>The files are (in order of appearence)</p>\n<ul>\n<li>app/src/main/java/org/wit/placemark/PlacemarkActivity.kt</li>\n<li>app/src/main/AndroidManifest.xml</li>\n<li>app/build.gradle</li>\n<li>app/src/main/res/layout/activity_placemark.xml</li>\n<li>app/src/main/res/values/strings.xml</li>\n<li>app/src/main/res/values/styles.xml</li>\n</ul>\n<p>Locate all of these files in the Android Studio &#39;Android&#39; perspective:</p>\n<p><img src=\"img/06.png\" alt=\"\"></p>\n<p>and in the &#39;Project&#39; perspective:</p>\n<p><img src=\"img/07.png\" alt=\"\"></p>\n<p>and using Finder/Explorer:</p>\n<p><img src=\"img/08.png\" alt=\"\"></p>\n<p>As you gain experience in android - the role and purpose of each of these files will become clearer. </p>\n",
  "<p>Although the project structure looks daunting, there are only a small number of source files to work with regularly:</p>\n",
  "05.05.md",
  " Logging Event Handling in Kotlin",
  "05",
  "<h1>Logging Event Handling in Kotlin</h1>\n<p>We are going to be working exclusively in Kotlin - not Java. This affords considerable improvements, largely around conciseness and expressiveness of code.</p>\n<h2>Logging</h2>\n<p>To prepare for this, include this additional dependency in our gradle.build:</p>\n<h2>gradle.build</h2>\n<pre><code>  implementation &#39;org.jetbrains.anko:anko-commons:0.10.7&#39;</code></pre>\n<p>Your dependencies section will look like this now:</p>\n<pre><code>dependencies {\n  implementation fileTree(dir: &#39;libs&#39;, include: [&#39;*.jar&#39;])\n  implementation &quot;org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version&quot;\n  implementation &#39;com.android.support:appcompat-v7:28.0.0&#39;\n  implementation &#39;com.android.support.constraint:constraint-layout:1.1.3&#39;\n  implementation &#39;org.jetbrains.anko:anko-commons:0.10.7&#39;\n  testImplementation &#39;junit:junit:4.12&#39;\n  androidTestImplementation &#39;com.android.support.test:runner:1.0.2&#39;\n  androidTestImplementation &#39;com.android.support.test.espresso:espresso-core:3.0.2&#39;\n}</code></pre>\n<p>This library is documented here:</p>\n<ul>\n<li><a href=\"https://github.com/Kotlin/anko\">https://github.com/Kotlin/anko</a></li>\n</ul>\n<p>We will be progressively introducing some of its features as we evolve the application.</p>\n<p>The first feature is a simple way of logging:</p>\n<p>Change the class to include the &#39;AnkoLogger&#39; feature:</p>\n<h2>PlacemarkActivity</h2>\n<pre><code>..\nclass PlacemarkActivity : AppCompatActivity(), AnkoLogger {\n...</code></pre>\n<p>When you make this change, AnkoLogger will not be recognised - so you will need to import it. This can be triggered automatically (if you can figure this out). The correct import statement is:</p>\n<pre><code>import org.jetbrains.anko.AnkoLogger</code></pre>\n<p>Then, in our onCreate() method, try it out:</p>\n<pre><code>...\n    info(&quot;Placemark Activity started..&quot;)\n...</code></pre>\n<p>Again, this will require an import - which will be this:</p>\n<pre><code>import org.jetbrains.anko.info</code></pre>\n<p>Try to figure out the key strokes required to generate this...</p>\n<p>Now, make sure you can run the app and see this log in the &#39;Logcat&#39; view in Studio:</p>\n<p><img src=\"img/13.png\" alt=\"\"></p>\n<p>Do not proceed further until you can locate something like the above in Logcat. The logss are a bit noisy, and may contain what look like errors. However, buried in there should be your message.</p>\n<p>This style of logging is discussed here:</p>\n<ul>\n<li><a href=\"https://github.com/Kotlin/anko/wiki/Anko-Commons-%E2%80%93-Logging\">https://github.com/Kotlin/anko/wiki/Anko-Commons-%E2%80%93-Logging</a></li>\n</ul>\n",
  "<p>We are going to be working exclusively in Kotlin - not Java. This affords considerable improvements, largely around conciseness and expressiveness of code.</p>\n",
  "06.Exercises.md",
  " Solution",
  "Exercises",
  "<h1>Solution</h1>\n<p>Placemark application so far:</p>\n<ul>\n<li><a href=\"archives/placemark-00.zip\">placemark-00.zip</a></li>\n</ul>\n<h2>Exercise 1:</h2>\n<p>Learn how to :</p>\n<ul>\n<li>terminate the currently executing version of the app on the emulator</li>\n<li>completely remove the application from the emulator, and install it again </li>\n</ul>\n<h2>Exercise 2:</h2>\n<p>If you have am android phone, plug it in and see if you can execute the application on the device. It should just be a matter of plugging it into your workstation - and it should appear as another device alongside the emulator device.</p>\n<h2>Exercise 3:</h2>\n<p>Download, extract and run the archive/sample solution above.</p>\n",
  "<p>Placemark application so far:</p>\n",
  "00.Lab-01 Activities.md",
  "<h1>Objectives</h1>\n<p>Layout the PlacemarkActivity - supporting create/edit of placemarks</p>\n",
  " Style & String Resources",
  "<h1>Style &amp; String Resources</h1>\n<p>Before proceeding to introduce new features into our app - we will augment some of the libraries:</p>\n<h2>build.gradle</h2>\n<pre><code>...\n  implementation &#39;com.android.support:design:28.0.0&#39;\n...</code></pre>\n<p>Make sure you include the above in the correct build.gradle file (there are two). Append it to the other <code>implementation</code> entries. When you make the above change you will be invited to <code>sync</code> the project again - do this now.</p>\n<p>This is an additional library to support android components and layouts not included in the base SDK:</p>\n<ul>\n<li><a href=\"https://developer.android.com/training/material/design-library.html\">https://developer.android.com/training/material/design-library.html</a></li>\n</ul>\n<p>Also, change our theme:</p>\n<h2>styles.xml</h2>\n<pre><code>  &lt;style name=&quot;AppTheme&quot; parent=&quot;Theme.AppCompat.Light.NoActionBar&quot;&gt;</code></pre>\n<p>This replaces the &#39;DarkActionBar&#39; theme in the generated style</p>\n<p>Now change the colours:</p>\n<h2>colours.xml</h2>\n<pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;\n&lt;resources&gt;\n  &lt;color name=&quot;colorPrimary&quot;&gt;#FFFFFF&lt;/color&gt;\n  &lt;color name=&quot;colorPrimaryDark&quot;&gt;#000000&lt;/color&gt;\n  &lt;color name=&quot;colorAccent&quot;&gt;#4c90af&lt;/color&gt;\n&lt;/resources&gt;</code></pre>\n<p>Or choose other colours as you please...</p>\n<p>We also need a new string for the button, which we will introduce in the next step:</p>\n<h2>strings.xml</h2>\n<pre><code>  &lt;string name=&quot;button_addPlacemark&quot;&gt;Add Placemark&lt;/string&gt;</code></pre>\n",
  "<p>Before proceeding to introduce new features into our app - we will augment some of the libraries:</p>\n",
  " Layouts",
  "<h1>Layouts</h1>\n<p>Working with <code>activity_placemark.xml</code>, progressively introduce the following versions - replacing each with the successive content below. Keep an eye on the <code>design</code> view as you progress to notice the changes</p>\n<p><img src=\"img/12.png\" alt=\"\"></p>\n<h2>activity_placemark.xml Version A</h2>\n<p>This is what you currently have (select the <code>Text</code> view to reveal this):</p>\n<pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;\n&lt;android.support.constraint.ConstraintLayout\n    xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;\n    xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot;\n    xmlns:tools=&quot;http://schemas.android.com/tools&quot;\n    android:layout_width=&quot;match_parent&quot;\n    android:layout_height=&quot;match_parent&quot;\n    tools:context=&quot;org.wit.placemark.PlacemarkActivity&quot;&gt;\n\n  &lt;TextView\n      android:layout_width=&quot;wrap_content&quot;\n      android:layout_height=&quot;wrap_content&quot;\n      android:text=&quot;Hello World!&quot;\n      app:layout_constraintBottom_toBottomOf=&quot;parent&quot;\n      app:layout_constraintLeft_toLeftOf=&quot;parent&quot;\n      app:layout_constraintRight_toRightOf=&quot;parent&quot;\n      app:layout_constraintTop_toTopOf=&quot;parent&quot;/&gt;\n\n&lt;/android.support.constraint.ConstraintLayout&gt;</code></pre>\n<h2>activity_placemark.xml Version B</h2>\n<p>Now make tee following change  ... replace the current contents to include relative layout + toolbar</p>\n<pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;\n&lt;android.support.constraint.ConstraintLayout\n    xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;\n    xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot;\n    xmlns:tools=&quot;http://schemas.android.com/tools&quot;\n    android:layout_width=&quot;match_parent&quot;\n    android:layout_height=&quot;match_parent&quot;\n    tools:context=&quot;org.wit.placemark.PlacemarkActivity&quot;&gt;\n\n  &lt;RelativeLayout\n      android:layout_width=&quot;match_parent&quot;\n      android:layout_height=&quot;wrap_content&quot;&gt;\n\n    &lt;android.support.design.widget.AppBarLayout\n        android:id=&quot;@+id/appBarLayout&quot;\n        android:layout_width=&quot;match_parent&quot;\n        android:layout_height=&quot;wrap_content&quot;\n        android:background=&quot;@color/colorAccent&quot;\n        android:fitsSystemWindows=&quot;true&quot;\n        app:elevation=&quot;0dip&quot;\n        app:theme=&quot;@style/ThemeOverlay.AppCompat.Dark.ActionBar&quot;&gt;\n\n      &lt;android.support.v7.widget.Toolbar\n          android:id=&quot;@+id/toolbarAdd&quot;\n          android:layout_width=&quot;match_parent&quot;\n          android:layout_height=&quot;wrap_content&quot;\n          app:titleTextColor=&quot;@color/colorPrimary&quot;/&gt;\n    &lt;/android.support.design.widget.AppBarLayout&gt;\n\n  &lt;/RelativeLayout&gt;\n&lt;/android.support.constraint.ConstraintLayout&gt;</code></pre>\n<p>Keep an eye on the Design view as you make this change.</p>\n<h2>activity_placemark.xml Version C</h2>\n<p>... augment with a scroll view containing a linear layout:</p>\n<pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;\n&lt;android.support.constraint.ConstraintLayout\n    xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;\n    xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot;\n    xmlns:tools=&quot;http://schemas.android.com/tools&quot;\n    android:layout_width=&quot;match_parent&quot;\n    android:layout_height=&quot;match_parent&quot;\n    tools:context=&quot;org.wit.placemark.PlacemarkActivity&quot;&gt;\n\n  &lt;RelativeLayout\n      android:layout_width=&quot;match_parent&quot;\n      android:layout_height=&quot;wrap_content&quot;&gt;\n\n    &lt;android.support.design.widget.AppBarLayout\n        android:id=&quot;@+id/appBarLayout&quot;\n        android:layout_width=&quot;match_parent&quot;\n        android:layout_height=&quot;wrap_content&quot;\n        android:background=&quot;@color/colorAccent&quot;\n        android:fitsSystemWindows=&quot;true&quot;\n        app:elevation=&quot;0dip&quot;\n        app:theme=&quot;@style/ThemeOverlay.AppCompat.Dark.ActionBar&quot;&gt;\n\n      &lt;android.support.v7.widget.Toolbar\n          android:id=&quot;@+id/toolbarAdd&quot;\n          android:layout_width=&quot;match_parent&quot;\n          android:layout_height=&quot;wrap_content&quot;\n          app:titleTextColor=&quot;@color/colorPrimary&quot;/&gt;\n    &lt;/android.support.design.widget.AppBarLayout&gt;\n\n    &lt;ScrollView\n        android:layout_width=&quot;match_parent&quot;\n        android:layout_height=&quot;match_parent&quot;\n        android:layout_below=&quot;@id/appBarLayout&quot;\n        android:fillViewport=&quot;true&quot;&gt;\n\n      &lt;LinearLayout\n          android:layout_width=&quot;match_parent&quot;\n          android:layout_height=&quot;wrap_content&quot;\n          android:orientation=&quot;vertical&quot;&gt;\n\n      &lt;/LinearLayout&gt;\n    &lt;/ScrollView&gt;\n\n  &lt;/RelativeLayout&gt;\n&lt;/android.support.constraint.ConstraintLayout&gt;</code></pre>\n<h2>activity_placemark.xml Version D</h2>\n<p>... scroll view linear layout contains a text edit field:</p>\n<pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;\n&lt;android.support.constraint.ConstraintLayout\n    xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;\n    xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot;\n    xmlns:tools=&quot;http://schemas.android.com/tools&quot;\n    android:layout_width=&quot;match_parent&quot;\n    android:layout_height=&quot;match_parent&quot;\n    tools:context=&quot;org.wit.placemark.PlacemarkActivity&quot;&gt;\n\n  &lt;RelativeLayout\n      android:layout_width=&quot;match_parent&quot;\n      android:layout_height=&quot;wrap_content&quot;&gt;\n\n    &lt;android.support.design.widget.AppBarLayout\n        android:id=&quot;@+id/appBarLayout&quot;\n        android:layout_width=&quot;match_parent&quot;\n        android:layout_height=&quot;wrap_content&quot;\n        android:background=&quot;@color/colorAccent&quot;\n        android:fitsSystemWindows=&quot;true&quot;\n        app:elevation=&quot;0dip&quot;\n        app:theme=&quot;@style/ThemeOverlay.AppCompat.Dark.ActionBar&quot;&gt;\n\n      &lt;android.support.v7.widget.Toolbar\n          android:id=&quot;@+id/toolbarAdd&quot;\n          android:layout_width=&quot;match_parent&quot;\n          android:layout_height=&quot;wrap_content&quot;\n          app:titleTextColor=&quot;@color/colorPrimary&quot;/&gt;\n    &lt;/android.support.design.widget.AppBarLayout&gt;\n\n    &lt;ScrollView\n        android:layout_width=&quot;match_parent&quot;\n        android:layout_height=&quot;match_parent&quot;\n        android:layout_below=&quot;@id/appBarLayout&quot;\n        android:fillViewport=&quot;true&quot;&gt;\n\n      &lt;LinearLayout\n          android:layout_width=&quot;match_parent&quot;\n          android:layout_height=&quot;wrap_content&quot;\n          android:orientation=&quot;vertical&quot;&gt;\n\n        &lt;android.support.design.widget.TextInputEditText\n            android:id=&quot;@+id/placemarkTitle&quot;\n            android:layout_width=&quot;match_parent&quot;\n            android:layout_height=&quot;wrap_content&quot;\n            android:layout_margin=&quot;8dp&quot;\n            android:hint=&quot;@string/hint_placemarkTitle&quot;\n            android:inputType=&quot;text&quot;\n            android:maxLength=&quot;25&quot;\n            android:maxLines=&quot;1&quot;\n            android:padding=&quot;8dp&quot;\n            android:textColor=&quot;@color/colorPrimaryDark&quot;\n            android:textSize=&quot;14sp&quot;/&gt;\n\n      &lt;/LinearLayout&gt;\n    &lt;/ScrollView&gt;\n\n  &lt;/RelativeLayout&gt;\n&lt;/android.support.constraint.ConstraintLayout&gt;</code></pre>\n<p>The above needs a new string resource:</p>\n<h2>strings.xml</h2>\n<pre><code>&lt;resources&gt;\n  &lt;string name=&quot;app_name&quot;&gt;Placemark&lt;/string&gt;\n  &lt;string name=&quot;hint_placemarkTitle&quot;&gt;Placemark Title&lt;/string&gt;\n&lt;/resources&gt;</code></pre>\n<h2>activity_placemark.xml Version E</h2>\n<p>... a new button in the layout</p>\n<pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;\n&lt;android.support.constraint.ConstraintLayout\nxmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;\nxmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot;\nxmlns:tools=&quot;http://schemas.android.com/tools&quot;\nandroid:layout_width=&quot;match_parent&quot;\nandroid:layout_height=&quot;match_parent&quot;\ntools:context=&quot;org.wit.placemark.PlacemarkActivity&quot;&gt;\n\n&lt;RelativeLayout\n    android:layout_width=&quot;match_parent&quot;\n    android:layout_height=&quot;wrap_content&quot;&gt;\n\n  &lt;android.support.design.widget.AppBarLayout\n      android:id=&quot;@+id/appBarLayout&quot;\n      android:layout_width=&quot;match_parent&quot;\n      android:layout_height=&quot;wrap_content&quot;\n      android:background=&quot;@color/colorAccent&quot;\n      android:fitsSystemWindows=&quot;true&quot;\n      app:elevation=&quot;0dip&quot;\n      app:theme=&quot;@style/ThemeOverlay.AppCompat.Dark.ActionBar&quot;&gt;\n\n    &lt;android.support.v7.widget.Toolbar\n        android:id=&quot;@+id/toolbarAdd&quot;\n        android:layout_width=&quot;match_parent&quot;\n        android:layout_height=&quot;wrap_content&quot;\n        app:titleTextColor=&quot;@color/colorPrimary&quot;/&gt;\n  &lt;/android.support.design.widget.AppBarLayout&gt;\n\n  &lt;ScrollView\n      android:layout_width=&quot;match_parent&quot;\n      android:layout_height=&quot;match_parent&quot;\n      android:layout_below=&quot;@id/appBarLayout&quot;\n      android:fillViewport=&quot;true&quot;&gt;\n\n    &lt;LinearLayout\n        android:layout_width=&quot;match_parent&quot;\n        android:layout_height=&quot;wrap_content&quot;\n        android:orientation=&quot;vertical&quot;&gt;\n\n      &lt;android.support.design.widget.TextInputEditText\n          android:id=&quot;@+id/placemarkTitle&quot;\n          android:layout_width=&quot;match_parent&quot;\n          android:layout_height=&quot;wrap_content&quot;\n          android:layout_margin=&quot;8dp&quot;\n          android:hint=&quot;@string/hint_placemarkTitle&quot;\n          android:inputType=&quot;text&quot;\n          android:maxLength=&quot;25&quot;\n          android:maxLines=&quot;1&quot;\n          android:padding=&quot;8dp&quot;\n          android:textColor=&quot;@color/colorPrimaryDark&quot;\n          android:textSize=&quot;14sp&quot;/&gt;\n\n      &lt;Button\n          android:id=&quot;@+id/btnAdd&quot;\n          android:layout_width=&quot;match_parent&quot;\n          android:layout_height=&quot;wrap_content&quot;\n          android:layout_margin=&quot;16dp&quot;\n          android:background=&quot;@color/colorAccent&quot;\n          android:paddingBottom=&quot;8dp&quot;\n          android:paddingTop=&quot;8dp&quot;\n          android:stateListAnimator=&quot;@null&quot;\n          android:text=&quot;@string/button_addPlacemark&quot;\n          android:textColor=&quot;@color/colorPrimary&quot;\n          android:textSize=&quot;16sp&quot;/&gt;\n    &lt;/LinearLayout&gt;\n  &lt;/ScrollView&gt;\n\n&lt;/RelativeLayout&gt;\n&lt;/android.support.constraint.ConstraintLayout&gt;</code></pre>\n<p>Building layouts textually like this is a useful skill to acquire over time. Initially, you will probably be most comfortable with drawing the layouts using the design view.</p>\n<p>Make sure the application launches now - and the design view is presented in the running app</p>\n<p><img src=\"img/09.png\" alt=\"\"></p>\n<p>This short article on layouts is as useful primer:</p>\n<ul>\n<li>&lt;<a href=\"https://medium.com/google-developers/layouts-attributes-and-you-9e5a4b4fe32c\">https://medium.com/google-developers/layouts-attributes-and-you-9e5a4b4fe32c</a>.</li>\n</ul>\n",
  "<p>Working with <code>activity_placemark.xml</code>, progressively introduce the following versions - replacing each with the successive content below. Keep an eye on the <code>design</code> view as you progress to notice the changes</p>\n",
  " Logging ",
  "<h1>Logging</h1>\n<p>We are going to be working exclusively in Kotlin - not Java. This affords considerable improvements, largely around conciseness and expressiveness of code.</p>\n<h2>Logging</h2>\n<p>To prepare for this, include these additional dependencies in our gradle.build:</p>\n<h2>gradle.build</h2>\n<pre><code>...\n  implementation &#39;org.jetbrains.anko:anko:0.10.7&#39;\n...</code></pre>\n<p>This library is documented here:</p>\n<ul>\n<li><a href=\"https://github.com/Kotlin/anko\">https://github.com/Kotlin/anko</a></li>\n</ul>\n<p>We will be progressively introducing some of its features as we evolve the application.</p>\n<p>The first feature is a simple way of logging:</p>\n<p>Change the class to include the &#39;AnkoLogger&#39; feature:</p>\n<h2>PlacemarkActivity</h2>\n<pre><code>..\nclass PlacemarkActivity : AppCompatActivity(), AnkoLogger {\n...</code></pre>\n<p>When you make this change, AnkoLogger will not be recognised - so you will need to import it. This can be triggered automatically (if you can figure this out). The correct import statement is:</p>\n<pre><code>import org.jetbrains.anko.AnkoLogger</code></pre>\n<p>Then, in our onCreate() method, try it out:</p>\n<pre><code>...\n    info(&quot;Placemark Activity started..&quot;)\n...</code></pre>\n<p>Again, this will require an import - which will be this:</p>\n<pre><code>import org.jetbrains.anko.info</code></pre>\n<p>Try to figure out the key strokes required to generate this...</p>\n<h1>Logcat</h1>\n<p>Now, make sure you can run the app and see the log messages in the &#39;Logcat&#39; view in Studio:</p>\n<p><img src=\"img/13.png\" alt=\"\"></p>\n<p>Do not proceed further until you can locate something like the above in Logcat. The logs are a bit noisy, and may contain what look like errors. However, buried in there should be your message.</p>\n<p>This style of logging is discussed here:</p>\n<ul>\n<li><a href=\"https://github.com/Kotlin/anko/wiki/Anko-Commons-%E2%80%93-Logging\">https://github.com/Kotlin/anko/wiki/Anko-Commons-%E2%80%93-Logging</a></li>\n</ul>\n",
  " Event Handling",
  "<h1>Event Handling</h1>\n<p>Now include the following inside the onCreate function:</p>\n<pre><code>    btnAdd.setOnClickListener() {\n      info(&quot;add Button Pressed&quot;)\n    }</code></pre>\n<p>Introducing this will require additional imports - get used to selecting these as prompted by Studio. On this occasion you will be presented with a choice of imports:</p>\n<p><img src=\"img/14.png\" alt=\"\"></p>\n<p>We need to select the synthetic import.The complete class will look like this:</p>\n<pre><code>package org.wit.placemark\n\nimport android.support.v7.app.AppCompatActivity\nimport android.os.Bundle\nimport kotlinx.android.synthetic.main.activity_placemark.*\nimport org.jetbrains.anko.AnkoLogger\nimport org.jetbrains.anko.info\n\nclass PlacemarkActivity : AppCompatActivity(), AnkoLogger {\n\n  override fun onCreate(savedInstanceState: Bundle?) {\n    super.onCreate(savedInstanceState)\n    setContentView(R.layout.activity_placemark)\n    info(&quot;Placemark Activity started..&quot;)\n\n    btnAdd.setOnClickListener() {\n      info(&quot;add Button Pressed&quot;)\n    }\n  }\n}</code></pre>\n<p>Make sure you can run the app and that you can see the &#39;add button pressed&#39; log.</p>\n<p>Read this short blog post outlining how the above code differers from the traditional java implementation of same.</p>\n<ul>\n<li><a href=\"https://antonioleiva.com/lambdas-kotlin-android/\">https://antonioleiva.com/lambdas-kotlin-android/</a></li>\n</ul>\n<p>Try this alternative implementation of the event handler:</p>\n<pre><code>    btnAdd.setOnClickListener() {\n      val placemarkTitle = placemarkTitle.text.toString()\n      if (placemarkTitle.isNotEmpty()) {\n        info(&quot;add Button Pressed: $placemarkTitle&quot;)\n      }\n      else {\n        toast (&quot;Please Enter a title&quot;)\n      }\n    }</code></pre>\n<p>Try it out and notice the difference - particularly if you press add without entering a title...</p>\n<p>In the above we are using anko toasts:</p>\n<ul>\n<li><a href=\"https://github.com/Kotlin/anko/wiki/Anko-Commons-%E2%80%93-Dialogs\">https://github.com/Kotlin/anko/wiki/Anko-Commons-%E2%80%93-Dialogs</a></li>\n</ul>\n",
  "<p>Now include the following inside the onCreate function:</p>\n",
  " Refactor",
  "<h1>Refactor</h1>\n<p>Refactor the application structure such that ActivityPlacemark is in a new package called &#39;org.wit.placemarks.activities&#39;:</p>\n<p><img src=\"img/10.png\" alt=\"\"></p>\n<p>You should be able to do this from within the Studio Android perspective. You will be using the context menu to create the new package in the java folder:</p>\n<p><img src=\"img/16.png\" alt=\"\"></p>\n<p>and then dragging/dropping the class into this new package. This will automatically trigger refactor step:</p>\n<p><img src=\"img/17.png\" alt=\"\"></p>\n<p>Once this is completed, a number of files will be automatically changed:</p>\n<ul>\n<li>AndroidManifest.xml</li>\n<li>PlacemarkActivity.kt</li>\n<li>activity_placemark.xml</li>\n</ul>\n<p>See if you can locate each of the changes...</p>\n<h2>Models</h2>\n<p>Introduce a new package called &#39;models&#39; as shown here:</p>\n<p><img src=\"img/11.png\" alt=\"\"></p>\n<p>... and bring in this new class:</p>\n<h2>PlacemarkModel</h2>\n<pre><code>package org.wit.placemark.models\n\ndata class PlacemarkModel(var title: String = &quot;&quot;)</code></pre>\n<p>This is an example of a Kotlin Data class:</p>\n<ul>\n<li><a href=\"https://antonioleiva.com/data-classes-kotlin/\">https://antonioleiva.com/data-classes-kotlin/</a></li>\n</ul>\n<p>Briefly review the above - this is the official documentation:</p>\n<ul>\n<li><a href=\"https://kotlinlang.org/docs/reference/data-classes.html\">https://kotlinlang.org/docs/reference/data-classes.html</a></li>\n</ul>\n<p>Here is a new version of PlacemarkActivity that makes use of this model:</p>\n<pre><code>package wit.org.placemark.activities\n\nimport android.support.v7.app.AppCompatActivity\nimport android.os.Bundle\nimport kotlinx.android.synthetic.main.activity_placemark.*\nimport org.jetbrains.anko.AnkoLogger\nimport org.jetbrains.anko.info\nimport org.jetbrains.anko.toast\nimport org.wit.placemark.models.PlacemarkModel\nimport wit.org.placemark.R\n\nclass PlacemarkActivity : AppCompatActivity(), AnkoLogger {\n\n  var placemark = PlacemarkModel()\n\n  override fun onCreate(savedInstanceState: Bundle?) {\n    super.onCreate(savedInstanceState)\n    setContentView(R.layout.activity_placemark)\n\n    btnAdd.setOnClickListener() {\n      placemark.title = placemarkTitle.text.toString()\n      if (placemark.title.isNotEmpty()) {\n        info(&quot;add Button Pressed: $placemark&quot;)\n      }\n      else {\n        toast (&quot;Please Enter a title&quot;)\n      }\n    }\n  }\n}</code></pre>\n<p>Read it carefully - notice how we are creating a placemark as a class member:</p>\n<pre><code>  var placemark = PlacemarkModel()</code></pre>\n<p>and then using it in the event handler:</p>\n<pre><code>    btnAdd.setOnClickListener() {\n      placemark.title = placemarkTitle.text.toString()\n      if (placemark.title.isNotEmpty()) {\n        info(&quot;add Button Pressed: $placemark&quot;)\n      }\n      else {\n        toast (&quot;Please Enter a title&quot;)\n      }\n    }</code></pre>\n",
  "<p>Refactor the application structure such that ActivityPlacemark is in a new package called &#39;org.wit.placemarks.activities&#39;:</p>\n",
  "<h1>Solution</h1>\n<p>Placemark application so far:</p>\n<ul>\n<li><a href=\"archives/placemark-01.zip\">placemark-01.zip</a></li>\n</ul>\n<h2>Exercise 1:</h2>\n<p>Download, expand and open in Studio the sample solution above. Run it in the emulator.</p>\n<h2>Exercise 2:</h2>\n<p>Make sure you can auto import the correct libraries when you introduce referenced. As an exercise, delete all of the imports from PlacemarkActivity:</p>\n<pre><code>package org.wit.placemark.activities\n\n// deleted imports..\n\nclass PlacemarkActivity : AppCompatActivity(), AnkoLogger {\n\n  var placemark = PlacemarkModel()\n\n  override fun onCreate(savedInstanceState: Bundle?) {\n    super.onCreate(savedInstanceState)\n    setContentView(R.layout.activity_placemark)\n    info(&quot;Placemark Activity started..&quot;)\n\n    btnAdd.setOnClickListener() {\n      placemark.title = placemarkTitle.text.toString()\n      if (placemark.title.isNotEmpty()) {\n        info(&quot;add Button Pressed: $placemarkTitle&quot;)\n      }\n      else {\n        toast (&quot;Please Enter a title&quot;)\n      }\n    }\n  }\n}</code></pre>\n<p>NOw reintroduce them one-by-one. Keep a close eye on any choices you make as you do this.</p>\n<h2>Exercise 3:</h2>\n<p>Create an ArrayList of Placemarks in PlacemarkActivity - and add each new placemark to this list.</p>\n<p>Log all placemarks when a new one is entered.</p>\n<p>HINT: Here is a simple placemark array declaration + creation:</p>\n<pre><code>  val placemarks = ArrayList&lt;PlacemarkModel&gt;()</code></pre>\n<p>This is the documentation on lists in general:</p>\n<ul>\n<li><a href=\"https://kotlinlang.org/docs/reference/collections.html\">https://kotlinlang.org/docs/reference/collections.html</a></li>\n</ul>\n<p>Greater emphasis is placed here on mutability - which we can explore at a later stage.</p>\n<h2>Exercise 4:</h2>\n<p>Create new text field <code>description</code> + log when entered. This will require you to:</p>\n<ul>\n<li>and a new field in the layout</li>\n<li>add a new entry in the strings.xml file</li>\n<li>expend the model</li>\n<li>recover the field in the event handler and include in the model objects</li>\n<li>log the new field</li>\n</ul>\n",
  "00.Lab-02 Adapters.md",
  "Objectives",
  "<h1>Objectives</h1>\n<p>Introduce new activity to display a list of placemarks. Support adding to this list.</p>\n",
  "01.Exercise Solutions.md",
  " Exercises Solutions",
  "Exercise Solutions",
  "<h1>Exercises Solutions</h1>\n<h2>Exercise 1:</h2>\n<p>Download, expand and open in Studio the sample solution above. Run it in the emulator.</p>\n<hr>\n<h2>Exercise 2:</h2>\n<p>Make sure you can auto import the correct libraries when you introduce referenced. As an exercise, delete all of the imports from PlacemarkActivity:</p>\n<hr>\n<h2>Exercise 3</h2>\n<p>Create an ArrayList of Placemarks in PlacemarkActivity - and add each new activity to this list.</p>\n<p>Log all placemarks when a new one is entered.</p>\n<p>HINT: Here is a simple placemark array declaration + creation:</p>\n<pre><code>  val placemarks = ArrayList&lt;PlacemarkModel&gt;()</code></pre>\n<h2>Solution</h2>\n<p>Even if you solved the problem - try this version:</p>\n<pre><code>class PlacemarkActivity : AppCompatActivity(), AnkoLogger {\n\n  var placemark = PlacemarkModel()\n  val placemarks = ArrayList&lt;PlacemarkModel&gt;()\n\n  override fun onCreate(savedInstanceState: Bundle?) {\n    super.onCreate(savedInstanceState)\n    setContentView(R.layout.activity_placemark)\n\n    btnAdd.setOnClickListener() {\n      placemark.title = placemarkTitle.text.toString()\n      if (placemark.title.isNotEmpty()) {\n        placemarks.add(placemark)\n        info(&quot;add Button Pressed: $placemarkTitle&quot;)\n        placemarks.forEach { info(&quot;add Button Pressed: ${it.title}&quot;)}\n      }\n      else {\n        toast (&quot;Please Enter a title&quot;)\n      }\n    }\n  }\n}</code></pre>\n<p>Look carefully at this statement:</p>\n<pre><code>        placemarks.forEach { info(&quot;add Button Pressed: ${it.title}&quot;)}</code></pre>\n<p>What is going on here? This is another example of a Kotlin lambda - this time as a parameter to a forEach function associated with a collection. Review these posts here to get a general feel for how to manipulate collections effectively:</p>\n<ul>\n<li><a href=\"https://antonioleiva.com/functional-programming-android-kotlin-lambdas/\">https://antonioleiva.com/functional-programming-android-kotlin-lambdas/</a></li>\n<li><a href=\"https://antonioleiva.com/collection-operations-kotlin/\">https://antonioleiva.com/collection-operations-kotlin/</a></li>\n</ul>\n<p>(You may need to bookmark them and come back to them later)</p>\n<p>Run the app with this solution - do you notice anything strange? You should see the every time we add a new placemark, we seem to log out the same value for all entries added. This is because we are only ever creating a single placemark :</p>\n<pre><code>  var placemark = PlacemarkModel()</code></pre>\n<p>Try this version of the add method instead:</p>\n<pre><code>        placemarks.add(placemark.copy())</code></pre>\n<p>Run again now and check the logs - each entry should be added now as expected.</p>\n<hr>\n<h2>Exercise 4:</h2>\n<p>Create new text field <code>description</code> + log when entered. This will require you to:</p>\n<ul>\n<li>and a new field in the layout</li>\n<li>add a new entry in the strings.xml file</li>\n<li>expend the model</li>\n<li>recover the field in the event handler and include in the model objects</li>\n<li>log the new field</li>\n</ul>\n<h2>Solution</h2>\n<h2>strings.xml</h2>\n<pre><code>...\n  &lt;string name=&quot;hint_placemarkDescription&quot;&gt;Description &lt;/string&gt;\n...</code></pre>\n<h2>activity_placemark.xml</h2>\n<pre><code>...\n        &lt;android.support.design.widget.TextInputEditText\n            android:id=&quot;@+id/description&quot;\n            android:layout_width=&quot;match_parent&quot;\n            android:layout_height=&quot;wrap_content&quot;\n            android:layout_margin=&quot;8dp&quot;\n            android:hint=&quot;@string/hint_placemarkDescription&quot;\n            android:inputType=&quot;text&quot;\n            android:maxLength=&quot;25&quot;\n            android:maxLines=&quot;1&quot;\n            android:padding=&quot;8dp&quot;\n            android:textColor=&quot;@color/colorPrimaryDark&quot;\n            android:textSize=&quot;14sp&quot;/&gt;\n...</code></pre>\n<p>Make sure to put this into the correct context.</p>\n<h2>PlacemarkModel.kt</h2>\n<pre><code>data class PlacemarkModel(var title: String = &quot;&quot;,\n                          var description: String = &quot;&quot;)</code></pre>\n<h2>PlacemarkActivity.kt</h2>\n<pre><code>...\n      placemark.description = description.text.toString()\n...</code></pre>\n<p>Again, make sure to put this into the correct context.</p>\n",
  "<h2>Exercise 1:</h2>\n",
  " MainApp",
  "<h1>MainApp</h1>\n<p>Create a new package called <code>org.wit.placemark.main</code>, and introduce this class:</p>\n<h2>MainApp</h2>\n<pre><code>package org.wit.placemark.main\n\nimport android.app.Application\nimport org.jetbrains.anko.AnkoLogger\nimport org.jetbrains.anko.info\n\nclass MainApp : Application(), AnkoLogger {\n\n  override fun onCreate() {\n    super.onCreate()\n    info(&quot;Placemark started&quot;)\n  }\n}</code></pre>\n<p>The package structure should look like this:</p>\n<p><img src=\"img/01.png\" alt=\"\"></p>\n<p>In addition, change the AndroidManifest to specifically reference this class:</p>\n<h2>AndroidManifest.xml</h2>\n<pre><code>...\n  &lt;application\n      android:name=&quot;org.wit.placemark.main.MainApp&quot;\n...</code></pre>\n<p>A single instance of this class will be created when our application will be launched. A reference to this application can be acquired in other activities as needed.</p>\n<p>Run the app now, and verify that the log message is being generated.</p>\n<p>We can now put the placemarks in to this class:</p>\n<h2>MainApp</h2>\n<pre><code>class MainApp : Application(), AnkoLogger {\n\n  val placemarks = ArrayList&lt;PlacemarkModel&gt;()\n\n  override fun onCreate() {\n    super.onCreate()\n    info(&quot;Placemark started&quot;)\n  }\n}</code></pre>\n<p>... and we can adjust PlacemarkActivity to use this list instead of the one we had created in PlacemarkActivity:</p>\n<pre><code>class PlacemarkActivity : AppCompatActivity(), AnkoLogger {\n\n  var placemark = PlacemarkModel()\n  var app : MainApp? = null\n\n  override fun onCreate(savedInstanceState: Bundle?) {\n    super.onCreate(savedInstanceState)\n    setContentView(R.layout.activity_placemark)\n    app = application as MainApp\n\n    btnAdd.setOnClickListener() {\n      placemark.title = placemarkTitle.text.toString()\n      placemark.description = description.text.toString()\n      if (placemark.title.isNotEmpty()) {\n        app!!.placemarks.add(placemark.copy())\n        info(&quot;add Button Pressed: $placemarkTitle&quot;)\n        app!!.placemarks.forEach { info(&quot;add Button Pressed: ${it}&quot;)}\n      }\n      else {\n        toast (&quot;Please Enter a title&quot;)\n      }\n    }\n  }\n}</code></pre>\n<h2>Null Safety</h2>\n<p>Notice the the reference to the MainApp object:</p>\n<pre><code>  var app : MainApp? = null</code></pre>\n<p>How it is initialised:</p>\n<pre><code>    app = application as MainApp</code></pre>\n<p>and how it is used:</p>\n<pre><code>        app!!.placemarks.add(placemark.copy())\n        info(&quot;add Button Pressed: $placemarkTitle&quot;)\n        app!!.placemarks.forEach { info(&quot;add Button Pressed: ${it}&quot;)}</code></pre>\n<p>There is liberal use of <code>?</code> and <code>!!</code> in this code. This is an example of Null Safety in action in Kotlin. A key feature of Kotlin - (see point 2 a few pages down):</p>\n<ul>\n<li><a href=\"https://antonioleiva.com/kotlin-for-android-introduction/\">https://antonioleiva.com/kotlin-for-android-introduction/</a></li>\n</ul>\n<p>A more detailed outline here </p>\n<ul>\n<li><a href=\"https://kotlinlang.org/docs/reference/null-safety.html\">https://kotlinlang.org/docs/reference/null-safety.html</a></li>\n</ul>\n<h2>lateinit</h2>\n<p>Sometimes, we which to override null safety checks - particularly if we are certain that the reference will in fact be initialised. Replace MainApp now with this version:</p>\n<h2>PlacemarkActivity</h2>\n<pre><code>class PlacemarkActivity : AppCompatActivity(), AnkoLogger {\n\n  var placemark = PlacemarkModel()\n  lateinit var app : MainApp\n\n  override fun onCreate(savedInstanceState: Bundle?) {\n    super.onCreate(savedInstanceState)\n    setContentView(R.layout.activity_placemark)\n    app = application as MainApp\n\n    btnAdd.setOnClickListener() {\n      placemark.title = placemarkTitle.text.toString()\n      placemark.description = description.text.toString()\n      if (placemark.title.isNotEmpty()) {\n        app.placemarks.add(placemark.copy())\n        info(&quot;add Button Pressed: $placemarkTitle&quot;)\n        app.placemarks.forEach { info(&quot;add Button Pressed: ${it}&quot;)}\n      }\n      else {\n        toast (&quot;Please Enter a title&quot;)\n      }\n    }\n  }\n}</code></pre>\n<p>The changes an be seen in these lines:</p>\n<pre><code>  lateinit var app : MainApp\n  ...\n      app = application as MainApp\n      ... \n        app.placemarks.add(placemark.copy())\n        ...\n        app.placemarks.forEach { info(&quot;add Button Pressed: ${it}&quot;)}\n        ...</code></pre>\n<p>This is using the <code>lateint</code> qualifier. See this short discussion here:</p>\n<ul>\n<li><a href=\"https://www.bignerdranch.com/blog/kotlin-when-to-use-lazy-or-lateinit/\">https://www.bignerdranch.com/blog/kotlin-when-to-use-lazy-or-lateinit/</a></li>\n</ul>\n",
  "<p>Create a new package called <code>org.wit.placemark.main</code>, and introduce this class:</p>\n",
  " PlacemarkList",
  "<h1>PlacemarkList</h1>\n<p>We need a new Activity to present a list of placemarks - <code>PlacemarkListActivity</code>. Introducing a new view usually requires at lest the following:</p>\n<ul>\n<li>a layout</li>\n<li>a class</li>\n<li>a reference to the class in AndroidManifest.xml</li>\n</ul>\n<p>Here are the these three artifacts:</p>\n<h2>activity_placemark_list.xml</h2>\n<pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;\n&lt;android.support.design.widget.CoordinatorLayout\n    xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;\n    xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot;\n    xmlns:tools=&quot;http://schemas.android.com/tools&quot;\n    android:layout_width=&quot;match_parent&quot;\n    android:layout_height=&quot;match_parent&quot;\n    tools:context=&quot;org.wit.placemark.activities.PlacemarkListActivity&quot;&gt;\n\n  &lt;android.support.design.widget.AppBarLayout\n      android:layout_width=&quot;match_parent&quot;\n      android:layout_height=&quot;wrap_content&quot;\n      android:background=&quot;@color/colorAccent&quot;\n      android:fitsSystemWindows=&quot;true&quot;\n      app:elevation=&quot;0dip&quot;\n      app:theme=&quot;@style/ThemeOverlay.AppCompat.Dark.ActionBar&quot;&gt;\n\n    &lt;android.support.v7.widget.Toolbar\n        android:id=&quot;@+id/toolbarMain&quot;\n        android:layout_width=&quot;match_parent&quot;\n        android:layout_height=&quot;wrap_content&quot;\n        app:titleTextColor=&quot;@color/colorPrimary&quot;/&gt;\n  &lt;/android.support.design.widget.AppBarLayout&gt;\n\n&lt;/android.support.design.widget.CoordinatorLayout&gt;</code></pre>\n<h2>PlacemarkListActivity</h2>\n<pre><code>package org.wit.placemark.activities\n\nimport android.support.v7.app.AppCompatActivity\nimport android.os.Bundle\nimport org.wit.placemark.R\nimport org.wit.placemark.main.MainApp\n\nclass PlacemarkListActivity : AppCompatActivity() {\n\n  lateinit var app: MainApp\n\n  override fun onCreate(savedInstanceState: Bundle?) {\n    super.onCreate(savedInstanceState)\n    setContentView(R.layout.activity_placemark_list)\n    app = application as MainApp\n  }\n}</code></pre>\n<p>Notice in the above, we are retrieving and storing a reference to the MainApp object (for future use).</p>\n<h2>AndroidManifest.xml</h2>\n<p>This is the current version:</p>\n<pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;\n&lt;manifest xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;\n          package=&quot;org.wit.placemark&quot;&gt;\n\n  &lt;application\n      android:name=&quot;org.wit.placemark.main.MainApp&quot;\n      android:allowBackup=&quot;true&quot;\n      android:icon=&quot;@mipmap/ic_launcher&quot;\n      android:label=&quot;@string/app_name&quot;\n      android:roundIcon=&quot;@mipmap/ic_launcher_round&quot;\n      android:supportsRtl=&quot;true&quot;\n      android:theme=&quot;@style/AppTheme&quot;&gt;\n    &lt;activity android:name=&quot;.activities.PlacemarkActivity&quot;&gt;\n      &lt;intent-filter&gt;\n        &lt;action android:name=&quot;android.intent.action.MAIN&quot;/&gt;\n\n        &lt;category android:name=&quot;android.intent.category.LAUNCHER&quot;/&gt;\n      &lt;/intent-filter&gt;\n    &lt;/activity&gt;\n  &lt;/application&gt;\n\n&lt;/manifest&gt;</code></pre>\n<p>This is a revised version - </p>\n<pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;\n&lt;manifest xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;\n          package=&quot;org.wit.placemark&quot;&gt;\n\n  &lt;application\n      android:name=&quot;.main.MainApp&quot;\n      android:allowBackup=&quot;true&quot;\n      android:icon=&quot;@mipmap/ic_launcher&quot;\n      android:label=&quot;@string/app_name&quot;\n      android:roundIcon=&quot;@mipmap/ic_launcher_round&quot;\n      android:supportsRtl=&quot;true&quot;\n      android:theme=&quot;@style/AppTheme&quot;&gt;\n    &lt;activity android:name=&quot;.activities.PlacemarkActivity&quot;&gt;\n    &lt;/activity&gt;\n    &lt;activity android:name=&quot;.activities.PlacemarkListActivity&quot;&gt;\n      &lt;intent-filter&gt;\n        &lt;action android:name=&quot;android.intent.action.MAIN&quot;/&gt;\n        &lt;category android:name=&quot;android.intent.category.LAUNCHER&quot;/&gt;\n      &lt;/intent-filter&gt;\n    &lt;/activity&gt;\n  &lt;/application&gt;\n\n&lt;/manifest&gt;</code></pre>\n<p>Look carefully at the differences - we have included a new entry:</p>\n<pre><code>    &lt;activity android:name=&quot;.activities.PlacemarkListActivity&quot;&gt;\n       ...\n    &lt;/activity&gt;</code></pre>\n<p>and also, this entry is marked as the main activity:</p>\n<pre><code>    ...\n      &lt;intent-filter&gt;\n        &lt;action android:name=&quot;android.intent.action.MAIN&quot;/&gt;\n        &lt;category android:name=&quot;android.intent.category.LAUNCHER&quot;/&gt;\n      &lt;/intent-filter&gt;\n    ...</code></pre>\n<p>Run the app now - you should see the (blank) PlacemarkListActivity</p>\n",
  "<p>We need a new Activity to present a list of placemarks - <code>PlacemarkListActivity</code>. Introducing a new view usually requires at lest the following:</p>\n",
  " Card + RecyclerView",
  "<h1>Card + RecyclerView</h1>\n<p>To display a list of Placemarks, we will make use of these components:</p>\n<ul>\n<li>CardView</li>\n<li>RecyclerView</li>\n<li>RecyclerViewAdapter</li>\n</ul>\n<p>Orchestrating these three is now a familiar patterns in Android development. It is covered briefly in this article here:</p>\n<ul>\n<li><a href=\"https://developer.android.com/training/material/lists-cards.html\">https://developer.android.com/training/material/lists-cards.html</a></li>\n</ul>\n<p>This is worth a quick read before proceeding.</p>\n<h2>CardView</h2>\n<p>CardView itself is supported by a library - which must be included now:</p>\n<h2>build.gradle</h2>\n<pre><code>...\n  implementation &#39;com.android.support:cardview-v7:28.0.0&#39;\n...</code></pre>\n<p>Here is the cardview itself:</p>\n<h2>card_placemark.xml</h2>\n<pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;\n&lt;android.support.v7.widget.CardView\n    xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;\n    android:layout_width=&quot;match_parent&quot;\n    android:layout_height=&quot;wrap_content&quot;\n    android:layout_marginBottom=&quot;8dp&quot;\n    android:elevation=&quot;24dp&quot;&gt;\n\n  &lt;RelativeLayout\n      android:layout_width=&quot;match_parent&quot;\n      android:layout_height=&quot;wrap_content&quot;\n      android:padding=&quot;16dp&quot;&gt;\n\n    &lt;TextView\n        android:id=&quot;@+id/placemarkTitle&quot;\n        android:layout_width=&quot;wrap_content&quot;\n        android:layout_height=&quot;wrap_content&quot;\n        android:layout_alignParentTop=&quot;true&quot;\n        android:textSize=&quot;30sp&quot;/&gt;\n\n    &lt;TextView\n        android:id=&quot;@+id/description&quot;\n        android:layout_width=&quot;wrap_content&quot;\n        android:layout_height=&quot;wrap_content&quot;\n        android:layout_below=&quot;@id/placemarkTitle&quot;/&gt;\n\n  &lt;/RelativeLayout&gt;\n&lt;/android.support.v7.widget.CardView&gt;</code></pre>\n<p>When you rebuild the project, you should be able to view the card in design view.</p>\n<p>We can insert the cards into the activity_placemark_list layout - by introducing a RecyclerView widget like this:</p>\n<h2>activity_placemark_list.xml</h2>\n<pre><code>...\n  &lt;android.support.v7.widget.RecyclerView\n      android:id=&quot;@+id/recyclerView&quot;\n      android:layout_width=&quot;match_parent&quot;\n      android:layout_height=&quot;match_parent&quot;\n      android:scrollbars=&quot;vertical&quot;\n      app:layout_behavior=&quot;@string/appbar_scrolling_view_behavior&quot;/&gt;\n...</code></pre>\n<p>This is to be inserted just before the closing tag.</p>\n<h2>RecyclerView + Adapter</h2>\n<p>With these resources in place - the PlacemarkListActivity can be reworked to include the RecyclerView + adapter:</p>\n<h2>PlacemarkListActivity</h2>\n<pre><code>package org.wit.placemark.activities\n\nimport android.support.v7.app.AppCompatActivity\nimport android.os.Bundle\nimport android.support.v7.widget.LinearLayoutManager\nimport android.support.v7.widget.RecyclerView\nimport android.view.LayoutInflater\nimport android.view.View\nimport android.view.ViewGroup\nimport kotlinx.android.synthetic.main.activity_placemark_list.*\nimport kotlinx.android.synthetic.main.card_placemark.view.*\nimport org.wit.placemark.R\nimport org.wit.placemark.main.MainApp\nimport org.wit.placemark.models.PlacemarkModel\n\nclass PlacemarkListActivity : AppCompatActivity() {\n\n  lateinit var app: MainApp\n\n  override fun onCreate(savedInstanceState: Bundle?) {\n    super.onCreate(savedInstanceState)\n    setContentView(R.layout.activity_placemark_list)\n    app = application as MainApp\n\n    val layoutManager = LinearLayoutManager(this)\n    recyclerView.layoutManager = layoutManager\n    recyclerView.adapter = PlacemarkAdapter(app.placemarks)\n  }\n}\n\nclass PlacemarkAdapter constructor(private var placemarks: List&lt;PlacemarkModel&gt;) : RecyclerView.Adapter&lt;PlacemarkAdapter.MainHolder&gt;() {\n\n  override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): MainHolder {\n    return MainHolder(LayoutInflater.from(parent?.context).inflate(R.layout.card_placemark, parent, false))\n  }\n\n  override fun onBindViewHolder(holder: MainHolder, position: Int) {\n    val placemark = placemarks[holder.adapterPosition]\n    holder.bind(placemark)\n  }\n\n  override fun getItemCount(): Int = placemarks.size\n\n  class MainHolder constructor(itemView: View) : RecyclerView.ViewHolder(itemView) {\n\n    fun bind(placemark: PlacemarkModel) {\n      itemView.placemarkTitle.text = placemark.title\n      itemView.description.text = placemark.description\n    }\n  }\n}</code></pre>\n<p>The app should run now - but will still be blank. In MainApp, we can add some test placemarks to test out the Recycler machinery:</p>\n<h2>MainApp</h2>\n<pre><code>...\n  override fun onCreate() {\n    super.onCreate()\n    info(&quot;Placemark started&quot;)\n    placemarks.add(PlacemarkModel(&quot;One&quot;, &quot;About one...&quot;))\n    placemarks.add(PlacemarkModel(&quot;Two&quot;, &quot;About two...&quot;))\n    placemarks.add(PlacemarkModel(&quot;Three&quot;, &quot;About three...&quot;))\n  }\n...</code></pre>\n<p><img src=\"img/02.png\" alt=\"\"></p>\n",
  "<p>To display a list of Placemarks, we will make use of these components:</p>\n",
  " Menu & Actionbar",
  "<h1>Menu &amp; Actionbar</h1>\n<p>In order to trigger the creation of Placemarks, we need some menu/action mechanic on our home screen. This will be provided by supporing a button/menu an action bar along the top of the PlacemarkListActivity.</p>\n<p>First a new string resource:</p>\n<h2>stings.xml</h2>\n<pre><code>  &lt;string name=&quot;menu_addPlacemark&quot;&gt;Add&lt;/string&gt;</code></pre>\n<p>Then a new menu resource:</p>\n<h2>menu_main.xml</h2>\n<pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;\n&lt;menu xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;\n      xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot;&gt;\n\n  &lt;item\n      android:id=&quot;@+id/item_add&quot;\n      android:icon=&quot;@android:drawable/ic_menu_add&quot;\n      android:title=&quot;@string/menu_addPlacemark&quot;\n      app:showAsAction=&quot;always&quot;/&gt;\n&lt;/menu&gt;</code></pre>\n<p>The above resource must be in its own folder:</p>\n<p><img src=\"img/03.png\" alt=\"\"></p>\n<p>In the PlacemarkListActivity onCreate method, we must enable the action bar (and give it a title):</p>\n<h2>PlacemarkListActivity</h2>\n<pre><code>...\n    toolbarMain.title = title\n    setSupportActionBar(toolbarMain)\n...</code></pre>\n<p>... and then override the method to load the menu resource:</p>\n<pre><code>...\n  override fun onCreateOptionsMenu(menu: Menu?): Boolean {\n    menuInflater.inflate(R.menu.menu_main, menu)\n    return super.onCreateOptionsMenu(menu)\n  }\n...</code></pre>\n<p>This gives us a single button on the action bar:</p>\n<p><img src=\"img/04.png\" alt=\"\"></p>\n<p>This is the stock icon we are using is </p>\n<pre><code>      android:icon=&quot;@android:drawable/ic_menu_add&quot;</code></pre>\n<p>This is drawn from this set:</p>\n<ul>\n<li><a href=\"http://androiddrawables.com/Menu.html\">http://androiddrawables.com/Menu.html</a></li>\n</ul>\n<p>These can change with each release of Android - a comprehensive set of all drawable resources is available here:</p>\n<ul>\n<li><a href=\"http://androiddrawables.com/\">http://androiddrawables.com/</a></li>\n</ul>\n",
  "<p>In order to trigger the creation of Placemarks, we need some menu/action mechanic on our home screen. This will be provided by supporing a button/menu an action bar along the top of the PlacemarkListActivity.</p>\n",
  "06.06.md",
  " Action Implementation",
  "06",
  "<h1>Action Implementation</h1>\n<p>Review this general introduction to App Bar/toolbars here:</p>\n<ul>\n<li><a href=\"https://developer.android.com/training/appbar/setting-up.html\">https://developer.android.com/training/appbar/setting-up.html</a></li>\n</ul>\n<p>We need to respond to the button press - triggering the launch of the PlacemarkActivity:</p>\n<h2>PlacemarkListActivity</h2>\n<pre><code>  override fun onOptionsItemSelected(item: MenuItem?): Boolean {\n    when (item?.itemId) {\n      R.id.item_add -&gt; startActivityForResult&lt;PlacemarkActivity&gt;(0)\n    }\n    return super.onOptionsItemSelected(item)\n  }</code></pre>\n<p>This implements the menu event handler - and if the event it <code>item_add</code>, we start the PlacemarkActivity.</p>\n<p>We are using the anko intent library:</p>\n<ul>\n<li><a href=\"https://github.com/Kotlin/anko/wiki/Anko-Commons-%E2%80%93-Intents\">https://github.com/Kotlin/anko/wiki/Anko-Commons-%E2%80%93-Intents</a></li>\n</ul>\n<p>In this case we are starting an &#39;intent&#39; inside our own application. The intent systems in Android is more general than this - and we can trigger intents serviced by other applications.</p>\n<ul>\n<li><a href=\"https://developer.android.com/training/basics/intents/index.html\">https://developer.android.com/training/basics/intents/index.html</a></li>\n</ul>\n<p>Indeed, we expose an intent to permit one of our activities to be launched.</p>\n<p>Run the app now - and add an activity:</p>\n<ul>\n<li>what happens when add activity is pressed?</li>\n<li>what happens when you press the <code>back</code> button from AddActivity?</li>\n</ul>\n<p>Clearly we are not quite finished yet. In PlacemarkActivity, we need to explicitly finish() the activity - and set a result code:</p>\n<pre><code>...\n      if (placemark.title.isNotEmpty()) {\n        app.placemarks.add(placemark.copy())\n        info(&quot;add Button Pressed: $placemarkTitle&quot;)\n        app.placemarks.forEach { info(&quot;add Button Pressed: ${it}&quot;)}\n        setResult(AppCompatActivity.RESULT_OK)\n        finish()\n      }\n...</code></pre>\n<p>This should end the PlacemarkActivity - and update the List view.</p>\n<p>We can remove the test placemarks from MainApp now:</p>\n<pre><code>  override fun onCreate() {\n    super.onCreate()\n    info(&quot;Placemark started&quot;)\n    // placemarks.add(PlacemarkModel(&quot;One&quot;, &quot;About one...&quot;))\n    // placemarks.add(PlacemarkModel(&quot;Two&quot;, &quot;About two...&quot;))\n    // placemarks.add(PlacemarkModel(&quot;Three&quot;, &quot;About three...&quot;))\n  }</code></pre>\n",
  "<p>Review this general introduction to App Bar/toolbars here:</p>\n",
  "07.Exercises.md",
  "Solution",
  "<h1>Solution</h1>\n<p>Placemark application so far:</p>\n<ul>\n<li><a href=\"archives/placemark-02.zip\">placemark-02.zip</a></li>\n</ul>\n<h2>Exercise 1: Sample Solution</h2>\n<p>Make sure you can download and run the sample solution (archive above)</p>\n<h2>Exercise 2: Cancel Button</h2>\n<p>Incorporate new &#39;Cancel&#39; action into <code>PlacemarkActivity</code>. This should return to PlacemarkListActivity without adding a new Placemark.</p>\n<p><img src=\"img/18.png\" alt=\"\"></p>\n<p>Follow the steps 05 &amp; 06 in this lab as a guide to doing this. Remember, you will be introducing the menu/action into PlacemarkActivity.</p>\n<h2>Exercise 3: Refactor PlacemarkAdapter to its own source file.</h2>\n<p>The PlacemarkAdapter class is currently in the same source file as the PlacemarkListActivity class. For clarity and ease of maintenance, move this into its own source file.</p>\n",
  "00.Lab-03 Models.md",
  "# Objectives",
  "<h2>Objectives</h2>\n<p>Application object + Model classes to manage placemarks. </p>\n",
  " Exercise Solutions",
  "<h1>Exercise Solutions</h1>\n<h2>Exercise 2: Cancel Button</h2>\n<p>Incorporate new &#39;Cancel&#39; action into <code>PlacemarkActivity</code>. This should return to PlacemarkListActivity without adding a new Placemark.</p>\n<h2>strings.xml</h2>\n<pre><code>...\n  &lt;string name=&quot;menu_cancelPlacemark&quot;&gt;Cancel&lt;/string&gt;\n...</code></pre>\n<h2>menu_placemark.xml</h2>\n<p>This resources must be in the <code>menu</code> folder in <code>res</code></p>\n<pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;\n&lt;menu xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;\n      xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot;&gt;\n\n  &lt;item\n      android:id=&quot;@+id/item_cancel&quot;\n      android:title=&quot;@string/menu_cancelPlacemark&quot;\n      app:showAsAction=&quot;always&quot;/&gt;\n&lt;/menu&gt;</code></pre>\n<h2>PlacemarkActivity</h2>\n<p>In order to present the toolbar - we need to first support it:</p>\n<pre><code>...\n override fun onCreate(savedInstanceState: Bundle?) {\n    ...\n    toolbarAdd.title = title\n    setSupportActionBar(toolbarAdd)\n    ...\n    }\n  }\n...</code></pre>\n<p>Then we need to <code>inflate</code> the menu:</p>\n<pre><code>  override fun onCreateOptionsMenu(menu: Menu?): Boolean {\n    menuInflater.inflate(R.menu.menu_placemark, menu)\n    return super.onCreateOptionsMenu(menu)\n  }</code></pre>\n<p>Finally, we need to handle the event:</p>\n<pre><code>  override fun onOptionsItemSelected(item: MenuItem?): Boolean {\n    when (item?.itemId) {\n      R.id.item_cancel -&gt; {\n        finish()\n      }\n    }\n    return super.onOptionsItemSelected(item)\n  }\n...</code></pre>\n<h1>Exercise 3: Refactor PlacemarkAdapter to its own source file.</h1>\n<p>The PlacemarkAdapter class is currently in the same source file as the PlacemarkListActivity class. For clarity and ease of maintenance, move this into its own source file.</p>\n<h2>PlacemarkAdapter</h2>\n<pre><code>package org.wit.placemark.activities\n\nimport android.support.v7.widget.RecyclerView\nimport android.view.LayoutInflater\nimport android.view.View\nimport android.view.ViewGroup\nimport kotlinx.android.synthetic.main.card_placemark.view.*\nimport org.wit.placemark.R\nimport org.wit.placemark.models.PlacemarkModel\n\nclass PlacemarkAdapter constructor(private var placemarks: List&lt;PlacemarkModel&gt;) : RecyclerView.Adapter&lt;PlacemarkAdapter.MainHolder&gt;() {\n\n  override fun onCreateViewHolder(parent: ViewGroup?, viewType: Int): MainHolder {\n    return MainHolder(LayoutInflater.from(parent?.context).inflate(R.layout.card_placemark, parent, false))\n  }\n\n  override fun onBindViewHolder(holder: MainHolder, position: Int) {\n    val placemark = placemarks[holder.adapterPosition]\n    holder.bind(placemark)\n  }\n\n  override fun getItemCount(): Int = placemarks.size\n\n  class MainHolder constructor(itemView: View) : RecyclerView.ViewHolder(itemView) {\n\n    fun bind(placemark: PlacemarkModel) {\n      itemView.placemarkTitle.text = placemark.title\n      itemView.description.text = placemark.description\n    }\n  }\n}</code></pre>\n<p>Delete the PlacemarkAdapter class from PlacemarkListActivity - and rebuild and run the app now to verify that these changes have been engaged correctly.</p>\n<p>Check the imports in PlacemarkListActivity:</p>\n<p><img src=\"img/03.png\" alt=\"\"></p>\n<p>The greyed out imported are no longer needed (they were used by PlacemarkAdapter). Remove them now and rebuild.</p>\n",
  "<h2>Exercise 2: Cancel Button</h2>\n",
  "# Introduce first Model Representation",
  "<h2>Introduce first Model Representation</h2>\n<p>Introduce the following interface into the <code>models</code> package:</p>\n<h2>PlacemarkStore</h2>\n<pre><code>package org.wit.placemark.models\n\ninterface PlacemarkStore {\n  fun findAll(): List&lt;PlacemarkModel&gt;\n  fun create(placemark: PlacemarkModel)\n}</code></pre>\n<p>In the same package, implement this interface in a class called PlacemarkMemStore</p>\n<h2>PlacemarkMemStore</h2>\n<pre><code>package org.wit.placemark.models\n\nclass PlacemarkMemStore : PlacemarkStore {\n\n  val placemarks = ArrayList&lt;PlacemarkModel&gt;()\n\n  override fun findAll(): List&lt;PlacemarkModel&gt; {\n    return placemarks\n  }\n\n  override fun create(placemark: PlacemarkModel) {\n    placemarks.add(placemark)\n  }\n}</code></pre>\n<p>This is a simple encapsulation of our list of placemarks.</p>\n<p>Rework all MainApp to use the above class:</p>\n<h2>MainApp</h2>\n<pre><code>  // val placemarks = ArrayList&lt;PlacemarkModel&gt;()\n  val placemarks = PlacemarkMemStore()</code></pre>\n<h2>PlacemarkListActivity</h2>\n<pre><code>  // recyclerView.adapter = PlacemarkAdapter(app.placemarks)\n  recyclerView.adapter = PlacemarkAdapter(app.placemarks.findAll())</code></pre>\n<h2>PlacemarkActivity</h2>\n<pre><code>  // app.placemarks.add(placemark.copy())\n  app.placemarks.create(placemark.copy())\n\n  ...\n  // app.placemarks.forEach { info(&quot;add Button Pressed: ${it}&quot;) }\n  app.placemarks.findAll().forEach{ info(&quot;add Button Pressed: ${it}&quot;) }\n  ...</code></pre>\n<h2>Logging</h2>\n<p>Introduce a new method in PlacemarkMemStore which will log all placemarks. Call it whenever a new placemark is added.</p>\n<h2>PlacemarkMemStore</h2>\n<pre><code>...\n  override fun create(placemark: PlacemarkModel) {\n    placemarks.add(placemark)\n    logAll()\n  }\n\n  fun logAll() {\n   placemarks.forEach{ info(&quot;${it}&quot;) }\n  }\n...</code></pre>\n<p>For the above to compile, you will. need to adjust the class declaration:</p>\n<pre><code>class PlacemarkMemStore : PlacemarkStore, AnkoLogger {</code></pre>\n<p>We can now remove the current logging from PlacemarkActivity:</p>\n<h2>PlacemarkActivity</h2>\n<pre><code>        info(&quot;add Button Pressed: $placemarkTitle&quot;)\n        // app.placemarks.findAll().forEach{ info(&quot;add Button Pressed: ${it}&quot;) }</code></pre>\n",
  "<p>Introduce the following interface into the <code>models</code> package:</p>\n",
  "# PlacemarkListner",
  "<h2>PlacemarkListner</h2>\n<p>In PlacemarkAdapter, introduce this new interface:</p>\n<h2>PlacemarkAdapter</h2>\n<pre><code>interface PlacemarkListener {\n  fun onPlacemarkClick(placemark: PlacemarkModel)\n}</code></pre>\n<p>Place it just before the PlacemarkAdapter class (outside the class).</p>\n<p>This new interface will represent click events on the placemark Card, and allow us to abstract the response to this event.</p>\n<p>Here is a revised version of the Adapter - which accepts and installs an event handler based on this interface:</p>\n<pre><code>\nclass PlacemarkAdapter constructor(private var placemarks: List&lt;PlacemarkModel&gt;,\n                                   private val listener: PlacemarkListener) : RecyclerView.Adapter&lt;PlacemarkAdapter.MainHolder&gt;() {\n\n  override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): MainHolder {\n    return MainHolder(LayoutInflater.from(parent?.context).inflate(R.layout.card_placemark, parent, false))\n  }\n\n  override fun onBindViewHolder(holder: MainHolder, position: Int) {\n    val placemark = placemarks[holder.adapterPosition]\n    holder.bind(placemark, listener)\n  }\n\n  override fun getItemCount(): Int = placemarks.size\n\n  class MainHolder constructor(itemView: View) : RecyclerView.ViewHolder(itemView) {\n\n    fun bind(placemark: PlacemarkModel,  listener : PlacemarkListener) {\n      itemView.placemarkTitle.text = placemark.title\n      itemView.description.text = placemark.description\n      itemView.setOnClickListener { listener.onPlacemarkClick(placemark) }\n    }\n  }\n}</code></pre>\n<p>Look carefully at the very last line of the bind function above:</p>\n<pre><code>      itemView.setOnClickListener { listener.onPlacemarkClick(placemark) }</code></pre>\n<p>Can you figure our that is going on here?</p>\n<p>Perhaps if we now use this capability in PlacemarkListActivity it will become clearer.</p>\n<h2>PlacemarkListActivity</h2>\n<p>First, declare that we will implement the new interface:</p>\n<pre><code>class PlacemarkListActivity : AppCompatActivity(), PlacemarkListener {</code></pre>\n<p>... then the actual implementation:</p>\n<pre><code>  override fun onPlacemarkClick(placemark: PlacemarkModel) {\n    startActivityForResult(intentFor&lt;PlacemarkActivity&gt;(), 0)\n  }</code></pre>\n<p>Finally, in onCreate, change the way we create the adapter:</p>\n<pre><code>    recyclerView.adapter = PlacemarkAdapter(app.placemarks.findAll(), this)</code></pre>\n<p>If you run the app now - and add some placemarks. Selecting a placemark from the list will start the PlacemarkActivity. However, the Placemark we select will not appear in the PlacemarkActivity view. We will fix this in the next steps.</p>\n",
  "<p>In PlacemarkAdapter, introduce this new interface:</p>\n",
  "# Parcelable",
  "<h2>Parcelable</h2>\n<p>We will switch on some additional Kotlin goodness - which will significantly simplify the next set of features.</p>\n<h2>build.gradle</h2>\n<p>Before the dependencies:</p>\n<pre><code>androidExtensions {\n  experimental = true\n}</code></pre>\n<p>These experimental features are discussed here:</p>\n<ul>\n<li><a href=\"https://kotlinlang.org/docs/tutorials/android-plugin.html\">https://kotlinlang.org/docs/tutorials/android-plugin.html</a></li>\n</ul>\n<p>They are not without some issues - but quite usable.</p>\n<p>This is a revised version of the PlacemarkModel class:</p>\n<pre><code>package org.wit.placemark.models\n\nimport android.os.Parcelable\nimport kotlinx.android.parcel.Parcelize\n\n@Parcelize\ndata class PlacemarkModel(var title: String = &quot;&quot;,\n                          var description: String = &quot;&quot;) : Parcelable</code></pre>\n<p>It implements a parcelize capability. This is discussed in detail here:</p>\n<ul>\n<li><a href=\"&#109;&#97;&#x69;&#x6c;&#116;&#111;&#58;&#104;&#116;&#x74;&#x70;&#x73;&#58;&#47;&#47;&#109;&#101;&#100;&#105;&#117;&#x6d;&#46;&#99;&#111;&#x6d;&#47;&#x40;&#66;&#x6c;&#97;&#100;&#x65;&#x43;&#x6f;&#x64;&#x65;&#114;&#47;&#x72;&#x65;&#100;&#117;&#99;&#x69;&#110;&#103;&#x2d;&#112;&#x61;&#114;&#99;&#101;&#x6c;&#97;&#x62;&#108;&#101;&#45;&#98;&#111;&#105;&#108;&#x65;&#114;&#112;&#x6c;&#x61;&#x74;&#x65;&#45;&#99;&#111;&#x64;&#x65;&#x2d;&#x75;&#115;&#105;&#x6e;&#x67;&#45;&#x6b;&#x6f;&#x74;&#x6c;&#x69;&#x6e;&#x2d;&#x37;&#x34;&#x31;&#99;&#51;&#49;&#x32;&#52;&#x61;&#52;&#57;&#x61;\">&#104;&#116;&#x74;&#x70;&#x73;&#58;&#47;&#47;&#109;&#101;&#100;&#105;&#117;&#x6d;&#46;&#99;&#111;&#x6d;&#47;&#x40;&#66;&#x6c;&#97;&#100;&#x65;&#x43;&#x6f;&#x64;&#x65;&#114;&#47;&#x72;&#x65;&#100;&#117;&#99;&#x69;&#110;&#103;&#x2d;&#112;&#x61;&#114;&#99;&#101;&#x6c;&#97;&#x62;&#108;&#101;&#45;&#98;&#111;&#105;&#108;&#x65;&#114;&#112;&#x6c;&#x61;&#x74;&#x65;&#45;&#99;&#111;&#x64;&#x65;&#x2d;&#x75;&#115;&#105;&#x6e;&#x67;&#45;&#x6b;&#x6f;&#x74;&#x6c;&#x69;&#x6e;&#x2d;&#x37;&#x34;&#x31;&#99;&#51;&#49;&#x32;&#52;&#x61;&#52;&#57;&#x61;</a></li>\n</ul>\n<p>...but this was written without using the new feature we have just enabled, which dramatically reduces the boilerplate even further. Our approach is discussed here:</p>\n<ul>\n<li><a href=\"https://kotlinlang.org/docs/tutorials/android-plugin.html\">https://kotlinlang.org/docs/tutorials/android-plugin.html</a></li>\n</ul>\n<p>(towards the end)</p>\n",
  "<p>We will switch on some additional Kotlin goodness - which will significantly simplify the next set of features.</p>\n",
  " StartActivityWithData",
  "<h1>StartActivityWithData</h1>\n<p>We can now pass the selected placemark when we start PlacemarkActivity:</p>\n<p>Change the current onPlacemarkClick implementation:</p>\n<h2>PlacemarkListActivity</h2>\n<pre><code>  override fun onPlacemarkClick(placemark: PlacemarkModel) {\n    startActivityForResult(intentFor&lt;PlacemarkActivity&gt;(), 0)\n  }</code></pre>\n<p>to this:</p>\n<pre><code>  override fun onPlacemarkClick(placemark: PlacemarkModel) {\n    startActivityForResult(intentFor&lt;PlacemarkActivity&gt;().putExtra(&quot;placemark_edit&quot;, placemark), 0)\n  }</code></pre>\n<p>Notice we are passing the selected placemark to the activity - this is enabled via the <code>parcelable</code> mechanism we have just turned on.</p>\n<p>Now, in PlacemarkActivity, we can retrieve the placemark in <code>onCreate()</code></p>\n<pre><code>  override fun onCreate(savedInstanceState: Bundle?) {\n\n    ...\n    if (intent.hasExtra(&quot;placemark_edit&quot;)) {\n      placemark = intent.extras.getParcelable&lt;PlacemarkModel&gt;(&quot;placemark_edit&quot;)\n      placemarkTitle.setText(placemark.title)\n      description.setText(placemark.description)\n    }\n    ...\n  }</code></pre>\n<p>Place this before the <code>btnAdd.setOnClickListener()</code> statement.</p>\n<p>We read back the placemark, and place its field into the view controls.</p>\n<p>Run the app now - and verify that if you select a placemark - you will be taken to the PlacemakrActivity containing its values.</p>\n",
  "<p>We can now pass the selected placemark when we start PlacemarkActivity:</p>\n",
  " Ids",
  "<h1>Ids</h1>\n<p>Currently, we &#39;edit&#39; a placemark, make a change - then it will create a new placemark. This clearly is not the appropriate behavior. We should update the placemark we have been passed.</p>\n<p>To do this, we need a unique way of identifying placemarks - this is usually via an id. This is the current model:</p>\n<pre><code>@Parcelize\ndata class PlacemarkModel(var title: String = &quot;&quot;,\n                          var description: String = &quot;&quot;) : Parcelable</code></pre>\n<p>This is a revised version to include an ID:</p>\n<pre><code>@Parcelize\ndata class PlacemarkModel(var id: Long = 0,\n                          var title: String = &quot;&quot;,\n                          var description: String = &quot;&quot;) : Parcelable</code></pre>\n<p>We can now introduce a new method in PlacemarkStore interface:</p>\n<h2>PlacemarkStore</h2>\n<pre><code>...\n  fun update(placemark: PlacemarkModel)\n...</code></pre>\n<p>... and this is the completely revised PlacemarkMemStore implementation:</p>\n<pre><code>package org.wit.placemark.models\n\nimport org.jetbrains.anko.AnkoLogger\nimport org.jetbrains.anko.info\n\nvar lastId = 0L\n\ninternal fun getId(): Long {\n  return lastId++\n}\n\nclass PlacemarkMemStore : PlacemarkStore, AnkoLogger {\n\n  val placemarks = ArrayList&lt;PlacemarkModel&gt;()\n\n  override fun findAll(): List&lt;PlacemarkModel&gt; {\n    return placemarks\n  }\n\n  override fun create(placemark: PlacemarkModel) {\n    placemark.id = getId()\n    placemarks.add(placemark)\n    logAll()\n  }\n\n  override fun update(placemark: PlacemarkModel) {\n    var foundPlacemark: PlacemarkModel? = placemarks.find { p -&gt; p.id == placemark.id }\n    if (foundPlacemark != null) {\n      foundPlacemark.title = placemark.title\n      foundPlacemark.description = placemark.description\n      logAll()\n    }\n  }\n\n  fun logAll() {\n    placemarks.forEach { info(&quot;${it}&quot;) }\n  }\n}</code></pre>\n<p>Notice how we are generating a new ID when we create placemarks.</p>\n<p>These features will enable us to implement a placemark edit behaviour.</p>\n",
  "<p>Currently, we &#39;edit&#39; a placemark, make a change - then it will create a new placemark. This clearly is not the appropriate behavior. We should update the placemark we have been passed.</p>\n",
  "<h1>Solution</h1>\n<p>Placemark application so far:</p>\n<ul>\n<li><a href=\"archives/placemark-03.zip\">placemark-03.zip</a></li>\n</ul>\n<h2>Exercise 1: String Resources</h2>\n<p>In PlacemarkActivity - we have the following hard coded string:</p>\n<h2>PlacemarkActivity</h2>\n<pre><code>  toast(&quot;Please Enter a title&quot;)</code></pre>\n<p>These strings should be in the strings.xml resource file. Move them in there, and figure out how to load the strings in PlacemarkActivity.</p>\n<p>For guidance, see:</p>\n<ul>\n<li><a href=\"https://developer.android.com/guide/topics/resources/string-resource.html\">https://developer.android.com/guide/topics/resources/string-resource.html</a></li>\n<li><a href=\"https://stackoverflow.com/questions/44871481/how-can-i-access-values-from-strings-xml-in-kotlin-android\">https://stackoverflow.com/questions/44871481/how-can-i-access-values-from-strings-xml-in-kotlin-android</a></li>\n</ul>\n<h2>Exercise 2: Add Button Label</h2>\n<p>When you select a placemark - and the PlacemarkActivity is launched, the button label is &#39;Add Placemark&#39;. See if you can change this to &#39;Save Placemark&#39;. This is only to be changed if PlacemarkActivity is launched with a placemark passed to it. Make sure the <code>Save Placemark</code> string is externalized (in strings.xml)</p>\n<h2>Exercise 3</h2>\n<p>When you select a placemark from PlacemarkListActivity - it presents the activity in the PlacemarkActivity. If you press &#39;Save Activity&#39; - a new activity is created and appended to the list.</p>\n<p>Change this behaviour such that the button should update the existing placemark with the newly entered values, not create a new one.  We have new features in PlacemarkStore to enable you to implement this (the update method). Essentially, you will need to call update OR create when handling the button event.</p>\n<p>If you complete the implementation, you will notice that even if you update a Placemark&#39;s contents, the new contents will not be displayed in PlacemarkList. However, if you consult the logs you may be able to see if the values are actually changed.</p>\n<p>If you have trouble finding the correct logs, enter <code>PlacemarkModel</code> in the expression window in logcat. This should remove all logs except the ones you want to see:</p>\n<p><img src=\"img/04.png\" alt=\"\"></p>\n",
  "00.Lab-04 Images.md",
  "<h1>Objectives</h1>\n<p>Allow an image to be selected from the phones photos, and stored with the placemark</p>\n",
  "# Exercise Solutions",
  "<h2>Exercise Solutions</h2>\n<h2>Exercise 1: String Resources</h2>\n<p>In PlacemarkActivity - we have the following hard coded string:</p>\n<h2>PlacemarkActivity</h2>\n<pre><code>  toast(&quot;Please Enter a title&quot;)</code></pre>\n<p>These strings should be in the strings.xml resource file.</p>\n<h2>Exercise 1 Solution:</h2>\n<h2>strings.xml</h2>\n<pre><code>  &lt;string name=&quot;enter_placemark_title&quot;&gt; Please enter a Placemark Title &lt;/string&gt;</code></pre>\n<p>We can now rewrite the toast like this:</p>\n<pre><code>        toast(R.string.enter_placemark_title)</code></pre>\n<p>Notice that, in studio, you might see the code looking like this:</p>\n<p><img src=\"img/05.png\" alt=\"\"></p>\n<p>If you click on the string, then it reveals the id:</p>\n<p><img src=\"img/06.png\" alt=\"\"></p>\n<p>This is Studio trying to helpfully display the value of the string by interpolating it from the ID.</p>\n<h1>Exercise 2: Add Button Label</h1>\n<p>When you select a placemark - and the PlacemarkActivity is launched, the button label is &#39;Add Placemark&#39;. See if you can change this to &#39;Save Placemark&#39;. This is only to be changed if PlacemarkActivity is launched with a placemark passed to it. Make sure the <code>Save Placemark</code> string is externalized (in strings.xml)</p>\n<h2>Exercise 2 Solution</h2>\n<h2>strings.xml</h2>\n<pre><code>  &lt;string name=&quot;save_placemark&quot;&gt; Save Placemark &lt;/string&gt;</code></pre>\n<h2>PlacemarkActivity</h2>\n<pre><code>  if (intent.hasExtra(&quot;placemark_edit&quot;)) {\n      ...\n      btnAdd.setText(R.string.save_placemark)\n    }</code></pre>\n<h2>Exercise 3</h2>\n<p>When you select a placemark from PlacemarkListActivity - it presents the activity in the PlacemarkActivity. If you press &#39;Save Activity&#39; - a new activity is created and appended to the list.</p>\n<p>Change this behaviour such that the button should update the existing placemark with the newly entered values, not create a new one.  We have new features in PlacemarkStore to enable you to implement this (the update method). Essentially, you will need to call update OR create when handling the button event.</p>\n<p>If you complete the implementation, you will notice that even if you update a Placemark&#39;s contents, the new contents will not be displayed in PlacemarkList. However, if you consult the logs you may be able to see if the values are actually changed.  </p>\n<h2>Exercise 3 Solution</h2>\n<p>Introduce a local flag in onCreate(), always initialised to false:</p>\n<h2>PlacemarkActivity</h2>\n<pre><code>    var edit = false</code></pre>\n<p>Set the flag to true if we have a placemark passed:</p>\n<pre><code>    if (intent.hasExtra(&quot;placemark_edit&quot;)) {\n      edit = true\n      placemark = intent.extras.getParcelable&lt;PlacemarkModel&gt;(&quot;placemark_edit&quot;)\n      placemarkTitle.setText(placemark.title)\n      description.setText(placemark.description)\n      btnAdd.setText(R.string.save_placemark)\n    }</code></pre>\n<p>Then rework the add button event handler to follows:</p>\n<pre><code>    ...\n    btnAdd.setOnClickListener() {\n      placemark.title = placemarkTitle.text.toString()\n      placemark.description = description.text.toString()\n      if (placemark.title.isEmpty()) {\n        toast(R.string.enter_placemark_title)\n      } else {\n        if (edit) {\n          app.placemarks.update(placemark.copy())\n        } else {\n          app.placemarks.create(placemark.copy())\n        }\n      }\n      info(&quot;add Button Pressed: $placemarkTitle&quot;)\n      setResult(AppCompatActivity.RESULT_OK)\n      finish()\n    }\n    ...</code></pre>\n",
  "<h2>Exercise 1: String Resources</h2>\n",
  "# Model Updates",
  "<h2>Model Updates</h2>\n<p>Currently we cam successfully add and edit placemarks. However, although the edit is updating the model, the model is not being refreshed on the view (it is still displaying the original placemark).</p>\n<p>Here is a simple addition to fix this - a new method in PlacemarkListActivity:</p>\n<h2>PlacemarkListActivity:</h2>\n<pre><code>  override fun onActivityResult(requestCode: Int, resultCode: Int, data: Intent?) {\n    recyclerView.adapter?.notifyDataSetChanged()\n    super.onActivityResult(requestCode, resultCode, data)\n  }</code></pre>\n<p>This is another lifecycle event - this time to be triggered when an activity we have started finishes. We instruct the recyclerView&#39;s adapter that the model has been updated. </p>\n<p>This should trigger an update and the correct values displayed in the list.</p>\n",
  "<p>Currently we cam successfully add and edit placemarks. However, although the edit is updating the model, the model is not being refreshed on the view (it is still displaying the original placemark).</p>\n",
  " Add Image UI",
  "<h1>Add Image UI</h1>\n<p>We need a new button, which when pressed will allow the user to select an image.</p>\n<p>First the button string resource:</p>\n<h2>strings.xml</h2>\n<p>A new string for the button we will introduce:</p>\n<pre><code>  &lt;string name=&quot;button_addImage&quot;&gt; Add Image &lt;/string&gt;</code></pre>\n<p>Then the button itself + an imageView to display the image:</p>\n<h2>activity_placemark.xml</h2>\n<p>Two new controls:</p>\n<pre><code>        &lt;Button\n            android:id=&quot;@+id/chooseImage&quot;\n            android:layout_width=&quot;match_parent&quot;\n            android:layout_height=&quot;wrap_content&quot;\n            android:layout_margin=&quot;16dp&quot;\n            android:background=&quot;@color/colorAccent&quot;\n            android:paddingBottom=&quot;8dp&quot;\n            android:paddingTop=&quot;8dp&quot;\n            android:text=&quot;@string/button_addImage&quot;\n            android:textColor=&quot;@color/colorPrimary&quot;\n            android:textSize=&quot;16sp&quot;/&gt;\n\n        &lt;ImageView\n            android:id=&quot;@+id/placemarkImage&quot;\n            android:layout_width=&quot;match_parent&quot;\n            android:layout_height=&quot;wrap_content&quot;\n            app:srcCompat=&quot;@mipmap/ic_launcher&quot;/&gt;</code></pre>\n<p>We can add these before the <code>Add Placemark</code> button.  The view should look like this now:</p>\n<p><img src=\"img/01.png\" alt=\"\"></p>\n<p>Take some time to look at the <code>Design</code> view in studio:</p>\n<p><img src=\"img/02.png\" alt=\"\"></p>\n<p>Remove the controls again - and this time add them using the pallette - dragging and dropping the button + imageView widgits to achieve the same effect. You will notice, however, that we have a set of additional parameters included in our hand coded xml above.</p>\n<p>We can add an event handler for the new button:</p>\n<h2>PlacemarkActivity</h2>\n<pre><code>    chooseImage.setOnClickListener {\n      info (&quot;Select image&quot;)\n    }</code></pre>\n<p>Note that this is <code>inside</code> the onCreate method. When you click on the button check that the log message is produced.</p>\n",
  "<p>We need a new button, which when pressed will allow the user to select an image.</p>\n",
  " Selecting Images",
  "<h1>Selecting Images</h1>\n<p>We will be supporting the selection of images from the phones gallery/photos. There are APIs in android for this purpose. Since Android 4.4, this has been centralised into the Storage Access Framework:</p>\n<ul>\n<li><a href=\"https://developer.android.com/guide/topics/providers/document-provider\">https://developer.android.com/guide/topics/providers/document-provider</a></li>\n</ul>\n<p>This is part of a larger <code>Content Provider</code> architecture - and serves a much broader remit than just accessing photos. We will try to simplify usage of the framework, by encapsulating it in a <code>helper</code> class</p>\n<p>Create a package called <code>org.wit.placemark.helpers</code>, and incorporate this file into the package:</p>\n<h2>ImageHelpers.kt</h2>\n<pre><code>package org.wit.placemark.helpers\n\nimport android.app.Activity\nimport android.content.Intent\nimport org.wit.placemark.R\n\nfun showImagePicker(parent: Activity, id: Int) {\n  val intent = Intent()\n  intent.type = &quot;image/*&quot;\n  intent.action = Intent.ACTION_OPEN_DOCUMENT\n  intent.addCategory(Intent.CATEGORY_OPENABLE)\n  val chooser = Intent.createChooser(intent, R.string.select_placemark_image.toString())\n  parent.startActivityForResult(chooser, id)\n}</code></pre>\n<p>This function relies on this new string in strings.xml:</p>\n<h2>strings.xml</h2>\n<pre><code>&lt;string name=&quot;select_placemark_image&quot;&gt;Select placemark image&lt;/string&gt;</code></pre>\n<p>Notice that this is just a function, not a class or an object. Its purpose is to show an image picker dialog.</p>\n<p>We will now trigger this dialog. When starting an activity like this, we usually define a special code - which we will expect the new activity to send back when it is finished (otherwise we might get confused as to which activity has just finished).</p>\n<p>Here is the id we invent - make it a class member of PlacemakerActivity:</p>\n<h2>PlacemakerActivity</h2>\n<pre><code>  val IMAGE_REQUEST = 1</code></pre>\n<p>Then to trigger the picker:</p>\n<pre><code>    chooseImage.setOnClickListener {\n      showImagePicker(this, IMAGE_REQUEST)\n    }</code></pre>\n<p>If there are no images in your simulator, you might want to launch a browser, find some images and save them to your camera roll (long press in chrome will trigger this).</p>\n<p>Run the app now and verify that the picker does in fact appear, presenting a set of images for selection.</p>\n<p><img src=\"img/03.png\" alt=\"\"></p>\n<p>The images will not go anywhere as yet.</p>\n",
  "<p>We will be supporting the selection of images from the phones gallery/photos. There are APIs in android for this purpose. Since Android 4.4, this has been centralised into the Storage Access Framework:</p>\n",
  "Displaying the Image",
  "<h1>Displaying the Image</h1>\n<p>We can now extend the PlacemarkModel to include the image reference as an additional field:</p>\n<h2>PlacemarkModel</h2>\n<pre><code>    var image: String = &quot;&quot;</code></pre>\n<p>In PlacemarkActivity we can recover the image name when the activity picker activity finishes. This is via a lifecycle event - triggered when an activity we may have started finishes:</p>\n<h2>PlacemarkActivity</h2>\n<pre><code>  override fun onActivityResult(requestCode: Int, resultCode: Int, data: Intent?) {\n    super.onActivityResult(requestCode, resultCode, data)\n    when (requestCode) {\n      IMAGE_REQUEST -&gt; {\n        if (data != null) {\n          placemark.image = data.getData().toString()\n        }\n      }\n    }\n  }</code></pre>\n<p>Notice how we are recovering the name only when the IMAGE_REQUEST is seen.</p>\n<p>See if you can run the application under debug - and place a breakpoint in where the image names is recovered above. See if you can inspect the name.</p>\n<p>In order to display the image, we introduce another helper :</p>\n<h2>Imagehelpers</h2>\n<pre><code>fun readImage(activity: Activity, resultCode: Int, data: Intent?): Bitmap? {\n  var bitmap: Bitmap? = null\n  if (resultCode == Activity.RESULT_OK &amp;&amp; data != null &amp;&amp; data.data != null) {\n    try {\n      bitmap = MediaStore.Images.Media.getBitmap(activity.contentResolver, data.data)\n    } catch (e: IOException) {\n      e.printStackTrace()\n    }\n  }\n  return bitmap\n}</code></pre>\n<p>Finally, we can use this method to display the image in the image view:</p>\n<h2>PlacemarkActivity</h2>\n<pre><code>      IMAGE_REQUEST -&gt; {\n        if (data != null) {\n          placemark.image = data.getData().toString()\n          placemarkImage.setImageBitmap(readImage(this, resultCode, data))\n        }</code></pre>\n<p>Run this now, and the selected image should be displayed in the view.</p>\n<p><img src=\"img/04.png\" alt=\"\"></p>\n",
  "<p>We can now extend the PlacemarkModel to include the image reference as an additional field:</p>\n",
  " Displaying the image in Edit mode",
  "<h1>Displaying the image in Edit mode</h1>\n<p>If you run run the app - we seem to be able to load the image when we create a new placemark, but not when we proceed to edit one.</p>\n<p>This is relatively straightforward. First we define an additional image helper for convenience:</p>\n<h2>ImageHelpers</h2>\n<pre><code>fun readImageFromPath(context: Context, path : String) : Bitmap? {\n  var bitmap : Bitmap? = null\n  val uri = Uri.parse(path)\n  if (uri != null) {\n    try {\n      val parcelFileDescriptor = context.getContentResolver().openFileDescriptor(uri, &quot;r&quot;)\n      val fileDescriptor = parcelFileDescriptor.getFileDescriptor()\n      bitmap = BitmapFactory.decodeFileDescriptor(fileDescriptor)\n      parcelFileDescriptor.close()\n    } catch (e: Exception) {\n    }\n  }\n  return bitmap\n}</code></pre>\n<p>We can now call this when in edit mode:</p>\n<h2>PlacemarkActivity</h2>\n<pre><code>    if (intent.hasExtra(&quot;placemark_edit&quot;)) {\n      //... as before\n      placemarkImage.setImageBitmap(readImageFromPath(this, placemark.image))\n    }</code></pre>\n<p>The image should now appear when we edit a placemark.</p>\n",
  "<p>If you run run the app - we seem to be able to load the image when we create a new placemark, but not when we proceed to edit one.</p>\n",
  "<h1>Solution</h1>\n<p>Placemark application so far:</p>\n<ul>\n<li><a href=\"archives/placemark-04.zip\">placemark-04.zip</a></li>\n</ul>\n<h2>Exercise 1</h2>\n<p>As a user, create a new placemark with a title + image. Now edit the placemark and change the title - and update the placemark. Notice that the title has changed in PlacemarkList. </p>\n<p>Edit the placemark and change the image - and update the placemark. Go back in to edit the placemark again - what image do you see?</p>\n<p>There is a bug here - the placemark activity is still showing the original image. See if you can debug and fix this bug.</p>\n<p>(HINT - look in the PlacemarkMemStore class)</p>\n<h2>Exercise 2</h2>\n<p>in PlacemarkActivity, if you are editing a placemark OR if the placemark already has an image, change the button label to be &#39;Change Image&#39; from <code>Add Image</code></p>\n<h2>Exercise 3</h2>\n<p>Introduce a new ImageView into the PlaceMarkCard view (displayed on PlacemarkListAcivity). Display the placemark images here (if an image has been loaded)</p>\n",
  "00.Lab-05 MapActivity.md",
  " Summary",
  "<h1>Summary</h1>\n<p>Include a MapActivity, enabling the user to select the location of the placemark </p>\n",
  "<h1>Exercise Solutions</h1>\n<h2>Exercise 1</h2>\n<p>As a user, create a new placemark with a title + image. Now edit the placemark and change the title - and update the placemark. Notice that the title has changed in PlacemarkList. </p>\n<p>Edit the placemark and change the image - and update the placemark. Go back in to edit the placemark again - what image do you see?</p>\n<p>There is a bug here - the placemark activity is still showing the original image. See if you can debug and fix this bug.</p>\n<h2>Exercise 1 Solution</h2>\n<p>The problem is we are not changing the stored placemark in the <code>update</code> function in the PlacemarkMemStore:</p>\n<h2>PlacemarkMemStore</h2>\n<pre><code>...\n  override fun update(placemark: PlacemarkModel) {\n    var foundPlacemark: PlacemarkModel? = placemarks.find { p -&gt; p.id == placemark.id }\n    if (foundPlacemark != null) {\n      foundPlacemark.title = placemark.title\n      foundPlacemark.description = placemark.description\n      foundPlacemark.image = placemark.image\n      logAll();\n    }\n  }\n...</code></pre>\n<p>Just one line added in the above.</p>\n<h2>Exercise 2</h2>\n<p>in PlacemarkActivity, if you are editing a placemark OR if the placemark already has an image, change the button label to be &#39;Change Image&#39; from </p>\n<h2>Exercise 2 Solution</h2>\n<h2>strings.xml</h2>\n<pre><code>  &lt;string name=&quot;change_placemark_image&quot;&gt;Change placemark image&lt;/string&gt;</code></pre>\n<h2>PlacemarkActivity</h2>\n<p>When edit it detected, change the label:</p>\n<pre><code>    ...\n    if (intent.hasExtra(&quot;placemark_edit&quot;)) {\n        ...\n      placemarkImage.setImageBitmap(readImageFromPath(this, placemark.image))\n      if (placemark.image != null) {\n        chooseImage.setText(R.string.change_placemark_image)\n      }\n      ...</code></pre>\n<p>When an image is loaded, also change the label:</p>\n<pre><code>      ...\n      IMAGE_REQUEST -&gt; {\n        if (data != null) {\n          placemark.image = data.getData().toString()\n          placemarkImage.setImageBitmap(readImage(this, resultCode, data))\n          chooseImage.setText(R.string.change_placemark_image)\n        }\n      ...</code></pre>\n<h2>Exercise 3</h2>\n<p>Introduce a new ImageView into the PlaceMarkCard view (displayed by PlacemarkListAcivity). Display the placemark images here (if it has one)</p>\n<h2>Exercise 3 Solution</h2>\n<p>Extend the card to include an imageView:</p>\n<h2>card_placemark.xml</h2>\n<pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;\n&lt;android.support.v7.widget.CardView\n    xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;\n    android:layout_width=&quot;match_parent&quot;\n    android:layout_height=&quot;wrap_content&quot;\n    android:layout_marginBottom=&quot;8dp&quot;\n    android:elevation=&quot;24dp&quot;&gt;\n\n  &lt;RelativeLayout\n      android:layout_width=&quot;match_parent&quot;\n      android:layout_height=&quot;wrap_content&quot;\n      android:padding=&quot;16dp&quot;&gt;\n\n    &lt;ImageView\n        android:id=&quot;@+id/imageIcon&quot;\n        android:layout_width=&quot;64dp&quot;\n        android:layout_height=&quot;64dp&quot;\n        android:layout_alignParentLeft=&quot;true&quot;\n        android:layout_alignParentTop=&quot;true&quot;\n        android:layout_marginRight=&quot;16dp&quot;/&gt;\n\n    &lt;TextView\n        android:id=&quot;@+id/placemarkTitle&quot;\n        android:layout_width=&quot;wrap_content&quot;\n        android:layout_height=&quot;wrap_content&quot;\n        android:layout_alignParentTop=&quot;true&quot;\n        android:layout_toRightOf=&quot;@+id/imageIcon&quot;\n        android:textSize=&quot;30sp&quot;/&gt;\n\n    &lt;TextView\n        android:id=&quot;@+id/description&quot;\n        android:layout_width=&quot;wrap_content&quot;\n        android:layout_height=&quot;wrap_content&quot;\n        android:layout_below=&quot;@id/placemarkTitle&quot;\n        android:layout_toRightOf=&quot;@+id/imageIcon&quot;/&gt;\n\n  &lt;/RelativeLayout&gt;\n&lt;/android.support.v7.widget.CardView&gt;</code></pre>\n<p>In the adapter - initialise the imageView from the model:</p>\n<h2>PlacemarkAdapter</h2>\n<pre><code>...\n    fun bind(placemark: PlacemarkModel,  listener : PlacemarkListener) {\n      itemView.placemarkTitle.text = placemark.title\n      itemView.description.text = placemark.description\n      itemView.imageIcon.setImageBitmap(readImageFromPath(itemView.context, placemark.image))\n      itemView.setOnClickListener { listener.onPlacemarkClick(placemark) }\n    }\n...</code></pre>\n",
  "<h2>Exercise 1</h2>\n",
  " Location Resources",
  "<h1>Location Resources</h1>\n<p>First introduce a new button to set the location. This requires:</p>\n<ul>\n<li>string resource</li>\n<li>button</li>\n<li>event handler</li>\n</ul>\n<h2>strings.xml</h2>\n<pre><code>  &lt;string name=&quot;button_location&quot;&gt;Set Location&lt;/string&gt;</code></pre>\n<h2>activity_placemark.xml</h2>\n<pre><code>        &lt;Button\n            android:id=&quot;@+id/placemarkLocation&quot;\n            android:layout_width=&quot;match_parent&quot;\n            android:layout_height=&quot;wrap_content&quot;\n            android:layout_margin=&quot;16dp&quot;\n            android:background=&quot;@color/colorAccent&quot;\n            android:paddingBottom=&quot;8dp&quot;\n            android:paddingTop=&quot;8dp&quot;\n            android:stateListAnimator=&quot;@null&quot;\n            android:text=&quot;@string/button_location&quot;\n            android:textColor=&quot;@color/colorPrimary&quot;\n            android:textSize=&quot;16sp&quot;/&gt;</code></pre>\n<h2>PlacemarkActivity</h2>\n<pre><code>    placemarkLocation.setOnClickListener {\n      info (&quot;Set Location Pressed&quot;)\n    }</code></pre>\n<p>Build &amp; run the application now and make sure the button appears as expected</p>\n<p><img src=\"img/02.png\" alt=\"\"></p>\n<p>and also the log appears when the button is pressed.</p>\n",
  "<p>First introduce a new button to set the location. This requires:</p>\n",
  " Google Maps Activity",
  "<h1>Google Maps Activity</h1>\n<p>Briefly review then general guide to incorporating google maps here:</p>\n<ul>\n<li><a href=\"https://developer.android.com/training/maps/index.html\">https://developer.android.com/training/maps/index.html</a></li>\n</ul>\n<p>In Studio, select the activities package, and from the context menu insert a new <code>Google Maps</code> activity:</p>\n<p><img src=\"img/03.png\" alt=\"\"></p>\n<p>This will suggest this configuration:</p>\n<p><img src=\"img/07.png\" alt=\"\"></p>\n<p>Accept all defaults and press Finish.</p>\n<h2>File Updates</h2>\n<p>This will generate updates to the following files:</p>\n<h2>build.gradle:</h2>\n<pre><code>  implementation &#39;com.google.android.gms:play-services-maps:15.0.1&#39;</code></pre>\n<h2>strings.xml</h2>\n<pre><code>  &lt;string name=&quot;title_activity_maps&quot;&gt;Map&lt;/string&gt;</code></pre>\n<h2>AndroidManifest.xml</h2>\n<pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;\n&lt;manifest xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;\n  package=&quot;org.wit.placemark&quot;&gt;\n\n  &lt;!--\n         The ACCESS_COARSE/FINE_LOCATION permissions are not required to use\n         Google Maps Android API v2, but you must specify either coarse or fine\n         location permissions for the &#39;MyLocation&#39; functionality. \n    --&gt;\n  &lt;uses-permission android:name=&quot;android.permission.ACCESS_FINE_LOCATION&quot; /&gt;\n\n  &lt;application\n    android:name=&quot;.main.MainApp&quot;\n    android:allowBackup=&quot;true&quot;\n    android:icon=&quot;@mipmap/ic_launcher&quot;\n    android:label=&quot;@string/app_name&quot;\n    android:roundIcon=&quot;@mipmap/ic_launcher_round&quot;\n    android:supportsRtl=&quot;true&quot;\n    android:theme=&quot;@style/AppTheme&quot;&gt;\n    &lt;activity android:name=&quot;.activities.PlacemarkActivity&quot;&gt;&lt;/activity&gt;\n    &lt;activity android:name=&quot;.activities.PlacemarkListActivity&quot;&gt;\n      &lt;intent-filter&gt;\n        &lt;action android:name=&quot;android.intent.action.MAIN&quot; /&gt;\n\n        &lt;category android:name=&quot;android.intent.category.LAUNCHER&quot; /&gt;\n      &lt;/intent-filter&gt;\n    &lt;/activity&gt;\n    &lt;!--\n             The API key for Google Maps-based APIs is defined as a string resource.\n             (See the file &quot;res/values/google_maps_api.xml&quot;).\n             Note that the API key is linked to the encryption key used to sign the APK.\n             You need a different API key for each encryption key, including the release key that is used to\n             sign the APK for publishing.\n             You can define the keys for the debug and release targets in src/debug/ and src/release/. \n        --&gt;\n    &lt;meta-data\n      android:name=&quot;com.google.android.geo.API_KEY&quot;\n      android:value=&quot;@string/google_maps_key&quot; /&gt;\n\n    &lt;activity\n      android:name=&quot;.activities.MapsActivity&quot;\n      android:label=&quot;@string/title_activity_maps&quot;&gt;&lt;/activity&gt;\n  &lt;/application&gt;\n\n&lt;/manifest&gt;</code></pre>\n<h2>New Files</h2>\n<p>In Addition, these new files will have been generated:</p>\n<h2>activity_maps.xml</h2>\n<pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;\n&lt;fragment xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;\n  xmlns:map=&quot;http://schemas.android.com/apk/res-auto&quot;\n  xmlns:tools=&quot;http://schemas.android.com/tools&quot;\n  android:id=&quot;@+id/map&quot;\n  android:name=&quot;com.google.android.gms.maps.SupportMapFragment&quot;\n  android:layout_width=&quot;match_parent&quot;\n  android:layout_height=&quot;match_parent&quot;\n  tools:context=&quot;.activities.MapsActivity&quot; /&gt;</code></pre>\n<h2>MapsActivity</h2>\n<pre><code>package org.wit.placemark.activities\n\nimport android.support.v7.app.AppCompatActivity\nimport android.os.Bundle\n\nimport com.google.android.gms.maps.CameraUpdateFactory\nimport com.google.android.gms.maps.GoogleMap\nimport com.google.android.gms.maps.OnMapReadyCallback\nimport com.google.android.gms.maps.SupportMapFragment\nimport com.google.android.gms.maps.model.LatLng\nimport com.google.android.gms.maps.model.MarkerOptions\n\nclass MapsActivity : AppCompatActivity(), OnMapReadyCallback {\n\n  private lateinit var mMap: GoogleMap\n\n  override fun onCreate(savedInstanceState: Bundle?) {\n    super.onCreate(savedInstanceState)\n    setContentView(R.layout.activity_maps)\n    // Obtain the SupportMapFragment and get notified when the map is ready to be used.\n    val mapFragment = supportFragmentManager\n        .findFragmentById(R.id.map) as SupportMapFragment\n    mapFragment.getMapAsync(this)\n  }\n\n  /**\n   * Manipulates the map once available.\n   * This callback is triggered when the map is ready to be used.\n   * This is where we can add markers or lines, add listeners or move the camera. In this case,\n   * we just add a marker near Sydney, Australia.\n   * If Google Play services is not installed on the device, the user will be prompted to install\n   * it inside the SupportMapFragment. This method will only be triggered once the user has\n   * installed Google Play services and returned to the app.\n   */\n  override fun onMapReady(googleMap: GoogleMap) {\n    mMap = googleMap\n\n    // Add a marker in Sydney and move the camera\n    val sydney = LatLng(-34.0, 151.0)\n    mMap.addMarker(MarkerOptions().position(sydney).title(&quot;Marker in Sydney&quot;))\n    mMap.moveCamera(CameraUpdateFactory.newLatLng(sydney))\n  }\n}</code></pre>\n<h2>google_maps_api.xml</h2>\n<pre><code>&lt;resources&gt;\n  &lt;!--\n    TODO: Before you run your application, you need a Google Maps API key.\n\n    To get one, follow this link, follow the directions and press &quot;Create&quot; at the end:\n\n    https://console.developers.google.com/flows/enableapi?apiid=maps_android_backend&amp;keyType=CLIENT_SIDE_ANDROID&amp;r=BC:AA:86:5A:D7:8C:52:EA:1C:F2:24:FB:80:2C:A6:73:1D:B4:DA:8B%3Borg.wit.placemark.activities\n\n    You can also add your credentials to an existing key, using these values:\n\n    Package name:\n    BC:AA:86:5A:D7:8C:52:EA:1C:F2:24:FB:80:2C:A6:73:1D:B4:DA:8B\n\n    SHA-1 certificate fingerprint:\n    BC:AA:86:5A:D7:8C:52:EA:1C:F2:24:FB:80:2C:A6:73:1D:B4:DA:8B\n\n    Alternatively, follow the directions here:\n    https://developers.google.com/maps/documentation/android/start#get-key\n\n    Once you have your key (it starts with &quot;AIza&quot;), replace the &quot;google_maps_key&quot;\n    string in this file.\n    --&gt;\n  &lt;string name=&quot;google_maps_key&quot; templateMergeStrategy=&quot;preserve&quot; translatable=&quot;false&quot;&gt;YOUR API KEY HERE&lt;/string&gt;\n&lt;/resources&gt;</code></pre>\n<p>In the above file, you will need to insert your own API Key. </p>\n<p>Before proceeding, you will need to get a google map api key. Follow the guide here:</p>\n<ul>\n<li><a href=\"https://developers.google.com/maps/documentation/android-api/start#get-key\">https://developers.google.com/maps/documentation/android-api/start#get-key</a></li>\n</ul>\n<p>Thus might take a little while, as you navigate through the various features available. The key will be a long string applicable to a range of google services. You can choose to restrict it to just the Maps API. </p>\n<p>Google have recently switched to a subscription model - and will be prompting you to sign up for free credits for using the api, seeking a credit card (which they promise not to charge). You can ignore this safely for the moment, as the modest number of requests we make should work without registration.</p>\n<p>Your key page might look like this:</p>\n<p><img src=\"img/11.png\" alt=\"\"></p>\n<p>Notice that application restrictions have been set to &#39;none&#39;</p>\n<p>Also, once you have inserted into the <code>google_maps_api.xml</code> file, make sure you no NOT commit this file to any public repository (github). This key is intended to be a secret to your account. If you are using git, the simplest way of doing this is to append the following to <code>.gitignore</code>:</p>\n<pre><code>app/src/release/res/values/google_maps_api.xml\napp/src/debug/res/values/google_maps_api.xml</code></pre>\n<p>Rebuild the app - you may get an error:</p>\n<h3>MasActivity</h3>\n<pre><code>Unresolved reference: R</code></pre>\n<p>If you get this error, include this import:</p>\n<pre><code>import org.wit.placemark.R</code></pre>\n<p>If all goes well, you should be able to start the maps activity:</p>\n<h2>PlacemarkActivity</h2>\n<pre><code>    placemarkLocation.setOnClickListener {\n      startActivity (intentFor&lt;MapsActivity&gt;())\n    }</code></pre>\n<p>If they key is correctly entered, the map should appear:</p>\n<p><img src=\"img/04.png\" alt=\"\"></p>\n",
  "<p>Briefly review then general guide to incorporating google maps here:</p>\n",
  " Tidyup Generated code",
  "<h1>Tidyup Generated code</h1>\n<p>We might remove some of the additional comments generated by the studio wizard (read them first)</p>\n<h2>AndroidManifest.xml</h2>\n<pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;\n&lt;manifest xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;\n  package=&quot;org.wit.placemark&quot;&gt;\n\n  &lt;uses-permission android:name=&quot;android.permission.ACCESS_FINE_LOCATION&quot; /&gt;\n\n  &lt;application\n    android:name=&quot;.main.MainApp&quot;\n    android:allowBackup=&quot;true&quot;\n    android:icon=&quot;@mipmap/ic_launcher&quot;\n    android:label=&quot;@string/app_name&quot;\n    android:roundIcon=&quot;@mipmap/ic_launcher_round&quot;\n    android:supportsRtl=&quot;true&quot;\n    android:theme=&quot;@style/AppTheme&quot;&gt;\n    &lt;activity android:name=&quot;.activities.PlacemarkActivity&quot;&gt;&lt;/activity&gt;\n    &lt;activity android:name=&quot;.activities.PlacemarkListActivity&quot;&gt;\n      &lt;intent-filter&gt;\n        &lt;action android:name=&quot;android.intent.action.MAIN&quot; /&gt;\n\n        &lt;category android:name=&quot;android.intent.category.LAUNCHER&quot; /&gt;\n      &lt;/intent-filter&gt;\n    &lt;/activity&gt;\n\n    &lt;meta-data\n      android:name=&quot;com.google.android.geo.API_KEY&quot;\n      android:value=&quot;@string/google_maps_key&quot; /&gt;\n\n    &lt;activity\n      android:name=&quot;.activities.MapsActivity&quot;\n      android:label=&quot;@string/title_activity_maps&quot;&gt;&lt;/activity&gt;\n  &lt;/application&gt;\n\n&lt;/manifest&gt;</code></pre>\n<h2>MapsActivity</h2>\n<pre><code>package org.wit.placemark.activities\n\nimport android.support.v7.app.AppCompatActivity\nimport android.os.Bundle\n\nimport com.google.android.gms.maps.CameraUpdateFactory\nimport com.google.android.gms.maps.GoogleMap\nimport com.google.android.gms.maps.OnMapReadyCallback\nimport com.google.android.gms.maps.SupportMapFragment\nimport com.google.android.gms.maps.model.LatLng\nimport com.google.android.gms.maps.model.MarkerOptions\nimport org.wit.placemark.R\n\nclass MapsActivity : AppCompatActivity(), OnMapReadyCallback {\n\n  private lateinit var mMap: GoogleMap\n\n  override fun onCreate(savedInstanceState: Bundle?) {\n    super.onCreate(savedInstanceState)\n    setContentView(R.layout.activity_maps)\n    val mapFragment = supportFragmentManager\n        .findFragmentById(R.id.map) as SupportMapFragment\n    mapFragment.getMapAsync(this)\n  }\n\n  override fun onMapReady(googleMap: GoogleMap) {\n    mMap = googleMap\n    val sydney = LatLng(-34.0, 151.0)\n    mMap.addMarker(MarkerOptions().position(sydney).title(&quot;Marker in Sydney&quot;))\n    mMap.moveCamera(CameraUpdateFactory.newLatLng(sydney))\n  }\n}</code></pre>\n<p>Also, revise the default location + zoom level:</p>\n<h2>MapsActivity</h2>\n<pre><code>  override fun onMapReady(googleMap: GoogleMap) {\n    mMap = googleMap\n    val wit = LatLng(52.245696, -7.139102)\n    mMap.addMarker(MarkerOptions().position(wit).title(&quot;Marker in Waterford&quot;))\n    mMap.moveCamera(CameraUpdateFactory.newLatLngZoom(wit, 16f))\n  }</code></pre>\n<p><img src=\"img/05.png\" alt=\"\"></p>\n",
  "<p>We might remove some of the additional comments generated by the studio wizard (read them first)</p>\n",
  " Location Model",
  "<h1>Location Model</h1>\n<p>We would like to include the location into our model, so we can record the latitude/longitude the user selects. Introduce this new class alongside the PlacemarkModel class:</p>\n<h2>PlacemarkModel</h2>\n<pre><code>@Parcelize\ndata class Location(var lat: Double = 0.0,\n                    var lng: Double = 0.0,\n                    var zoom: Float = 0f) : Parcelable</code></pre>\n<p>Put this class in the same source file as PlacemarkModel.</p>\n<p>We can now pass a location to the MapsActivity:</p>\n<h2>PlacemarkActivity</h2>\n<pre><code>    placemarkLocation.setOnClickListener {\n      val location = Location(52.245696, -7.139102, 15f)\n      startActivity (intentFor&lt;MapsActivity&gt;().putExtra(&quot;location&quot;, location))\n    }</code></pre>\n<p>Here is a revised version of MapsActivity - which uses the Location model</p>\n<h2>MapsActivity</h2>\n<pre><code>package org.wit.placemark.activities\n\n...\n\nclass MapsActivity : AppCompatActivity(), OnMapReadyCallback {\n\n  private lateinit var mMap: GoogleMap\n  var location = Location()\n\n  override fun onCreate(savedInstanceState: Bundle?) {\n    super.onCreate(savedInstanceState)\n    setContentView(R.layout.activity_maps)\n    location = intent.extras.getParcelable&lt;Location&gt;(&quot;location&quot;)\n    val mapFragment = supportFragmentManager\n        .findFragmentById(R.id.map) as SupportMapFragment\n    mapFragment.getMapAsync(this)\n  }\n\n  override fun onMapReady(googleMap: GoogleMap) {\n    mMap = googleMap\n    val loc = LatLng(location.lat, location.lng)\n    mMap.addMarker(MarkerOptions().position(loc).title(&quot;Default Marker&quot;))\n    mMap.moveCamera(CameraUpdateFactory.newLatLngZoom(loc, location.zoom))\n  }\n}</code></pre>\n<p>Read this carefully, and note how the location object is being used. Specifically :</p>\n<ul>\n<li>it is being recovered from the intent in onCreate</li>\n<li>it is being used on onMapReady to center the map on the recovered location</li>\n</ul>\n<p>Experiment with different hard coded lat/lng + zoom values and verify that the MapsActivity correctly renders. </p>\n<p>This is a slightly revised onMapReady implementation:</p>\n<h2>MapsActivity</h2>\n<pre><code>  override fun onMapReady(googleMap: GoogleMap) {\n    mMap = googleMap\n    val loc = LatLng(location.lat, location.lng)\n    val options = MarkerOptions()\n        .title(&quot;Placemark&quot;)\n        .snippet(&quot;GPS : &quot; + loc.toString())\n        .draggable(true)\n        .position(loc)\n    mMap.addMarker(options)\n    mMap.moveCamera(CameraUpdateFactory.newLatLngZoom(loc, location.zoom))\n  }</code></pre>\n<p>Try it out now.</p>\n<p><img src=\"img/06.png\" alt=\"\"></p>\n<p>You should be able to select the marker - it will display its lat/lng. And also able to drag it to a different location.</p>\n<p>Finally, to keep the code more consistent, rename the map from <code>mMap</code> to <code>map</code>:</p>\n<h2>MapsActivity</h2>\n<pre><code>class MapsActivity : AppCompatActivity(), OnMapReadyCallback {\n\n  private lateinit var map: GoogleMap\n  var location = Location()\n\n  override fun onCreate(savedInstanceState: Bundle?) {\n    super.onCreate(savedInstanceState)\n    setContentView(R.layout.activity_maps)\n    location = intent.extras.getParcelable&lt;Location&gt;(&quot;location&quot;)\n    val mapFragment = supportFragmentManager\n        .findFragmentById(R.id.map) as SupportMapFragment\n    mapFragment.getMapAsync(this)\n  }\n\n  override fun onMapReady(googleMap: GoogleMap) {\n    map = googleMap\n    val loc = LatLng(location.lat, location.lng)\n    val options = MarkerOptions()\n        .title(&quot;Placemark&quot;)\n        .snippet(&quot;GPS : &quot; + loc.toString())\n        .draggable(true)\n        .position(loc)\n    map.addMarker(options)\n    map.moveCamera(CameraUpdateFactory.newLatLngZoom(loc, location.zoom))\n  }\n}</code></pre>\n",
  "<p>We would like to include the location into our model, so we can record the latitude/longitude the user selects. Introduce this new class alongside the PlacemarkModel class:</p>\n",
  " Recover Location from Activity",
  "<h1>Recover Location from Activity</h1>\n<p>Currently, when you press back from the MapsActivity, any change made in the marker by the user is lost. We need to address this now.</p>\n<p>First, add these fields to the ActivityPlacemark class:</p>\n<h2>PlacemarkActivity</h2>\n<pre><code>  val LOCATION_REQUEST = 2\n  var location = Location(52.245696, -7.139102, 15f)</code></pre>\n<p>When we start the map, we pass the LOCATION_REQUEST  code:</p>\n<pre><code>   placemarkLocation.setOnClickListener {\n      startActivityForResult(intentFor&lt;MapsActivity&gt;().putExtra(&quot;location&quot;, location), LOCATION_REQUEST)\n    }</code></pre>\n<p>Now, when a result is returned, we detect a LOCATION_REQUEST response, and recover the location:</p>\n<pre><code>  override fun onActivityResult(requestCode: Int, resultCode: Int, data: Intent?) {\n    super.onActivityResult(requestCode, resultCode, data)\n    when (requestCode) {\n      IMAGE_REQUEST -&gt; {\n        if (data != null) {\n          placemark.image = data.getData().toString()\n          placemarkImage.setImageBitmap(readImage(this, resultCode, data))\n          chooseImage.setText(R.string.change_placemark_image)\n        }\n      }\n      LOCATION_REQUEST -&gt; {\n        if (data != null) {\n          location = data.extras.getParcelable&lt;Location&gt;(&quot;location&quot;)\n        }\n      }\n    }\n  }</code></pre>\n<p>Try the app now - and drag the marker to a new location.</p>\n<p>When you press back - and you get to the PlacemarkActivity - try pressing Set Location again. What happens? It still doesn&#39;t seem to remember the new location.</p>\n<p>Introduce some logging statements to see what is happening. We will fix this in the next step.</p>\n",
  "<p>Currently, when you press back from the MapsActivity, any change made in the marker by the user is lost. We need to address this now.</p>\n",
  "07.07.md",
  "# Listening for Marker Drag Events",
  "07",
  "<h2>Listening for Marker Drag Events</h2>\n<p>To get this to work, we need further capabilities in MapsActivity.</p>\n<p>First, implement a new interface:</p>\n<h2>MapsActivity</h2>\n<pre><code>class MapsActivity : AppCompatActivity(), OnMapReadyCallback,  GoogleMap.OnMarkerDragListener {</code></pre>\n<p>This interface requires three methods:</p>\n<pre><code>  override fun onMarkerDragStart(marker: Marker) {\n  }\n\n  override fun onMarkerDrag(marker: Marker) {\n  }\n\n  override fun onMarkerDragEnd(marker: Marker) {\n    location.lat = marker.position.latitude\n    location.lng = marker.position.longitude\n    location.zoom = map.cameraPosition.zoom\n  }</code></pre>\n<p>We are only interested in one of these methods for the moment.</p>\n<p>We need modify the onMapReady method to make sure we are listening for this event:</p>\n<pre><code>  override fun onMapReady(googleMap: GoogleMap) {\n    ...\n    map.setOnMarkerDragListener(this)\n    ...\n  }</code></pre>\n<p>Finally, we need to intercept the back button, and send it back to the parent activity:</p>\n<pre><code>  override fun onBackPressed() {\n    val resultIntent = Intent()\n    resultIntent.putExtra(&quot;location&quot;, location)\n    setResult(Activity.RESULT_OK, resultIntent)\n    finish()\n    super.onBackPressed()\n  }</code></pre>\n<p>Try this now - and verify that if you change the location - and then immediately press back and then renter the map again. The location should be remembered, and the map centred to the new location.</p>\n",
  "<p>To get this to work, we need further capabilities in MapsActivity.</p>\n",
  "08.Exercises.md",
  "<h1>Solution</h1>\n<p>Placemark application so far:</p>\n<ul>\n<li><a href=\"archives/placemark-05.zip\">placemark-05.zip</a></li>\n</ul>\n<p>This archive does not include the Google Maps API keys - so will not build</p>\n<h2>Exercise 1</h2>\n<p>If you create a new placemark - and set it location, note that when you click on the marker it shows its lat/lng. Move it around - and notice that the lat/lng in the panel never changes (even though it is at a different location).</p>\n<p>See if you can fix this - such that it always shows the correct location.</p>\n<p>(HINT: look up <code>GoogleMap.OnMarkerClickListener</code> and <code>setSnippet</code>)</p>\n<h2>Exercise 2</h2>\n<p>When you leave the PlacemarkActiviy, the location is not currently stored in the PlacemarkModel correctly. So when you edit a placemark, it is back at the default location.</p>\n<p>Fix this by making location part of the placemark model, so we can edit and change the locations for existing markers.</p>\n<p>HINT: the simplest way of approach this might be to just extend the model to include three new fields:</p>\n<pre><code>@Parcelize\ndata class PlacemarkModel(var id: Long = 0,\n                          var title: String = &quot;&quot;,\n                          var description: String = &quot;&quot;,\n                          var image: String = &quot;&quot;,\n                          var lat : Double = 0.0,\n                          var lng: Double = 0.0,\n                          var zoom: Float = 0f) : Parcelable</code></pre>\n<p>... and then manage these accordingly.</p>\n",
  "00.Lab-06 JSON.md",
  "<h1>Objectives</h1>\n<p>Save and restore placemarks from a JSON formatted file</p>\n",
  " Exercises",
  "<h1>Exercises</h1>\n<h1>Exercise 1</h1>\n<p>If you create a new placemark - and set it location, note that when you click on the marker it shows its lat/lng. Move it around - and notice that the lat/lng in the panel never changes (even though it is at a different location).</p>\n<p>See if you can fix this - such that it always shows the correct location.</p>\n<p>(HINT: look up <code>GoogleMap.OnMarkerClickListener</code> and <code>setSnippet</code>)</p>\n<h1>Solution</h1>\n<p>Implement OnMarkerClickListener:</p>\n<h2>MapsActivity</h2>\n<pre><code>class MapsActivity : AppCompatActivity(), OnMapReadyCallback,  GoogleMap.OnMarkerDragListener, GoogleMap.OnMarkerClickListener {\n\n\n...\n  override fun onMarkerClick(marker: Marker): Boolean {\n    val loc = LatLng(location.lat, location.lng)\n    marker.setSnippet(&quot;GPS : &quot; + loc.toString())\n    return false\n  }\n...</code></pre>\n<p>We need to make sure we listen for this event:</p>\n<pre><code>  override fun onMapReady(googleMap: GoogleMap) {\n    ...\n    map.setOnMarkerClickListener(this)\n    ...\n  }</code></pre>\n<p>This should work as expected now.</p>\n<h2>Exercise 2</h2>\n<p>When you leave the PlacemarkActiviy, the location is not currently stored in the PlacemarkModel correctly. So when you edit a placemark, it is back at the default location.</p>\n<p>Fix this by making location part of the placemark model, so we can edit and change the locations for existing markers.</p>\n<h1>Solution</h1>\n<p>First, extend the model to include additional fields:</p>\n<h2>PlacemarkModel</h2>\n<pre><code>\n@Parcelize\ndata class PlacemarkModel(var id: Long = 0,\n                          var title: String = &quot;&quot;,\n                          var description: String = &quot;&quot;,\n                          var image: String = &quot;&quot;,\n                          var lat : Double = 0.0,\n                          var lng: Double = 0.0,\n                          var zoom: Float = 0f) : Parcelable</code></pre>\n<p>We are still keeping Location model for use with the MapsActivity</p>\n<p>Make sure these fields are saved when a placemark us updated:</p>\n<h2>PlacemarkMemStore</h2>\n<pre><code>  override fun update(placemark: PlacemarkModel) {\n    var foundPlacemark: PlacemarkModel? = placemarks.find { p -&gt; p.id == placemark.id }\n    if (foundPlacemark != null) {\n      foundPlacemark.title = placemark.title\n      foundPlacemark.description = placemark.description\n      foundPlacemark.image = placemark.image\n      foundPlacemark.lat = placemark.lat\n      foundPlacemark.lng = placemark.lng\n      foundPlacemark.zoom = placemark.zoom\n      logAll();\n    }\n  }</code></pre>\n<p>Then, remove Location from being a class member if PlacemarkActivity:</p>\n<h2>PlacemarkActivity</h2>\n<pre><code> // var location = Location(52.245696, -7.139102, 15f)</code></pre>\n<p>Initialise the location from the placemark object (of zoom is not 0.0. in which case we use a default location)</p>\n<pre><code>   placemarkLocation.setOnClickListener {\n      val location = Location(52.245696, -7.139102, 15f)\n      if (placemark.zoom != 0f) {\n        location.lat =  placemark.lat\n        location.lng = placemark.lng\n        location.zoom = placemark.zoom\n      }\n      startActivityForResult(intentFor&lt;MapsActivity&gt;().putExtra(&quot;location&quot;, location), LOCATION_REQUEST)\n    }</code></pre>\n<p>Finally, make sure we recover and save the location when the maps activity finishes:</p>\n<pre><code>  override fun onActivityResult(requestCode: Int, resultCode: Int, data: Intent?) {\n    super.onActivityResult(requestCode, resultCode, data)\n    when (requestCode) {\n      IMAGE_REQUEST -&gt; {\n        if (data != null) {\n          placemark.image = data.getData().toString()\n          placemarkImage.setImageBitmap(readImage(this, resultCode, data))\n          chooseImage.setText(R.string.change_placemark_image)\n        }\n      }\n      LOCATION_REQUEST -&gt; {\n        if (data != null) {\n          val location = data.extras.getParcelable&lt;Location&gt;(&quot;location&quot;)\n          placemark.lat = location.lat\n          placemark.lng = location.lng\n          placemark.zoom = location.zoom\n        }\n      }\n    }\n  }</code></pre>\n",
  "<h1>Exercise 1</h1>\n",
  " MainApp & PlacemarkListActivity Adjustments",
  "<h1>MainApp &amp; PlacemarkListActivity Adjustments</h1>\n<p>First revise how we create the placemarks store object:</p>\n<h2>MainApp</h2>\n<pre><code>package org.wit.placemark.main\n\nimport android.app.Application\nimport org.jetbrains.anko.AnkoLogger\nimport org.jetbrains.anko.info\nimport org.wit.placemark.models.PlacemarkMemStore\nimport org.wit.placemark.models.PlacemarkStore\n\nclass MainApp : Application(), AnkoLogger {\n\n  lateinit var placemarks: PlacemarkStore\n\n  override fun onCreate() {\n    super.onCreate()\n    placemarks = PlacemarkMemStore()\n    info(&quot;Placemark started&quot;)\n  }\n}</code></pre>\n<p>In the above class we are using a lateinit property. We have seen this before - review some of the motivation behind this property</p>\n<ul>\n<li><a href=\"https://kotlinlang.org/docs/reference/properties.html#late-initialized-properties-and-variables\">https://kotlinlang.org/docs/reference/properties.html#late-initialized-properties-and-variables</a></li>\n</ul>\n<p>We also will revise how we load the placemarks in PlacemarkListActivity.</p>\n<p>First, introduce these new methods:</p>\n<h2>PlacemarkListActivity</h2>\n<pre><code>  private fun loadPlacemarks() {\n    showPlacemarks(app.placemarks.findAll())\n  }\n\n  fun showPlacemarks (placemarks: List&lt;PlacemarkModel&gt;) {\n    recyclerView.adapter = PlacemarkAdapter(placemarks, this)\n    recyclerView.adapter?.notifyDataSetChanged()\n  }</code></pre>\n<p>Change onCreate to call loadPlacemarks()</p>\n<pre><code>  override fun onCreate(savedInstanceState: Bundle?) {\n    super.onCreate(savedInstanceState)\n    setContentView(R.layout.activity_placemark_list)\n    app = application as MainApp\n\n    toolbarMain.title = title\n    setSupportActionBar(toolbarMain)\n\n    val layoutManager = LinearLayoutManager(this)\n    recyclerView.layoutManager = layoutManager\n    loadPlacemarks()\n  }</code></pre>\n<p>Finally, in onActivityResult() we also call loadPlacemarks():</p>\n<pre><code>  override fun onActivityResult(requestCode: Int, resultCode: Int, data: Intent?) {\n    loadPlacemarks()\n    super.onActivityResult(requestCode, resultCode, data)\n  }</code></pre>\n<p>This is the complete class at this stage:</p>\n<h2>PlacemarkListActivity</h2>\n<pre><code>package org.wit.placemark.activities\n\nimport android.content.Intent\nimport android.support.v7.app.AppCompatActivity\nimport android.os.Bundle\nimport android.support.v7.widget.LinearLayoutManager\nimport android.view.*\nimport kotlinx.android.synthetic.main.activity_placemark_list.*\nimport org.jetbrains.anko.intentFor\nimport org.jetbrains.anko.startActivityForResult\nimport org.wit.placemark.R\nimport org.wit.placemark.main.MainApp\nimport org.wit.placemark.models.PlacemarkModel\n\nclass PlacemarkListActivity : AppCompatActivity(), PlacemarkListener {\n\n  lateinit var app: MainApp\n\n  override fun onCreate(savedInstanceState: Bundle?) {\n    super.onCreate(savedInstanceState)\n    setContentView(R.layout.activity_placemark_list)\n    app = application as MainApp\n    toolbarMain.title = title\n    setSupportActionBar(toolbarMain)\n\n    val layoutManager = LinearLayoutManager(this)\n    recyclerView.layoutManager = layoutManager\n    recyclerView.adapter = PlacemarkAdapter(app.placemarks.findAll(), this)\n    loadPlacemarks()\n  }\n\n  private fun loadPlacemarks() {\n    showPlacemarks( app.placemarks.findAll())\n  }\n\n  fun showPlacemarks (placemarks: List&lt;PlacemarkModel&gt;) {\n    recyclerView.adapter = PlacemarkAdapter(placemarks, this)\n    recyclerView.adapter?.notifyDataSetChanged()\n  }\n\n  override fun onCreateOptionsMenu(menu: Menu?): Boolean {\n    menuInflater.inflate(R.menu.menu_main, menu)\n    return super.onCreateOptionsMenu(menu)\n  }\n\n  override fun onOptionsItemSelected(item: MenuItem?): Boolean {\n    when (item?.itemId) {\n      R.id.item_add -&gt; startActivityForResult&lt;PlacemarkActivity&gt;(0)\n    }\n    return super.onOptionsItemSelected(item)\n  }\n\n  override fun onPlacemarkClick(placemark: PlacemarkModel) {\n    startActivityForResult(intentFor&lt;PlacemarkActivity&gt;().putExtra(&quot;placemark_edit&quot;, placemark), 0)\n  }\n\n  override fun onActivityResult(requestCode: Int, resultCode: Int, data: Intent?) {\n    loadPlacemarks()\n    super.onActivityResult(requestCode, resultCode, data)\n  }\n}</code></pre>\n<p>Make sure the app continues to run as expected.</p>\n",
  "<p>First revise how we create the placemarks store object:</p>\n",
  " Persistence",
  "<h1>Persistence</h1>\n<p>Currently our placemarks are transient - when the app is closed the placemarks are lost. We would like to make them persistent - they are retained between app launches.</p>\n<p>There are many strategies for implementing persistence - both local and remote (cloud). We will start with one of the simplest - storing the placemarks in a simple file.</p>\n<p>Before we try this, you should get used to exploring the phones&#39; file system. In Studio, select <code>View-&gt;Tools Windows-&gt;Device File Explorer</code>:</p>\n<p><img src=\"img/03.png\" alt=\"\"></p>\n<p>This reveals the following:</p>\n<p><img src=\"img/04.png\" alt=\"\"></p>\n<p>In this window, navigate to <code>data/data/org.wit.placemark/files</code></p>\n<p><img src=\"img/05.png\" alt=\"\"></p>\n<p>We will be monitoring this directory - as it is the default location for an files you write/read in your app.</p>\n",
  "<p>Currently our placemarks are transient - when the app is closed the placemarks are lost. We would like to make them persistent - they are retained between app launches.</p>\n",
  " FileHelpers",
  "<h1>FileHelpers</h1>\n<p>To keep our file access simple, we introduce some general purpose file helper functions:</p>\n<h2>FileHelpers</h2>\n<pre><code>package org.wit.placemark.helpers\n\nimport android.content.Context\nimport android.util.Log\nimport java.io.*\n\nfun write(context: Context, fileName: String, data: String) {\n  try {\n    val outputStreamWriter = OutputStreamWriter(context.openFileOutput(fileName, Context.MODE_PRIVATE))\n    outputStreamWriter.write(data)\n    outputStreamWriter.close()\n  } catch (e: Exception) {\n    Log.e(&quot;Error: &quot;, &quot;Cannot read file: &quot; + e.toString());\n  }\n}\n\nfun read(context: Context, fileName: String): String {\n  var str = &quot;&quot;\n  try {\n    val inputStream = context.openFileInput(fileName)\n    if (inputStream != null) {\n      val inputStreamReader = InputStreamReader(inputStream)\n      val bufferedReader = BufferedReader(inputStreamReader)\n      val partialStr = StringBuilder()\n      var done = false\n      while (!done) {\n        var line = bufferedReader.readLine()\n        done = (line == null);\n        if (line != null) partialStr.append(line);\n      }\n      inputStream.close()\n      str = partialStr.toString()\n    }\n  } catch (e: FileNotFoundException) {\n    Log.e(&quot;Error: &quot;, &quot;file not found: &quot; + e.toString());\n  } catch (e: IOException) {\n    Log.e(&quot;Error: &quot;, &quot;cannot read file: &quot; + e.toString());\n  }\n  return str\n}\n\nfun exists(context: Context, filename: String): Boolean {\n  val file = context.getFileStreamPath(filename)\n  return file.exists()\n}</code></pre>\n<p>Place this in the existing helpers package.</p>\n<p>These functions are using the standard java.io streams facilities. However, they all require an additional paramater of type <code>context</code>, and this is used when opening the file. This context will be unique to each application - and we must make sure to acquire and use it when deailing with file I/O.</p>\n",
  "<p>To keep our file access simple, we introduce some general purpose file helper functions:</p>\n",
  " PlacemarkJSONStore",
  "<h1>PlacemarkJSONStore</h1>\n<p>The Json file format is one of the most ubiquitous and easily understood file formats:</p>\n<ul>\n<li><a href=\"http://www.json.org/\">http://www.json.org/</a></li>\n</ul>\n<p>Google has a popular library for converting Java objects to/from Json:</p>\n<ul>\n<li><a href=\"https://github.com/google/gson\">https://github.com/google/gson</a></li>\n</ul>\n<p>We will use this library to convert our placemarks.</p>\n<p>First, introduce the library as part of the build:</p>\n<h2>build.gradle</h2>\n<pre><code>  implementation &quot;com.google.code.gson:gson:2.8.5&quot;</code></pre>\n<p>We can now bring in another implementation of our PlacemarkStore abstraction:</p>\n<h2>PlacemarkJSONStore</h2>\n<pre><code>package org.wit.placemark.models\n\nimport android.content.Context\nimport com.google.gson.Gson\nimport com.google.gson.GsonBuilder\nimport com.google.gson.reflect.TypeToken\nimport org.jetbrains.anko.AnkoLogger\nimport org.wit.placemark.helpers.*\nimport java.util.*\n\nval JSON_FILE = &quot;placemarks.json&quot;\nval gsonBuilder = GsonBuilder().setPrettyPrinting().create()\nval listType = object : TypeToken&lt;java.util.ArrayList&lt;PlacemarkModel&gt;&gt;() {}.type\n\nfun generateRandomId(): Long {\n  return Random().nextLong()\n}\n\nclass PlacemarkJSONStore : PlacemarkStore, AnkoLogger {\n\n  val context: Context\n  var placemarks = mutableListOf&lt;PlacemarkModel&gt;()\n\n  constructor (context: Context) {\n    this.context = context\n    if (exists(context, JSON_FILE)) {\n      deserialize()\n    }\n  }\n\n  override fun findAll(): MutableList&lt;PlacemarkModel&gt; {\n    return placemarks\n  }\n\n  override fun create(placemark: PlacemarkModel) {\n    placemark.id = generateRandomId()\n    placemarks.add(placemark)\n    serialize()\n  }\n\n\n  override fun update(placemark: PlacemarkModel) {\n    // todo\n  }\n\n  private fun serialize() {\n    val jsonString = gsonBuilder.toJson(placemarks, listType)\n    write(context, JSON_FILE, jsonString)\n  }\n\n  private fun deserialize() {\n    val jsonString = read(context, JSON_FILE)\n    placemarks = Gson().fromJson(jsonString, listType)\n  }\n}</code></pre>\n<p>Read this class and see if you can follow the implementation. These are a set of one off declarations:</p>\n<pre><code>val JSON_FILE = &quot;placemarks.json&quot;\nval gsonBuilder = GsonBuilder().setPrettyPrinting().create()\nval listType = object : TypeToken&lt;java.util.ArrayList&lt;PlacemarkModel&gt;&gt;() {}.type</code></pre>\n<p>These are used in the implementations. These describe the filename, a utility to serialize a java class (pretty printing it) and an object to help in converting a JSON string to a java collection (recognising PlacemarkModels along the way)</p>\n",
  "<p>The Json file format is one of the most ubiquitous and easily understood file formats:</p>\n",
  "# MainApp",
  "<h2>MainApp</h2>\n<p>To use the new store, we just need to switch it in the application object:</p>\n<pre><code>package org.wit.placemark.main\n\nimport android.app.Application\nimport org.jetbrains.anko.AnkoLogger\nimport org.jetbrains.anko.info\nimport org.wit.placemark.models.PlacemarkJSONStore\nimport org.wit.placemark.models.PlacemarkMemStore\nimport org.wit.placemark.models.PlacemarkStore\n\nclass MainApp : Application(), AnkoLogger {\n\n  lateinit var placemarks: PlacemarkStore\n\n  override fun onCreate() {\n    super.onCreate()\n    placemarks = PlacemarkJSONStore(applicationContext)\n    info(&quot;Placemark started&quot;)\n  }\n}</code></pre>\n<p>No other changes should be neccesssary.</p>\n<p>Run the app now - and verify that you can create placemarks. Terminate the app, and see if the placemarks are still there when you relaunch the app.</p>\n<p>Delete the app from the phone, and verify that there are no placemarks when you install and run it again.</p>\n<p>Finally, locate the actual file in the Device File Explorer:</p>\n<p><img src=\"img/06.png\" alt=\"\"></p>\n",
  "<p>To use the new store, we just need to switch it in the application object:</p>\n",
  "# Solution",
  "<h2>Solution</h2>\n<p>Placemark application so far:</p>\n<ul>\n<li><a href=\"archives/placemark-06.zip\">placemark-06.zip</a></li>\n</ul>\n<h2>Exercise 1: Switching Stores</h2>\n<p>Change back to using the PlacemarkMemStore instead of PlacemarkStoreRoom. The only change you need to make should be in MainApp.</p>\n<p>Try some experiments to make sure the persistence is working as expected:</p>\n<ul>\n<li>Using MemStore - create some placemarks and then kill the app. Relaunch, and verify that all placemarks are gone</li>\n<li>Using RoomStore - try the same experiment. This time the placemarks should persist between application terminations.</li>\n</ul>\n<h2>Exercise 2: PlacemarkJSONStore update method</h2>\n<p>Complete the implementation of the update method in the PlacemarkJSONStore class. Use the corresponding method in PlacemarkMemStore as a guide (and don&#39;t forget to save changes to the file).</p>\n<h2>Exercise 3</h2>\n<p>Currently we have no way of deleting placemarks. To support delete, you will need to extend the PlacemarkStore to support removal of placemarks, and then implement this in PlacemarkMemStore and PlacemarkJSONStore These are the implementations you will need:</p>\n<h2>PlacemarkStore</h2>\n<pre><code>  fun delete(placemark: PlacemarkModel)</code></pre>\n<p>Introduce this to PlacemarkStore now - and write implementations in <code>PlacemarkMemStore</code> and <code>PlacemarkJSONStore</code> classes :</p>\n<h2>PlacemarkMemStore</h2>\n<pre><code>  override fun delete(placemark: PlacemarkModel) {\n    placemarks.remove(placemark)\n  }</code></pre>\n<h2>PlacemaekJSONStore</h2>\n<pre><code>  override fun delete(placemark: PlacemarkModel) {\n    placemarks.remove(placemark)\n    serialize()\n  }</code></pre>\n<p>To trigger the actual deletion introduce a new <code>delete</code> button alongside the <code>cancel</code> button on the PlacemarkActivity. Pressing this button should trigger the delete method.</p>\n",
  "00.Lab-07 MapView.md",
  "<h1>Objectives</h1>\n<p>Display all placemarks on a map in a new activity</p>\n",
  "<h1>Exercises</h1>\n<h2>Exercise 1</h2>\n<p>Change back to using the PlacemarkMemStore instead of PlacemarkJSONStore. The only change you need to make should be in MainApp.</p>\n<p>Try some experiments to make sure the persistence is working as expected:</p>\n<ul>\n<li>Using MemStore - create some placemarks and then kill the app. Relaunch, and verify that all placemarks are gone</li>\n<li>Using JsonStore - try the same experiment. This time the placemarks should persist between application terminations.</li>\n</ul>\n<h3>Exercise 1 Solution</h3>\n<p>To switch between the database and memory stores - it should be just a matter of commenting out one of the placemarks declarations:</p>\n<h3>Using Json</h3>\n<pre><code>   // placemarks = PlacemarkMemStore()\n    placemarks = PlacemarkJSONStore(applicationContext)</code></pre>\n<h3>Using memory:</h3>\n<pre><code>    placemarks = PlacemarkMemStore()\n    // placemarks = PlacemarkJSONStore(applicationContext)</code></pre>\n<h2>Exercise 2: PlacemarkJSONStore update method</h2>\n<p>Complete the implementation of the update method in the PlacemarkJSONStore class. Use the corresponding method in PlacemarkMemStore as a guide (and dont forget to save changes to the file).</p>\n<h2>Exercise 2 Solution:</h2>\n<h2>PlacemarkJSONStore</h2>\n<pre><code>  override fun update(placemark: PlacemarkModel) {\n    val placemarksList = findAll() as ArrayList&lt;PlacemarkModel&gt;\n    var foundPlacemark: PlacemarkModel? = placemarksList.find { p -&gt; p.id == placemark.id }\n    if (foundPlacemark != null) {\n      foundPlacemark.title = placemark.title\n      foundPlacemark.description = placemark.description\n      foundPlacemark.image = placemark.image\n      foundPlacemark.lat = placemark.lat\n      foundPlacemark.lng = placemark.lng\n      foundPlacemark.zoom = placemark.zoom\n    }\n    serialize()\n  }</code></pre>\n<h2>Exercise 3</h2>\n<p>Currently we have no way of deleting placemarks. To support delete, you will need to extend the PlacemarkStore to support removal of placemarks, and then implement this in PlacemarkMemStore and PlacemarkJSONStore These are the implementations you will need:</p>\n<h2>PlacemarkStore</h2>\n<pre><code>  fun delete(placemark: PlacemarkModel)</code></pre>\n<p>Introduce this to PlacemarkStore now - and write implementations in <code>PlacemarkMemStore</code> and <code>PlacemarkJSONStore</code> classes :</p>\n<h2>PlacemarkMemStore</h2>\n<pre><code>  override fun delete(placemark: PlacemarkModel) {\n    placemarks.remove(placemark)\n  }</code></pre>\n<h2>PlacemaekJSONStore</h2>\n<pre><code>  override fun delete(placemark: PlacemarkModel) {\n    placemarks.remove(placemark)\n    serialize()\n  }</code></pre>\n<p>To trigger the actual deletion introduce a new <code>delete</code> button alongside the <code>cancel</code> button on the PlacemarkActivity. Pressing this button should trigger the delete method.</p>\n<h2>Exercise 3 Solution</h2>\n<p>Make the above change to the model classes. Then, introduce the delete string resource + button:</p>\n<h2>strings.xml</h2>\n<pre><code>  &lt;string name=&quot;menu_deletePlacemark&quot;&gt;Delete&lt;/string&gt;</code></pre>\n<h2>menu_placemark.xml</h2>\n<pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;\n&lt;menu xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;\n  xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot;&gt;\n\n  &lt;item\n    android:id=&quot;@+id/item_delete&quot;\n    android:title=&quot;@string/menu_deletePlacemark&quot;\n    app:showAsAction=&quot;always&quot;/&gt;\n  &lt;item\n    android:id=&quot;@+id/item_cancel&quot;\n    android:title=&quot;@string/menu_cancelPlacemark&quot;\n    app:showAsAction=&quot;always&quot;/&gt;\n&lt;/menu&gt;</code></pre>\n<p>The menu event handler can then be extended to trigger delete:</p>\n<h2>PlacemarkActivity</h2>\n<pre><code>  override fun onOptionsItemSelected(item: MenuItem?): Boolean {\n    when (item?.itemId) {\n      R.id.item_delete -&gt; {\n        app.placemarks.delete(placemark)\n        finish()\n      }\n      R.id.item_cancel -&gt; {\n        finish()\n      }\n    }\n    return super.onOptionsItemSelected(item)\n  }</code></pre>\n<p>Try this now and verify that to works as expected.</p>\n<p>Finally - notice that the delete button is always visible - even if we are creating a new placemark (cancel is sufficient in this circumstance).</p>\n<p>To make the appearance of the button conditional, make the following changes:</p>\n<p>First, make the delete option invisible by default:</p>\n<pre><code>  &lt;item\n    android:visible=&quot;false&quot;\n    android:id=&quot;@+id/item_delete&quot;\n    android:title=&quot;@string/menu_deletePlacemark&quot;\n    app:showAsAction=&quot;always&quot;/&gt;</code></pre>\n<p>Make the edit flag in PlacemarkActivity  a class member, not a local variable:</p>\n<h2>PlacemarkActivity</h2>\n<pre><code>class PlacemarkActivity : AppCompatActivity(), AnkoLogger {\n  //\n  var edit = false;\n\n\n  ...\n   override fun onCreate(savedInstanceState: Bundle?) {\n     ...\n        edit = true\n     ...</code></pre>\n<p>Then, we check this flag when inflating the menu, and display delete if we are in edit mode:</p>\n<pre><code>  override fun onCreateOptionsMenu(menu: Menu?): Boolean {\n    menuInflater.inflate(R.menu.menu_placemark, menu)\n    if (edit &amp;&amp; menu != null) menu.getItem(0).setVisible(true)\n    return super.onCreateOptionsMenu(menu)\n  }</code></pre>\n<p>Try this now.</p>\n",
  " PlacemarkMapsActivity",
  "<h1>PlacemarkMapsActivity</h1>\n<p>We would like a new activity to show all placemarks in our collection. This should be activated by a new menu option.</p>\n<h2>Menu</h2>\n<p>Create a new menu option in the <code>main_menu.xml</code>:</p>\n<h2>res/menu/menu_main.xml</h2>\n<pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;\n&lt;menu xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;\n      xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot;&gt;\n\n  &lt;item\n    android:id=&quot;@+id/item_add&quot;\n    android:icon=&quot;@android:drawable/ic_menu_add&quot;\n    android:title=&quot;@string/menu_addPlacemark&quot;\n    app:showAsAction=&quot;always&quot;/&gt;\n\n  &lt;item\n      android:id=&quot;@+id/item_map&quot;\n      android:icon=&quot;@android:drawable/ic_menu_mapmode&quot;\n      android:title=&quot;@string/menu_addPlacemark&quot;\n      app:showAsAction=&quot;always&quot;/&gt;\n&lt;/menu&gt;</code></pre>\n<p>We have just duplicated the add item - and given it the id <code>item_map</code> and the icon <code>ic_menu_mapmode</code>. It should look like this in the layout editor:</p>\n<p><img src=\"img/02.png\" alt=\"\"></p>\n<h2>PlacemarkMapsActivity</h2>\n<p>Now use the wizard in Android to generate a new <code>Basic</code> activity call PlacemarkMapsActivity</p>\n<p><img src=\"img/01.png\" alt=\"\"></p>\n<p>Accepting the defaults as shown above - your application will have the following class automatically generated by the wizard:</p>\n<pre><code>package org.wit.placemark.activities\n\nimport android.os.Bundle\nimport android.support.design.widget.Snackbar\nimport android.support.v7.app.AppCompatActivity\nimport org.wit.placemark.R\n\nimport kotlinx.android.synthetic.main.activity_placemark_maps.*\n\nclass PlacemarkMapsActivity : AppCompatActivity() {\n\n  override fun onCreate(savedInstanceState: Bundle?) {\n    super.onCreate(savedInstanceState)\n    setContentView(R.layout.activity_placemark_maps)\n    setSupportActionBar(toolbar)\n\n    fab.setOnClickListener { view -&gt;\n      Snackbar.make(view, &quot;Replace with your own action&quot;, Snackbar.LENGTH_LONG)\n          .setAction(&quot;Action&quot;, null).show()\n    }\n  }\n\n}</code></pre>\n<h2>res/layout/activity_placemark_maps.xml</h2>\n<pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;\n&lt;android.support.design.widget.CoordinatorLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;\n  xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot;\n  xmlns:tools=&quot;http://schemas.android.com/tools&quot;\n  android:layout_width=&quot;match_parent&quot;\n  android:layout_height=&quot;match_parent&quot;\n  tools:context=&quot;org.wit.placemark.activities.PlacemarkMapsActivity&quot;&gt;\n\n  &lt;android.support.design.widget.AppBarLayout\n    android:layout_width=&quot;match_parent&quot;\n    android:layout_height=&quot;wrap_content&quot;\n    android:theme=&quot;@style/AppTheme.AppBarOverlay&quot;&gt;\n\n    &lt;android.support.v7.widget.Toolbar\n      android:id=&quot;@+id/toolbar&quot;\n      android:layout_width=&quot;match_parent&quot;\n      android:layout_height=&quot;?attr/actionBarSize&quot;\n      android:background=&quot;?attr/colorPrimary&quot;\n      app:popupTheme=&quot;@style/AppTheme.PopupOverlay&quot; /&gt;\n\n  &lt;/android.support.design.widget.AppBarLayout&gt;\n\n  &lt;include layout=&quot;@layout/content_placemark_maps&quot; /&gt;\n\n  &lt;android.support.design.widget.FloatingActionButton\n    android:id=&quot;@+id/fab&quot;\n    android:layout_width=&quot;wrap_content&quot;\n    android:layout_height=&quot;wrap_content&quot;\n    android:layout_gravity=&quot;bottom|end&quot;\n    android:layout_margin=&quot;@dimen/fab_margin&quot;\n    app:srcCompat=&quot;@android:drawable/ic_dialog_email&quot; /&gt;\n\n&lt;/android.support.design.widget.CoordinatorLayout&gt;</code></pre>\n<h2>res/layout/content_placemark_maps.xml</h2>\n<pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;\n&lt;android.support.constraint.ConstraintLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;\n  xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot;\n  xmlns:tools=&quot;http://schemas.android.com/tools&quot;\n  android:layout_width=&quot;match_parent&quot;\n  android:layout_height=&quot;match_parent&quot;\n  app:layout_behavior=&quot;@string/appbar_scrolling_view_behavior&quot;\n  tools:context=&quot;org.wit.placemark.activities.PlacemarkMapsActivity&quot;\n  tools:showIn=&quot;@layout/activity_placemark_maps&quot;&gt;\n\n&lt;/android.support.constraint.ConstraintLayout&gt;</code></pre>\n<h2>res/values/strings</h2>\n<pre><code>  &lt;string name=&quot;title_activity_placemark_maps&quot;&gt;PlacemarkMapsActivity&lt;/string&gt;</code></pre>\n<h2>AndroidManifest.xml</h2>\n<pre><code>    &lt;activity\n      android:name=&quot;.activities.PlacemarkMapsActivity&quot;\n      android:label=&quot;@string/title_activity_placemark_maps&quot;\n      android:theme=&quot;@style/AppTheme&quot;&gt;&lt;/activity&gt;</code></pre>\n<h2>res/values/styles.xml</h2>\n<pre><code>  &lt;style name=&quot;AppTheme.AppBarOverlay&quot; parent=&quot;ThemeOverlay.AppCompat.Dark.ActionBar&quot; /&gt;\n\n  &lt;style name=&quot;AppTheme.PopupOverlay&quot; parent=&quot;ThemeOverlay.AppCompat.Light&quot; /&gt;</code></pre>\n<h2>res/values/dimens.xml</h2>\n<pre><code>&lt;resources&gt;\n  &lt;dimen name=&quot;fab_margin&quot;&gt;16dp&lt;/dimen&gt;\n&lt;/resources&gt;</code></pre>\n<p>Inspect all of these additions - and make suer you have a good idea of the role and purpose of each.</p>\n<p><img src=\"img/03.png\" alt=\"\"></p>\n<p>In PlacemarkListActivity - we can extend the existing menu handler to now also launch this new activity:</p>\n<h2>PlacemarkListActivity</h2>\n<pre><code>  override fun onOptionsItemSelected(item: MenuItem?): Boolean {\n    when (item?.itemId) {\n      R.id.item_add -&gt; startActivityForResult&lt;PlacemarkActivity&gt;(200)\n      R.id.item_map -&gt; startActivity&lt;PlacemarkMapsActivity&gt;()\n    }\n    return super.onOptionsItemSelected(item)\n  }</code></pre>\n<p>When the new menu is selected - you will get a (blank) new activity:</p>\n<p><img src=\"img/04.png\" alt=\"\"></p>\n",
  "<p>We would like a new activity to show all placemarks in our collection. This should be activated by a new menu option.</p>\n",
  " Simplify PlacemarkMapsActivity",
  "<h1>Simplify PlacemarkMapsActivity</h1>\n<p>The wizards in Studio often generate additional options and code that is not really appropriate depending on the app you are building.</p>\n<p>Modify the layout to have an app bar similar to the other activities:</p>\n<h2>activity_placemark_maps.xml</h2>\n<pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;\n&lt;android.support.design.widget.CoordinatorLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;\n  xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot;\n  xmlns:tools=&quot;http://schemas.android.com/tools&quot;\n  android:layout_width=&quot;match_parent&quot;\n  android:layout_height=&quot;match_parent&quot;\n  tools:context=&quot;org.wit.placemark.activities.PlacemarkMapsActivity&quot;&gt;\n\n  &lt;android.support.design.widget.AppBarLayout\n    android:layout_width=&quot;match_parent&quot;\n    android:layout_height=&quot;wrap_content&quot;\n    android:background=&quot;@color/colorAccent&quot;\n    android:fitsSystemWindows=&quot;true&quot;\n    app:elevation=&quot;0dip&quot;\n    app:theme=&quot;@style/ThemeOverlay.AppCompat.Dark.ActionBar&quot;&gt;\n\n    &lt;android.support.v7.widget.Toolbar\n      android:id=&quot;@+id/toolbarMaps&quot;\n      android:layout_width=&quot;match_parent&quot;\n      android:layout_height=&quot;wrap_content&quot;\n      app:titleTextColor=&quot;@color/colorPrimary&quot;/&gt;\n\n  &lt;/android.support.design.widget.AppBarLayout&gt;\n\n  &lt;include layout=&quot;@layout/content_placemark_maps&quot; /&gt;\n\n&lt;/android.support.design.widget.CoordinatorLayout&gt;</code></pre>\n<p>Simplify PlacemarkMapsActivity now to the following:</p>\n<h2>PlacemarkMapsActivity</h2>\n<pre><code>package org.wit.placemark.activities\n\nimport android.os.Bundle\nimport android.support.v7.app.AppCompatActivity\nimport org.wit.placemark.R\nimport kotlinx.android.synthetic.main.activity_placemark_maps.*\n\nclass PlacemarkMapsActivity : AppCompatActivity() {\n\n  override fun onCreate(savedInstanceState: Bundle?) {\n    super.onCreate(savedInstanceState)\n    setContentView(R.layout.activity_placemark_maps)\n    setSupportActionBar(toolbarMaps)\n  }\n}</code></pre>\n<p>Finally, change the generated title:</p>\n<h2>res/values/strings.xml</h2>\n<pre><code>  &lt;string name=&quot;title_activity_placemark_maps&quot;&gt;Map of All Placemarks &lt;/string&gt;</code></pre>\n<p>Our new view will be a single map showing all of the placemarks we have set. We develop this in the next steps.</p>\n",
  "<p>The wizards in Studio often generate additional options and code that is not really appropriate depending on the app you are building.</p>\n",
  " content_placemark_maps",
  "<h1>content_placemark_maps</h1>\n<p>Notice that the wizard generated 2 layouts:</p>\n<ul>\n<li>activity_placemark_maps.xml</li>\n<li>content_placemark_maps</li>\n</ul>\n<p>The latter is a blank canvas - based on the ConstraintLayout - which we will now use to design our view.</p>\n<p><img src=\"img/05.png\" alt=\"\"></p>\n<p>First - drag and drop a <code>CardView</code> component onto the canvas:</p>\n<p><img src=\"img/06.png\" alt=\"\"></p>\n<p>Then resize it something like this:</p>\n<p><img src=\"img/07.png\" alt=\"\"></p>\n<p>Then anchor three of its sides to the edge of the view:</p>\n<p><img src=\"img/08.png\" alt=\"\"></p>\n<p>You do this by selecting each of the circle anchor points and then clicking on the appropriate edge.</p>\n<p>Now drag a MapView onto the canvas - and do the same anchoring procedure:</p>\n<p><img src=\"img/09.png\" alt=\"\"></p>\n<p>Be sure to attach the bottom of the Map to the top of the Card:</p>\n<p><img src=\"img/11.png\" alt=\"\"></p>\n<p>Run the app now - you should see something like this:</p>\n<p><img src=\"img/10.png\" alt=\"\"></p>\n<p>This is the layout at this stage:</p>\n<h2>res/content_placemark_maps.xml</h2>\n<pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;\n&lt;android.support.constraint.ConstraintLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;\n  xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot;\n  xmlns:tools=&quot;http://schemas.android.com/tools&quot;\n  android:layout_width=&quot;match_parent&quot;\n  android:layout_height=&quot;match_parent&quot;\n  app:layout_behavior=&quot;@string/appbar_scrolling_view_behavior&quot;\n  tools:context=&quot;org.wit.placemark.activities.PlacemarkMapsActivity&quot;\n  tools:showIn=&quot;@layout/activity_placemark_maps&quot;&gt;\n\n  &lt;android.support.v7.widget.CardView\n    android:id=&quot;@+id/cardView&quot;\n    android:layout_width=&quot;353dp&quot;\n    android:layout_height=&quot;114dp&quot;\n    android:layout_marginBottom=&quot;16dp&quot;\n    android:layout_marginEnd=&quot;8dp&quot;\n    android:layout_marginStart=&quot;8dp&quot;\n    app:layout_constraintBottom_toBottomOf=&quot;parent&quot;\n    app:layout_constraintEnd_toEndOf=&quot;parent&quot;\n    app:layout_constraintHorizontal_bias=&quot;0.533&quot;\n    app:layout_constraintStart_toStartOf=&quot;parent&quot; /&gt;\n\n  &lt;com.google.android.gms.maps.MapView\n    android:id=&quot;@+id/mapView&quot;\n    android:layout_width=&quot;352dp&quot;\n    android:layout_height=&quot;348dp&quot;\n    android:layout_marginBottom=&quot;8dp&quot;\n    android:layout_marginEnd=&quot;8dp&quot;\n    android:layout_marginStart=&quot;8dp&quot;\n    android:layout_marginTop=&quot;8dp&quot;\n    app:layout_constraintBottom_toTopOf=&quot;@+id/cardView&quot;\n    app:layout_constraintEnd_toEndOf=&quot;parent&quot;\n    app:layout_constraintStart_toStartOf=&quot;parent&quot;\n    app:layout_constraintTop_toTopOf=&quot;parent&quot; /&gt;\n&lt;/android.support.constraint.ConstraintLayout&gt;</code></pre>\n<p>Now we can bring in a new attribute into the PlacemarkMapsActivity for the map object we just introduced:</p>\n<h2>PlacemarkMapsActivity</h2>\n<pre><code>package org.wit.placemark.activities\n\nimport android.os.Bundle\nimport android.support.v7.app.AppCompatActivity\nimport com.google.android.gms.maps.GoogleMap\nimport org.wit.placemark.R\nimport kotlinx.android.synthetic.main.activity_placemark_maps.*\nimport kotlinx.android.synthetic.main.content_placemark_maps.*\n\nclass PlacemarkMapsActivity : AppCompatActivity() {\n\n  lateinit var map: GoogleMap\n\n  override fun onCreate(savedInstanceState: Bundle?) {\n    super.onCreate(savedInstanceState)\n    setContentView(R.layout.activity_placemark_maps)\n    setSupportActionBar(toolbarMaps)\n    mapView.onCreate(savedInstanceState);\n  }\n}</code></pre>\n<p>Notice we are calling <code>mapView.onCreate</code>. This should now display the (empty) map:</p>\n<p><img src=\"img/12.png\" alt=\"\"></p>\n<p>To make the map actually render correctly - we need to rework the class so that we are passing the lifecycle events on to the map from PlacemarkMapsActivity:</p>\n<h2>PlacemarkMapsActivity</h2>\n<pre><code>package org.wit.placemark.activities\n\nimport android.os.Bundle\nimport android.support.v7.app.AppCompatActivity\nimport com.google.android.gms.maps.GoogleMap\nimport org.wit.placemark.R\nimport kotlinx.android.synthetic.main.activity_placemark_maps.*\nimport kotlinx.android.synthetic.main.content_placemark_maps.*\n\nclass PlacemarkMapsActivity : AppCompatActivity() {\n\n  lateinit var map: GoogleMap\n\n  override fun onCreate(savedInstanceState: Bundle?) {\n    super.onCreate(savedInstanceState)\n    setContentView(R.layout.activity_placemark_maps)\n    setSupportActionBar(toolbarMaps)\n    mapView.onCreate(savedInstanceState);\n  }\n\n  override fun onDestroy() {\n    super.onDestroy()\n    mapView.onDestroy()\n  }\n\n  override fun onLowMemory() {\n    super.onLowMemory()\n    mapView.onLowMemory()\n  }\n\n  override fun onPause() {\n    super.onPause()\n    mapView.onPause()\n  }\n\n  override fun onResume() {\n    super.onResume()\n    mapView.onResume()\n  }\n\n  override fun onSaveInstanceState(outState: Bundle?) {\n    super.onSaveInstanceState(outState)\n    mapView.onSaveInstanceState(outState)\n  }\n}</code></pre>\n<p>The map should now display correctly:</p>\n<p><img src=\"img/13.png\" alt=\"\"></p>\n",
  "<p>Notice that the wizard generated 2 layouts:</p>\n",
  " Markers",
  "<h1>Markers</h1>\n<p>Currently our new view looks like this:</p>\n<p><img src=\"img/14.png\" alt=\"\"></p>\n<p>We can start to configure the map but introducing a new method to for this purpose:</p>\n<h2>PlacemarkMapsActivity</h2>\n<pre><code>  fun configureMap() {\n    map.uiSettings.setZoomControlsEnabled(true)\n  }</code></pre>\n<p>To call this method, we need to first initialize the map object - and then call configureMap()</p>\n<h2>PlacemarkMapsActivity</h2>\n<pre><code>  override fun onCreate(savedInstanceState: Bundle?) {\n    super.onCreate(savedInstanceState)\n    setContentView(R.layout.activity_placemark_maps)\n    setSupportActionBar(toolbarMaps)\n    mapView.onCreate(savedInstanceState);\n    mapView.getMapAsync {\n      map = it\n      configureMap()\n    }\n  }</code></pre>\n<p>Note carefully the last three lines above - we are asking the MapView for the actual googleMap object (called <code>it</code> in this shorthand above). We then store <code>it</code> in the <code>map</code> property of the class.</p>\n<p>Running the app - you should see new zoom controls:</p>\n<p><img src=\"img/14.png\" alt=\"\"></p>\n<p>Now bring in a reference to the <code>MainApp</code> object into the class</p>\n<h2>PlacemarkMapsActivity</h2>\n<pre><code>class PlacemarkMapsActivity : AppCompatActivity() {\n  ...\n  lateinit var app: MainApp\n\n  override fun onCreate(savedInstanceState: Bundle?) {\n    ...\n    app = application as MainApp\n    ...\n  }</code></pre>\n<p>Notice it is also initialize above in the usual manner.</p>\n<p>Now rework condigureMap to iterate through all of the placemarks (fetched from the store) and add a marker at the location of each of them.</p>\n<pre><code>  fun configureMap() {\n    map.uiSettings.setZoomControlsEnabled(true)\n    app.placemarks.findAll().forEach {\n      val loc = LatLng(it.lat, it.lng)\n      val options = MarkerOptions().title(it.title).position(loc)\n      map.addMarker(options).tag = it.id\n    }\n  }</code></pre>\n<p>Run the app now and create a few placemarks in different locations. Then display this activity - we expect to see markers in the correct locations (we may need to zoom in to see them).</p>\n<p>If we add the following to the loop:</p>\n<pre><code>        map.moveCamera(CameraUpdateFactory.newLatLngZoom(loc, it.zoom))</code></pre>\n<p>Then the app should zoom in to the last placemark:</p>\n<p><img src=\"img/18.png\" alt=\"\"></p>\n<p>This is the complete configureMap method at this stage:</p>\n<pre><code>  fun configureMap() {\n    map.uiSettings.setZoomControlsEnabled(true)\n    app.placemarks.findAll().forEach {\n      val loc = LatLng(it.lat, it.lng)\n      val options = MarkerOptions().title(it.title).position(loc)\n      map.addMarker(options).tag = it.id\n      map.moveCamera(CameraUpdateFactory.newLatLngZoom(loc, it.zoom))\n    }\n  }</code></pre>\n",
  "<p>Currently our new view looks like this:</p>\n",
  " CardView",
  "<h1>CardView</h1>\n<p>We already have a CardView in place. We now start to work inside it. First, install a ConstraintLayout inside the Card:</p>\n<p><img src=\"img/19.png\" alt=\"\"></p>\n<p>Then, insert an ImageView:</p>\n<p><img src=\"img/20.png\" alt=\"\"></p>\n<p>and 2 TextViews into the card:</p>\n<p><img src=\"img/21.png\" alt=\"\"></p>\n<p>Call the TextViews <code>currentTitle</code> and <code>currentDescription</code> respectively.</p>\n<p>Anchor them as shown below:</p>\n<p><img src=\"img/22.png\" alt=\"\"></p>\n<p>This is the complete layout at this stage:</p>\n<pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;\n&lt;android.support.constraint.ConstraintLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;\n  xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot;\n  xmlns:tools=&quot;http://schemas.android.com/tools&quot;\n  android:layout_width=&quot;match_parent&quot;\n  android:layout_height=&quot;match_parent&quot;\n  app:layout_behavior=&quot;@string/appbar_scrolling_view_behavior&quot;\n  tools:context=&quot;org.wit.placemark.activities.PlacemarkMapsActivity&quot;\n  tools:showIn=&quot;@layout/activity_placemark_maps&quot;&gt;\n\n  &lt;android.support.v7.widget.CardView\n    android:id=&quot;@+id/cardView&quot;\n    android:layout_width=&quot;353dp&quot;\n    android:layout_height=&quot;114dp&quot;\n    android:layout_marginBottom=&quot;16dp&quot;\n    android:layout_marginEnd=&quot;8dp&quot;\n    android:layout_marginStart=&quot;8dp&quot;\n    app:layout_constraintBottom_toBottomOf=&quot;parent&quot;\n    app:layout_constraintEnd_toEndOf=&quot;parent&quot;\n    app:layout_constraintHorizontal_bias=&quot;0.533&quot;\n    app:layout_constraintStart_toStartOf=&quot;parent&quot; &gt;\n\n    &lt;android.support.constraint.ConstraintLayout\n      android:layout_width=&quot;match_parent&quot;\n      android:layout_height=&quot;match_parent&quot;&gt;\n\n      &lt;TextView\n        android:id=&quot;@+id/currentTitle&quot;\n        android:layout_width=&quot;135dp&quot;\n        android:layout_height=&quot;25dp&quot;\n        android:layout_marginEnd=&quot;8dp&quot;\n        android:layout_marginStart=&quot;8dp&quot;\n        android:layout_marginTop=&quot;20dp&quot;\n        app:layout_constraintEnd_toStartOf=&quot;@+id/imageView&quot;\n        app:layout_constraintHorizontal_bias=&quot;0.35&quot;\n        app:layout_constraintStart_toStartOf=&quot;parent&quot;\n        app:layout_constraintTop_toTopOf=&quot;parent&quot; /&gt;\n\n      &lt;TextView\n        android:id=&quot;@+id/currentDescription&quot;\n        android:layout_width=&quot;135dp&quot;\n        android:layout_height=&quot;25dp&quot;\n        android:layout_marginBottom=&quot;8dp&quot;\n        android:layout_marginEnd=&quot;8dp&quot;\n        android:layout_marginStart=&quot;8dp&quot;\n        android:layout_marginTop=&quot;8dp&quot;\n        app:layout_constraintBottom_toBottomOf=&quot;parent&quot;\n        app:layout_constraintEnd_toStartOf=&quot;@+id/imageView&quot;\n        app:layout_constraintHorizontal_bias=&quot;0.35&quot;\n        app:layout_constraintStart_toStartOf=&quot;parent&quot;\n        app:layout_constraintTop_toBottomOf=&quot;@+id/currentTitle&quot;\n        app:layout_constraintVertical_bias=&quot;0.425&quot; /&gt;\n\n      &lt;ImageView\n        android:id=&quot;@+id/imageView&quot;\n        android:layout_width=&quot;134dp&quot;\n        android:layout_height=&quot;70dp&quot;\n        android:layout_marginBottom=&quot;8dp&quot;\n        android:layout_marginEnd=&quot;8dp&quot;\n        android:layout_marginTop=&quot;8dp&quot;\n        app:layout_constraintBottom_toBottomOf=&quot;parent&quot;\n        app:layout_constraintEnd_toEndOf=&quot;parent&quot;\n        app:layout_constraintTop_toTopOf=&quot;parent&quot;\n        app:srcCompat=&quot;@drawable/ic_launcher_background&quot; /&gt;\n    &lt;/android.support.constraint.ConstraintLayout&gt;\n  &lt;/android.support.v7.widget.CardView&gt;\n\n  &lt;com.google.android.gms.maps.MapView\n    android:id=&quot;@+id/mapView&quot;\n    android:layout_width=&quot;352dp&quot;\n    android:layout_height=&quot;348dp&quot;\n    android:layout_marginBottom=&quot;8dp&quot;\n    android:layout_marginEnd=&quot;8dp&quot;\n    android:layout_marginStart=&quot;8dp&quot;\n    android:layout_marginTop=&quot;8dp&quot;\n    app:layout_constraintBottom_toTopOf=&quot;@+id/cardView&quot;\n    app:layout_constraintEnd_toEndOf=&quot;parent&quot;\n    app:layout_constraintStart_toStartOf=&quot;parent&quot;\n    app:layout_constraintTop_toTopOf=&quot;parent&quot; /&gt;\n&lt;/android.support.constraint.ConstraintLayout&gt;</code></pre>\n",
  "<p>We already have a CardView in place. We now start to work inside it. First, install a ConstraintLayout inside the Card:</p>\n",
  " Marker Listener",
  "<h1>Marker Listener</h1>\n<p>Back in the class, implement the OnMarkerListener interface:</p>\n<h2>PlacemarkMapsActivity</h2>\n<pre><code>class PlacemarkMapsActivity : AppCompatActivity(), GoogleMap.OnMarkerClickListener {</code></pre>\n<p>This is the implementation:</p>\n<pre><code>  override fun onMarkerClick(marker: Marker): Boolean {\n    currentTitle.text = marker.title\n    return false\n  }</code></pre>\n<p>In order to receive events, you will need to register to listen for then. Here is a reworked configureMap to do this:</p>\n<pre><code> fun configureMap() {\n    ...\n    map.setOnMarkerClickListener(this)\n    ...\n  }</code></pre>\n<p>Run the app now - and if you click on a marker, it should display its title in the card:</p>\n<p><img src=\"img/23.png\" alt=\"\"></p>\n",
  "<p>Back in the class, implement the OnMarkerListener interface:</p>\n",
  "08.08.Exercises.md",
  "08.Exercises",
  "<h2>Solution</h2>\n<p>Placemark application so far:</p>\n<ul>\n<li><a href=\"archives/placemark-07.zip\">placemark-07.zip</a></li>\n</ul>\n<h2>Exercise 1</h2>\n<p>Currently the PlacemarkActivity layout is hand coded - and is not using the ConstraintLayout. The screen shots below are taken from a refactor the view to make it fully based on the ConstraintLayout. All of this refactoring is carried out using the visual tools.</p>\n<p>See if you can replicate in your project. Keep a close eye on the Component Tree as you work through it.</p>\n<p><img src=\"img/24.png\" alt=\"\"></p>\n<p><img src=\"img/25.png\" alt=\"\"></p>\n<p><img src=\"img/26.png\" alt=\"\"></p>\n<p><img src=\"img/27.png\" alt=\"\"></p>\n<p><img src=\"img/28.png\" alt=\"\"></p>\n<h2>Exercise 2</h2>\n<p>Currently, when you select the marker in the PlacemarkMapsActivity, we display the title of the placemark only:</p>\n<pre><code>  override fun onMarkerClick(marker: Marker): Boolean {\n    currentTitle.text = marker.title\n    return false\n  }</code></pre>\n<p>How would you go about showing the description + the image as well?</p>\n<p>HINT: What does this code do in the configureMap function:</p>\n<pre><code>      map.addMarker(options).tag = it.id</code></pre>\n<p>How can we use this to realise this feature?</p>\n",
  "00.Lab-08a MVP I.md",
  "<h1>Objectives</h1>\n<p>Refactor Activities to use the Model View Presenter pattern</p>\n",
  " Exercise Solution",
  "<h1>Exercise Solution</h1>\n<h2>Exercise 1</h2>\n<p>Currently the PlacemarkActivity layout is hand coded - and is not using the ConstraintLayout. The screen shots below are taken from a refactor the view to make it fully based on the ConstraintLayout. All of this refactoring is carried out using the visual tools.</p>\n<h2>Solution</h2>\n<p>You could start by removing everything - and lust leaving the toolbar + a (new) ConstraintLayout</p>\n<p><img src=\"img/01.png\" alt=\"\"></p>\n<h2>activity_placemark.xml</h2>\n<pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;\n&lt;android.support.constraint.ConstraintLayout\n    xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;\n    xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot;\n    xmlns:tools=&quot;http://schemas.android.com/tools&quot;\n    android:layout_width=&quot;match_parent&quot;\n    android:layout_height=&quot;match_parent&quot;\n    tools:context=&quot;org.wit.placemark.activities.PlacemarkActivity&quot;&gt;\n\n  &lt;RelativeLayout\n      android:layout_width=&quot;match_parent&quot;\n      android:layout_height=&quot;wrap_content&quot;&gt;\n\n    &lt;android.support.design.widget.AppBarLayout\n      android:id=&quot;@+id/appBarLayout&quot;\n      android:layout_width=&quot;match_parent&quot;\n      android:layout_height=&quot;wrap_content&quot;\n      android:background=&quot;@color/colorAccent&quot;\n      android:fitsSystemWindows=&quot;true&quot;\n      app:elevation=&quot;0dip&quot;\n      app:theme=&quot;@style/ThemeOverlay.AppCompat.Dark.ActionBar&quot;&gt;\n\n      &lt;android.support.v7.widget.Toolbar\n        android:id=&quot;@+id/toolbarAdd&quot;\n        android:layout_width=&quot;match_parent&quot;\n        android:layout_height=&quot;wrap_content&quot;\n        app:titleTextColor=&quot;@color/colorPrimary&quot; /&gt;\n    &lt;/android.support.design.widget.AppBarLayout&gt;\n\n    &lt;android.support.constraint.ConstraintLayout\n      android:layout_width=&quot;match_parent&quot;\n      android:layout_height=&quot;match_parent&quot;&gt;\n\n    &lt;/android.support.constraint.ConstraintLayout&gt;\n\n  &lt;/RelativeLayout&gt;\n&lt;/android.support.constraint.ConstraintLayout&gt;</code></pre>\n<p>The recreate all of the controls:</p>\n<p><img src=\"img/02.png\" alt=\"\"></p>\n<pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;\n&lt;android.support.constraint.ConstraintLayout\n    xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;\n    xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot;\n    xmlns:tools=&quot;http://schemas.android.com/tools&quot;\n    android:layout_width=&quot;match_parent&quot;\n    android:layout_height=&quot;match_parent&quot;\n    tools:context=&quot;org.wit.placemark.activities.PlacemarkActivity&quot;&gt;\n\n  &lt;RelativeLayout\n      android:layout_width=&quot;match_parent&quot;\n      android:layout_height=&quot;wrap_content&quot;&gt;\n\n    &lt;android.support.design.widget.AppBarLayout\n      android:id=&quot;@+id/appBarLayout&quot;\n      android:layout_width=&quot;match_parent&quot;\n      android:layout_height=&quot;wrap_content&quot;\n      android:background=&quot;@color/colorAccent&quot;\n      android:fitsSystemWindows=&quot;true&quot;\n      app:elevation=&quot;0dip&quot;\n      app:theme=&quot;@style/ThemeOverlay.AppCompat.Dark.ActionBar&quot;&gt;\n\n      &lt;android.support.v7.widget.Toolbar\n        android:id=&quot;@+id/toolbarAdd&quot;\n        android:layout_width=&quot;match_parent&quot;\n        android:layout_height=&quot;wrap_content&quot;\n        app:titleTextColor=&quot;@color/colorPrimary&quot; /&gt;\n    &lt;/android.support.design.widget.AppBarLayout&gt;\n\n    &lt;android.support.constraint.ConstraintLayout\n      android:layout_width=&quot;match_parent&quot;\n      android:layout_height=&quot;match_parent&quot;&gt;\n\n      &lt;EditText\n        android:id=&quot;@+id/placemarkTitle&quot;\n        android:layout_width=&quot;wrap_content&quot;\n        android:layout_height=&quot;wrap_content&quot;\n        android:ems=&quot;10&quot;\n        android:hint=&quot;@string/hint_placemarkTitle&quot;\n        android:inputType=&quot;text&quot;\n        tools:layout_editor_absoluteX=&quot;48dp&quot;\n        tools:layout_editor_absoluteY=&quot;89dp&quot; /&gt;\n\n      &lt;EditText\n        android:id=&quot;@+id/description&quot;\n        android:layout_width=&quot;wrap_content&quot;\n        android:layout_height=&quot;wrap_content&quot;\n        android:ems=&quot;10&quot;\n        android:hint=&quot;@string/hint_placemarkDescription&quot;\n        android:inputType=&quot;textPersonName&quot;\n        tools:layout_editor_absoluteX=&quot;55dp&quot;\n        tools:layout_editor_absoluteY=&quot;165dp&quot; /&gt;\n\n      &lt;Button\n        android:id=&quot;@+id/chooseImage&quot;\n        android:layout_width=&quot;wrap_content&quot;\n        android:layout_height=&quot;wrap_content&quot;\n        android:text=&quot;@string/button_addImage&quot;\n        tools:layout_editor_absoluteX=&quot;270dp&quot;\n        tools:layout_editor_absoluteY=&quot;301dp&quot; /&gt;\n\n      &lt;ImageView\n        android:id=&quot;@+id/placemarkImage&quot;\n        android:layout_width=&quot;wrap_content&quot;\n        android:layout_height=&quot;wrap_content&quot;\n        app:srcCompat=&quot;@drawable/ic_launcher_background&quot;\n        tools:layout_editor_absoluteX=&quot;260dp&quot;\n        tools:layout_editor_absoluteY=&quot;443dp&quot; /&gt;\n\n      &lt;Button\n        android:id=&quot;@+id/placemarkLocation&quot;\n        android:layout_width=&quot;wrap_content&quot;\n        android:layout_height=&quot;wrap_content&quot;\n        android:text=&quot;@string/button_location&quot;\n        tools:layout_editor_absoluteX=&quot;64dp&quot;\n        tools:layout_editor_absoluteY=&quot;284dp&quot; /&gt;\n\n      &lt;Button\n        android:id=&quot;@+id/btnAdd&quot;\n        android:layout_width=&quot;wrap_content&quot;\n        android:layout_height=&quot;wrap_content&quot;\n        android:text=&quot;@string/button_addPlacemark&quot;\n        tools:layout_editor_absoluteX=&quot;48dp&quot;\n        tools:layout_editor_absoluteY=&quot;417dp&quot; /&gt;\n    &lt;/android.support.constraint.ConstraintLayout&gt;\n\n  &lt;/RelativeLayout&gt;\n&lt;/android.support.constraint.ConstraintLayout&gt;</code></pre>\n<p>And finally, wire them together to achieve this layout:</p>\n<p><img src=\"img/03.png\" alt=\"\"></p>\n<pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;\n&lt;android.support.constraint.ConstraintLayout\n  xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;\n  xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot;\n  xmlns:tools=&quot;http://schemas.android.com/tools&quot;\n  android:layout_width=&quot;match_parent&quot;\n  android:layout_height=&quot;match_parent&quot;\n  tools:context=&quot;org.wit.placemark.activities.PlacemarkActivity&quot;&gt;\n\n  &lt;android.support.design.widget.AppBarLayout\n    android:id=&quot;@+id/appBarLayout&quot;\n    android:layout_width=&quot;match_parent&quot;\n    android:layout_height=&quot;wrap_content&quot;\n    android:background=&quot;@color/colorAccent&quot;\n    android:fitsSystemWindows=&quot;true&quot;\n    app:elevation=&quot;0dip&quot;\n    app:theme=&quot;@style/ThemeOverlay.AppCompat.Dark.ActionBar&quot;&gt;\n\n    &lt;android.support.v7.widget.Toolbar\n      android:id=&quot;@+id/toolbarAdd&quot;\n      android:layout_width=&quot;match_parent&quot;\n      android:layout_height=&quot;wrap_content&quot;\n      app:titleTextColor=&quot;@color/colorPrimary&quot; /&gt;\n\n  &lt;/android.support.design.widget.AppBarLayout&gt;\n\n  &lt;android.support.constraint.ConstraintLayout\n    android:layout_width=&quot;match_parent&quot;\n    android:layout_height=&quot;600dp&quot;\n    android:layout_marginEnd=&quot;8dp&quot;\n    android:layout_marginStart=&quot;8dp&quot;\n    app:layout_constraintEnd_toEndOf=&quot;parent&quot;\n    app:layout_constraintStart_toStartOf=&quot;parent&quot;\n    app:layout_constraintTop_toTopOf=&quot;parent&quot;&gt;\n\n    &lt;EditText\n      android:id=&quot;@+id/placemarkTitle&quot;\n      android:layout_width=&quot;365dp&quot;\n      android:layout_height=&quot;wrap_content&quot;\n      android:layout_marginEnd=&quot;8dp&quot;\n      android:layout_marginStart=&quot;8dp&quot;\n      android:layout_marginTop=&quot;64dp&quot;\n      android:ems=&quot;10&quot;\n      android:hint=&quot;@string/hint_placemarkTitle&quot;\n      android:inputType=&quot;text&quot;\n      app:layout_constraintEnd_toEndOf=&quot;parent&quot;\n      app:layout_constraintHorizontal_bias=&quot;0.503&quot;\n      app:layout_constraintStart_toStartOf=&quot;parent&quot;\n      app:layout_constraintTop_toTopOf=&quot;parent&quot; /&gt;\n\n    &lt;EditText\n      android:id=&quot;@+id/description&quot;\n      android:layout_width=&quot;365dp&quot;\n      android:layout_height=&quot;wrap_content&quot;\n      android:layout_marginEnd=&quot;8dp&quot;\n      android:layout_marginStart=&quot;8dp&quot;\n      android:layout_marginTop=&quot;8dp&quot;\n      android:ems=&quot;10&quot;\n      android:hint=&quot;@string/hint_placemarkDescription&quot;\n      android:inputType=&quot;textPersonName&quot;\n      app:layout_constraintEnd_toEndOf=&quot;parent&quot;\n      app:layout_constraintStart_toStartOf=&quot;parent&quot;\n      app:layout_constraintTop_toBottomOf=&quot;@+id/placemarkTitle&quot; /&gt;\n\n    &lt;Button\n      android:id=&quot;@+id/btnAdd&quot;\n      android:layout_width=&quot;365dp&quot;\n      android:layout_height=&quot;wrap_content&quot;\n      android:layout_marginEnd=&quot;8dp&quot;\n      android:layout_marginStart=&quot;8dp&quot;\n      android:text=&quot;@string/button_addPlacemark&quot;\n      app:layout_constraintEnd_toEndOf=&quot;parent&quot;\n      app:layout_constraintStart_toStartOf=&quot;parent&quot;\n      app:layout_constraintTop_toBottomOf=&quot;@+id/description&quot; /&gt;\n\n    &lt;Button\n      android:id=&quot;@+id/chooseImage&quot;\n      android:layout_width=&quot;150dp&quot;\n      android:layout_height=&quot;wrap_content&quot;\n      android:layout_marginTop=&quot;8dp&quot;\n      android:text=&quot;@string/button_addImage&quot;\n      app:layout_constraintStart_toStartOf=&quot;@+id/btnAdd&quot;\n      app:layout_constraintTop_toBottomOf=&quot;@+id/btnAdd&quot; /&gt;\n\n    &lt;Button\n      android:id=&quot;@+id/placemarkLocation&quot;\n      android:layout_width=&quot;150dp&quot;\n      android:layout_height=&quot;wrap_content&quot;\n      android:layout_marginEnd=&quot;8dp&quot;\n      android:layout_marginStart=&quot;8dp&quot;\n      android:layout_marginTop=&quot;8dp&quot;\n      android:text=&quot;@string/button_location&quot;\n      app:layout_constraintEnd_toEndOf=&quot;@+id/btnAdd&quot;\n      app:layout_constraintHorizontal_bias=&quot;1.0&quot;\n      app:layout_constraintStart_toEndOf=&quot;@+id/chooseImage&quot;\n      app:layout_constraintTop_toBottomOf=&quot;@+id/btnAdd&quot; /&gt;\n\n    &lt;ImageView\n      android:id=&quot;@+id/placemarkImage&quot;\n      android:layout_width=&quot;0dp&quot;\n      android:layout_height=&quot;0dp&quot;\n      android:layout_marginStart=&quot;8dp&quot;\n      android:layout_marginTop=&quot;8dp&quot;\n      android:layout_marginEnd=&quot;8dp&quot;\n      android:layout_marginBottom=&quot;8dp&quot;\n      app:layout_constraintBottom_toBottomOf=&quot;parent&quot;\n      app:layout_constraintEnd_toEndOf=&quot;parent&quot;\n      app:layout_constraintHorizontal_bias=&quot;0.555&quot;\n      app:layout_constraintStart_toStartOf=&quot;parent&quot;\n      app:layout_constraintTop_toBottomOf=&quot;@+id/placemarkLocation&quot;\n      app:layout_constraintVertical_bias=&quot;0.173&quot;\n      app:srcCompat=&quot;@drawable/ic_launcher_background&quot; /&gt;\n\n  &lt;/android.support.constraint.ConstraintLayout&gt;\n\n&lt;/android.support.constraint.ConstraintLayout&gt;</code></pre>\n<p>Take a look at the imageView in the inspector -</p>\n<p><img src=\"img/07.png\" alt=\"\"></p>\n<p>.. and note the &#39;match constraints&#39; setting in the image guides.</p>\n<p>Running the app - the screen should look like this:</p>\n<p><img src=\"img/04.png\" alt=\"\"></p>\n<p><img src=\"img/05.png\" alt=\"\"></p>\n<h2>content_placeark_maps.xml</h2>\n<p>Finally, some small adjustments to the Map control in the PlacemarkMapsActivity:</p>\n<pre><code>  &lt;com.google.android.gms.maps.MapView\n    android:id=&quot;@+id/mapView&quot;\n    android:layout_width=&quot;0dp&quot;\n    android:layout_height=&quot;0dp&quot;\n    android:layout_marginStart=&quot;8dp&quot;\n    android:layout_marginTop=&quot;8dp&quot;\n    android:layout_marginEnd=&quot;8dp&quot;\n    android:layout_marginBottom=&quot;8dp&quot;\n    app:layout_constraintBottom_toTopOf=&quot;@+id/cardView&quot;\n    app:layout_constraintEnd_toEndOf=&quot;parent&quot;\n    app:layout_constraintStart_toStartOf=&quot;parent&quot;\n    app:layout_constraintTop_toTopOf=&quot;parent&quot; /&gt;</code></pre>\n<p>These adjustments are made via the attribute inspector again:</p>\n<p><img src=\"img/08.png\" alt=\"\"></p>\n",
  "<h1>Exercise Solution</h1>\n<h2>Exercise 2</h2>\n<p>Currently, when you select the marker in the PlacemarkMapsActivity, we display the title of the placemark only:</p>\n<pre><code>  override fun onMarkerClick(marker: Marker): Boolean {\n    currentTitle.text = marker.title\n    return false\n  }</code></pre>\n<p>How would you go about showing the description + the image as well?</p>\n<p>HINT: What does this code do in the configureMap function:</p>\n<pre><code>      map.addMarker(options).tag = it.id</code></pre>\n<p>How can we use this to realise this feature?</p>\n<h2>Solution</h2>\n<p>Currently we do not have any way retrieving a placemark by its ID. Having this ability is a useful utility method for a variety of scenarios.</p>\n<p>We can start by introducing this into the PlacemarkStore and PlacemarkMemStore</p>\n<h2>PlacemarkStore</h2>\n<pre><code>...\n  fun findById(id:Long) : PlacemarkModel?\n...</code></pre>\n<h2>PlacemarkMemStore</h2>\n<pre><code>...\n  override fun findById(id:Long) : PlacemarkModel? {\n    val foundPlacemark: PlacemarkModel? = placemarks.find { it.id == id }\n    return foundPlacemark\n  }\n...</code></pre>\n<p>This implements the facility only if we are using in-memory store. Now implement the same feature when we are using the PlacemarkJSONStore implementation:</p>\n<pre><code>  override fun findById(id:Long) : PlacemarkModel? {\n    val foundPlacemark: PlacemarkModel? = placemarks.find { it.id == id }\n    return foundPlacemark\n  }</code></pre>\n<p>It is in fact the same.</p>\n<p>Now, back to PlacemarkMapsActivity. This line:</p>\n<pre><code>        map.addMarker(options).tag = it.id</code></pre>\n<p>This is doing two things:</p>\n<ul>\n<li>adding a marker to the map</li>\n<li>&quot;Tagging&quot; the marker with the ID of the placemark</li>\n</ul>\n<p>This means the each placemark will have the ID (from the datastore) of the placemark is is representing. We can now use this <code>tag</code> to update the card containing details of the selected placemark. This is the current version of the onMarkerCLick event hander:</p>\n<h2>PlacemarkMapsActivity</h2>\n<pre><code>...\n  override fun onMarkerClick(marker: Marker): Boolean {\n    currentTitle.text = marker.title\n    return false\n  }\n...</code></pre>\n<p>Replace it with the following:</p>\n<pre><code>...\n  override fun onMarkerClick(marker: Marker): Boolean {\n    val tag = marker.tag as Long\n    val placemark = app.placemarks.findById(tag)\n    currentTitle.text = placemark!!.title\n    currentDescription.text = placemark!!.description\n    imageView.setImageBitmap(readImageFromPath(this@PlacemarkMapsActivity, placemark.image))\n    return true\n  }\n...</code></pre>\n<p>Look carefully at method - when a user clicks on a placemark in the map, we do the following:</p>\n<ul>\n<li>retrieve the tag from the marker</li>\n<li>look up the datatore for a placemark based in this ID</li>\n<li>set the currentTitle, currentDescription &amp; imageView to contains the details of the placemark</li>\n</ul>\n<p>Try this out now - it should display the placemark details on the panel as each marker is selected.</p>\n<p><img src=\"img/06.png\" alt=\"\"></p>\n",
  "<h2>Exercise 2</h2>\n",
  " Gradle Version",
  "<h1>Gradle Version</h1>\n<p>Bump the gradle revision the latest release:</p>\n<pre><code>    classpath &#39;com.android.tools.build:gradle:3.2.1&#39;</code></pre>\n<p>This will require a complete rebuild.</p>\n",
  "<p>Bump the gradle revision the latest release:</p>\n",
  " PlacemarkPresenter",
  "<h1>PlacemarkPresenter</h1>\n<p>This is our current PlacemarkActivity:</p>\n<h2>PlacemarkActivity</h2>\n<pre><code>package org.wit.placemark.activities\n\nimport android.content.Intent\nimport android.support.v7.app.AppCompatActivity\nimport android.os.Bundle\nimport android.view.Menu\nimport android.view.MenuItem\nimport kotlinx.android.synthetic.main.activity_placemark.*\nimport org.jetbrains.anko.AnkoLogger\nimport org.jetbrains.anko.info\nimport org.jetbrains.anko.intentFor\nimport org.jetbrains.anko.toast\nimport org.wit.placemark.R\nimport org.wit.placemark.helpers.readImage\nimport org.wit.placemark.helpers.readImageFromPath\nimport org.wit.placemark.helpers.showImagePicker\nimport org.wit.placemark.main.MainApp\nimport org.wit.placemark.models.Location\nimport org.wit.placemark.models.PlacemarkModel\n\nclass PlacemarkActivity : AppCompatActivity(), AnkoLogger {\n\n  var placemark = PlacemarkModel()\n  lateinit var app: MainApp\n  val IMAGE_REQUEST = 1\n  val LOCATION_REQUEST = 2\n  var edit = false;\n\n  override fun onCreate(savedInstanceState: Bundle?) {\n    super.onCreate(savedInstanceState)\n    setContentView(R.layout.activity_placemark)\n    toolbarAdd.title = title\n    setSupportActionBar(toolbarAdd)\n    info(&quot;Placemark Activity started..&quot;)\n\n    app = application as MainApp\n\n    if (intent.hasExtra(&quot;placemark_edit&quot;)) {\n      edit = true\n      placemark = intent.extras.getParcelable&lt;PlacemarkModel&gt;(&quot;placemark_edit&quot;)\n      placemarkTitle.setText(placemark.title)\n      description.setText(placemark.description)\n      placemarkImage.setImageBitmap(readImageFromPath(this, placemark.image))\n      if (placemark.image != null) {\n        chooseImage.setText(R.string.change_placemark_image)\n      }\n      btnAdd.setText(R.string.save_placemark)\n    }\n\n    btnAdd.setOnClickListener() {\n      placemark.title = placemarkTitle.text.toString()\n      placemark.description = description.text.toString()\n      if (placemark.title.isEmpty()) {\n        toast(R.string.enter_placemark_title)\n      } else {\n        if (edit) {\n          app.placemarks.update(placemark.copy())\n        } else {\n\n          app.placemarks.create(placemark.copy())\n        }\n      }\n      info(&quot;add Button Pressed: $placemarkTitle&quot;)\n      setResult(AppCompatActivity.RESULT_OK)\n      finish()\n    }\n\n    chooseImage.setOnClickListener {\n      showImagePicker(this, IMAGE_REQUEST)\n    }\n\n    placemarkLocation.setOnClickListener {\n      val location = Location(52.245696, -7.139102, 15f)\n      if (placemark.zoom != 0f) {\n        location.lat = placemark.lat\n        location.lng = placemark.lng\n        location.zoom = placemark.zoom\n      }\n      startActivityForResult(intentFor&lt;MapsActivity&gt;().putExtra(&quot;location&quot;, location), LOCATION_REQUEST)\n    }\n  }\n\n  override fun onCreateOptionsMenu(menu: Menu?): Boolean {\n    menuInflater.inflate(R.menu.menu_placemark, menu)\n    if (edit &amp;&amp; menu != null) menu.getItem(0).setVisible(true)\n    return super.onCreateOptionsMenu(menu)\n  }\n\n  override fun onOptionsItemSelected(item: MenuItem?): Boolean {\n    when (item?.itemId) {\n      R.id.item_delete -&gt; {\n        app.placemarks.delete(placemark)\n        finish()\n      }\n      R.id.item_cancel -&gt; {\n        finish()\n      }\n    }\n    return super.onOptionsItemSelected(item)\n  }\n\n  override fun onActivityResult(requestCode: Int, resultCode: Int, data: Intent?) {\n    super.onActivityResult(requestCode, resultCode, data)\n    when (requestCode) {\n      IMAGE_REQUEST -&gt; {\n        if (data != null) {\n          placemark.image = data.getData().toString()\n          placemarkImage.setImageBitmap(readImage(this, resultCode, data))\n          chooseImage.setText(R.string.change_placemark_image)\n        }\n      }\n      LOCATION_REQUEST -&gt; {\n        if (data != null) {\n          val location = data.extras.getParcelable&lt;Location&gt;(&quot;location&quot;)\n          placemark.lat = location.lat\n          placemark.lng = location.lng\n          placemark.zoom = location.zoom\n        }\n      }\n    }\n  }\n}</code></pre>\n<p>Over 120 lines of code - which has multiple responsibilities. These include:</p>\n<ul>\n<li>Initialising the the various controls</li>\n<li>Establishing the event handlers</li>\n<li>Overriding life cycle methods</li>\n<li>Determining what actions to take in response to menu events</li>\n<li>Keeping track of edit mode</li>\n<li>Interacting with the model</li>\n</ul>\n<p>If we were to add additional features into this activity, for instance location tracking, or a maps control, then the complexity of the class would continue to expand.</p>\n<p>This is a well understood problem, with a range of possible solutions. Our chosen method is called Model View Presenter (MVP). This involves creating 2 classes from this single class, dividing the responsibilities as follows:</p>\n<ul>\n<li><p>View: </p>\n<ul>\n<li>initialising the the various controls</li>\n<li>establishing the event handlers</li>\n<li>overriding life cycle methods</li>\n</ul>\n</li>\n<li><p>Presenter:</p>\n<ul>\n<li>determining what actions to take in response to menu events</li>\n<li>keeping track of edit mode  </li>\n<li>interacting with the model </li>\n</ul>\n</li>\n</ul>\n<p>This is a new class called PlacemarkPresenter:</p>\n<h2>PlacemarkPresenter:</h2>\n<pre><code>package org.wit.placemark.activities\n\nimport android.content.Intent\nimport org.jetbrains.anko.intentFor\nimport org.wit.placemark.helpers.showImagePicker\nimport org.wit.placemark.main.MainApp\nimport org.wit.placemark.models.Location\nimport org.wit.placemark.models.PlacemarkModel\n\nclass PlacemarkPresenter(val activity: PlacemarkActivity) {\n\n  val IMAGE_REQUEST = 1\n  val LOCATION_REQUEST = 2\n\n  var placemark = PlacemarkModel()\n  var location = Location(52.245696, -7.139102, 15f)\n  var app: MainApp\n  var edit = false;\n\n  init {\n    app = activity.application as MainApp\n    if (activity.intent.hasExtra(&quot;placemark_edit&quot;)) {\n      edit = true\n      placemark = activity.intent.extras.getParcelable&lt;PlacemarkModel&gt;(&quot;placemark_edit&quot;)\n      activity.showPlacemark(placemark)\n    }\n  }\n\n  fun doAddOrSave(title: String, description: String) {\n    placemark.title = title\n    placemark.description = description\n    if (edit) {\n      app.placemarks.update(placemark)\n    } else {\n      app.placemarks.create(placemark)\n    }\n    activity.finish()\n  }\n\n  fun doCancel() {\n    activity.finish()\n  }\n\n  fun doDelete() {\n    app.placemarks.delete(placemark)\n    activity.finish()\n  }\n\n  fun doSelectImage() {\n    showImagePicker(activity, IMAGE_REQUEST)\n  }\n\n  fun doSetLocation() {\n    if (placemark.zoom != 0f) {\n      location.lat = placemark.lat\n      location.lng = placemark.lng\n      location.zoom = placemark.zoom\n    }\n    activity.startActivityForResult(activity.intentFor&lt;MapsActivity&gt;().putExtra(&quot;location&quot;, location), LOCATION_REQUEST)\n  }\n\n  fun doActivityResult(requestCode: Int, resultCode: Int, data: Intent) {\n    when (requestCode) {\n      IMAGE_REQUEST -&gt; {\n        placemark.image = data.data.toString()\n        activity.showPlacemark(placemark)\n      }\n      LOCATION_REQUEST -&gt; {\n        location = data.extras.getParcelable&lt;Location&gt;(&quot;location&quot;)\n        placemark.lat = location.lat\n        placemark.lng = location.lng\n        placemark.zoom = location.zoom\n      }\n    }\n  }\n}</code></pre>\n<p>Look at it carefully. Notice that it receives a PlacemarkActivity in its constructor, and that it invokes this actvity in a number of methods. Try to get a sense of the responsibilities of this class.</p>\n<p>And this is a revised PlacemarkActivity, which creates the presenter and defers to it as outlined above:</p>\n<h2>PlacemarkActivity</h2>\n<pre><code>package org.wit.placemark.activities\n\nimport android.content.Intent\nimport android.support.v7.app.AppCompatActivity\nimport android.os.Bundle\nimport android.view.Menu\nimport android.view.MenuItem\nimport kotlinx.android.synthetic.main.activity_placemark.*\nimport org.jetbrains.anko.AnkoLogger\nimport org.jetbrains.anko.toast\nimport org.wit.placemark.R\nimport org.wit.placemark.helpers.readImageFromPath\nimport org.wit.placemark.models.PlacemarkModel\n\nclass PlacemarkActivity : AppCompatActivity(), AnkoLogger {\n\n  lateinit var presenter: PlacemarkPresenter\n  var placemark = PlacemarkModel()\n\n  override fun onCreate(savedInstanceState: Bundle?) {\n    super.onCreate(savedInstanceState)\n    setContentView(R.layout.activity_placemark)\n    toolbarAdd.title = title\n    setSupportActionBar(toolbarAdd)\n\n    presenter = PlacemarkPresenter(this)\n\n    btnAdd.setOnClickListener {\n      if (placemarkTitle.text.toString().isEmpty()) {\n        toast(R.string.enter_placemark_title)\n      } else {\n        presenter.doAddOrSave(placemarkTitle.text.toString(), description.text.toString())\n      }\n    }\n\n    chooseImage.setOnClickListener { presenter.doSelectImage() }\n\n    placemarkLocation.setOnClickListener { presenter.doSetLocation() }\n  }\n\n  fun showPlacemark(placemark: PlacemarkModel) {\n    placemarkTitle.setText(placemark.title)\n    description.setText(placemark.description)\n    placemarkImage.setImageBitmap(readImageFromPath(this, placemark.image))\n    if (placemark.image != null) {\n      chooseImage.setText(R.string.change_placemark_image)\n    }\n    btnAdd.setText(R.string.save_placemark)\n  }\n\n  override fun onCreateOptionsMenu(menu: Menu): Boolean {\n    menuInflater.inflate(R.menu.menu_placemark, menu)\n    if (presenter.edit) menu.getItem(0).setVisible(true)\n    return super.onCreateOptionsMenu(menu)\n  }\n\n  override fun onOptionsItemSelected(item: MenuItem?): Boolean {\n    when (item?.itemId) {\n      R.id.item_delete -&gt; {\n        presenter.doDelete()\n      }\n      R.id.item_cancel -&gt; {\n        presenter.doCancel()\n      }\n    }\n    return super.onOptionsItemSelected(item)\n  }\n\n  override fun onActivityResult(requestCode: Int, resultCode: Int, data: Intent?) {\n    super.onActivityResult(requestCode, resultCode, data)\n    if (data != null) {\n      presenter.doActivityResult(requestCode, resultCode, data)\n    }\n  }\n}</code></pre>\n<p>This version is simpler that the original, is focus now is primarily on the user interface, with model update and tracking responsibilities delegated to the presenter.</p>\n<p>Have a close look at the responsibilities </p>\n",
  "<p>This is our current PlacemarkActivity:</p>\n",
  " PlacemarkListPresenter",
  "<h1>PlacemarkListPresenter</h1>\n<p>This is our current PlacemarkListActivity:</p>\n<h2>PlacenarListActivity</h2>\n<pre><code>package org.wit.placemark.activities\n\nimport android.content.Intent\nimport android.support.v7.app.AppCompatActivity\nimport android.os.Bundle\nimport android.support.v7.widget.LinearLayoutManager\nimport android.view.*\nimport kotlinx.android.synthetic.main.activity_placemark_list.*\nimport org.jetbrains.anko.intentFor\nimport org.jetbrains.anko.startActivity\nimport org.jetbrains.anko.startActivityForResult\nimport org.wit.placemark.R\nimport org.wit.placemark.main.MainApp\nimport org.wit.placemark.models.PlacemarkModel\n\nclass PlacemarkListActivity : AppCompatActivity(), PlacemarkListener {\n\n  lateinit var app: MainApp\n\n  override fun onCreate(savedInstanceState: Bundle?) {\n    super.onCreate(savedInstanceState)\n    setContentView(R.layout.activity_placemark_list)\n    app = application as MainApp\n    toolbarMain.title = title\n    setSupportActionBar(toolbarMain)\n\n    val layoutManager = LinearLayoutManager(this)\n    recyclerView.layoutManager = layoutManager\n    recyclerView.adapter = PlacemarkAdapter(app.placemarks.findAll(), this)\n    loadPlacemarks()\n  }\n\n  private fun loadPlacemarks() {\n    showPlacemarks( app.placemarks.findAll())\n  }\n\n  fun showPlacemarks (placemarks: List&lt;PlacemarkModel&gt;) {\n    recyclerView.adapter = PlacemarkAdapter(placemarks, this)\n    recyclerView.adapter?.notifyDataSetChanged()\n  }\n\n  override fun onCreateOptionsMenu(menu: Menu?): Boolean {\n    menuInflater.inflate(R.menu.menu_main, menu)\n    return super.onCreateOptionsMenu(menu)\n  }\n\n  override fun onOptionsItemSelected(item: MenuItem?): Boolean {\n    when (item?.itemId) {\n      R.id.item_add -&gt; startActivityForResult&lt;PlacemarkActivity&gt;(0)\n      R.id.item_map -&gt; startActivity&lt;PlacemarkMapsActivity&gt;()\n    }\n    return super.onOptionsItemSelected(item)\n  }\n\n  override fun onPlacemarkClick(placemark: PlacemarkModel) {\n    startActivityForResult(intentFor&lt;PlacemarkActivity&gt;().putExtra(&quot;placemark_edit&quot;, placemark), 0)\n  }\n\n  override fun onActivityResult(requestCode: Int, resultCode: Int, data: Intent?) {\n    loadPlacemarks()\n    super.onActivityResult(requestCode, resultCode, data)\n  }\n}</code></pre>\n<p>And this is a new PlacemarkListPresenter:</p>\n<h2>PlacemarkListPresenter</h2>\n<pre><code>package org.wit.placemark.activities\n\nimport org.jetbrains.anko.intentFor\nimport org.jetbrains.anko.startActivity\nimport org.jetbrains.anko.startActivityForResult\nimport org.wit.placemark.main.MainApp\nimport org.wit.placemark.models.PlacemarkModel\n\nclass PlacemarkListPresenter(val activity: PlacemarkListActivity) {\n\n  var app: MainApp\n\n  init {\n    app = activity.application as MainApp\n  }\n\n  fun getPlacemarks() = app.placemarks.findAll()\n\n  fun doAddPlacemark() {\n    activity.startActivityForResult&lt;PlacemarkActivity&gt;(0)\n  }\n\n  fun doEditPlacemark(placemark: PlacemarkModel) {\n    activity.startActivityForResult(activity.intentFor&lt;PlacemarkActivity&gt;().putExtra(&quot;placemark_edit&quot;, placemark), 0)\n  }\n\n  fun doShowPlacemarksMap() {\n    activity.startActivity&lt;PlacemarkMapsActivity&gt;()\n  }\n}</code></pre>\n<p>This is a revised PlacemarkListActivity to defer some responsibilities to the presenter:</p>\n<h2>PlacemarkListActivity</h2>\n<pre><code>package org.wit.placemark.activities\n\nimport android.content.Intent\nimport android.support.v7.app.AppCompatActivity\nimport android.os.Bundle\nimport android.support.v7.widget.LinearLayoutManager\nimport android.view.*\nimport kotlinx.android.synthetic.main.activity_placemark_list.*\nimport org.wit.placemark.R\nimport org.wit.placemark.models.PlacemarkModel\n\nclass PlacemarkListActivity : AppCompatActivity(), PlacemarkListener {\n\n  lateinit var presenter: PlacemarkListPresenter\n\n  override fun onCreate(savedInstanceState: Bundle?) {\n    super.onCreate(savedInstanceState)\n    setContentView(R.layout.activity_placemark_list)\n    toolbarMain.title = title\n    setSupportActionBar(toolbarMain)\n\n    presenter = PlacemarkListPresenter(this)\n    val layoutManager = LinearLayoutManager(this)\n    recyclerView.layoutManager = layoutManager\n    recyclerView.adapter = PlacemarkAdapter(presenter.getPlacemarks(), this)\n    recyclerView.adapter?.notifyDataSetChanged()\n  }\n\n  override fun onCreateOptionsMenu(menu: Menu?): Boolean {\n    menuInflater.inflate(R.menu.menu_main, menu)\n    return super.onCreateOptionsMenu(menu)\n  }\n\n  override fun onOptionsItemSelected(item: MenuItem?): Boolean {\n    when (item?.itemId) {\n      R.id.item_add -&gt; presenter.doAddPlacemark()\n      R.id.item_map -&gt; presenter.doShowPlacemarksMap()\n    }\n    return super.onOptionsItemSelected(item)\n  }\n\n  override fun onPlacemarkClick(placemark: PlacemarkModel) {\n    presenter.doEditPlacemark(placemark)\n  }\n\n  override fun onActivityResult(requestCode: Int, resultCode: Int, data: Intent?) {\n    recyclerView.adapter?.notifyDataSetChanged()\n    super.onActivityResult(requestCode, resultCode, data)\n  }\n}</code></pre>\n<p>The PlacemarkAdapter is not effected by these changes</p>\n",
  "<p>This is our current PlacemarkListActivity:</p>\n",
  " MapsPresenter",
  "<h1>MapsPresenter</h1>\n<p>The Current Maps Activity:</p>\n<h2>MapsActivity</h2>\n<pre><code>package org.wit.placemark.activities\n\nimport android.app.Activity\nimport android.content.Intent\nimport android.support.v7.app.AppCompatActivity\nimport android.os.Bundle\n\nimport com.google.android.gms.maps.CameraUpdateFactory\nimport com.google.android.gms.maps.GoogleMap\nimport com.google.android.gms.maps.OnMapReadyCallback\nimport com.google.android.gms.maps.SupportMapFragment\nimport com.google.android.gms.maps.model.LatLng\nimport com.google.android.gms.maps.model.Marker\nimport com.google.android.gms.maps.model.MarkerOptions\nimport org.wit.placemark.R\nimport org.wit.placemark.models.Location\n\nclass MapsActivity : AppCompatActivity(), OnMapReadyCallback, GoogleMap.OnMarkerDragListener, GoogleMap.OnMarkerClickListener {\n\n  private lateinit var map: GoogleMap\n  var location = Location()\n\n  override fun onCreate(savedInstanceState: Bundle?) {\n    super.onCreate(savedInstanceState)\n    setContentView(R.layout.activity_maps)\n    location = intent.extras.getParcelable&lt;Location&gt;(&quot;location&quot;)\n    val mapFragment = supportFragmentManager\n        .findFragmentById(R.id.map) as SupportMapFragment\n    mapFragment.getMapAsync(this)\n  }\n\n  override fun onMapReady(googleMap: GoogleMap) {\n    map = googleMap\n    map.setOnMarkerDragListener(this)\n    map.setOnMarkerClickListener(this)\n    val loc = LatLng(location.lat, location.lng)\n    val options = MarkerOptions()\n        .title(&quot;Placemark&quot;)\n        .snippet(&quot;GPS : &quot; + loc.toString())\n        .draggable(true)\n        .position(loc)\n    map.addMarker(options)\n    map.moveCamera(CameraUpdateFactory.newLatLngZoom(loc, location.zoom))\n  }\n\n  override fun onMarkerDragStart(marker: Marker) {\n  }\n\n  override fun onMarkerDrag(marker: Marker) {\n  }\n\n  override fun onMarkerDragEnd(marker: Marker) {\n    location.lat = marker.position.latitude\n    location.lng = marker.position.longitude\n    location.zoom = map.cameraPosition.zoom\n  }\n\n  override fun onBackPressed() {\n    val resultIntent = Intent()\n    resultIntent.putExtra(&quot;location&quot;, location)\n    setResult(Activity.RESULT_OK, resultIntent)\n    finish()\n    super.onBackPressed()\n  }\n\n  override fun onMarkerClick(marker: Marker): Boolean {\n    val loc = LatLng(location.lat, location.lng)\n    marker.setSnippet(&quot;GPS : &quot; + loc.toString())\n    return false\n  }\n}</code></pre>\n<p>A new Presenter class:</p>\n<h2>MapsPresenter</h2>\n<pre><code>package org.wit.placemark.activities\n\nimport android.app.Activity\nimport android.content.Intent\nimport com.google.android.gms.maps.CameraUpdateFactory\nimport com.google.android.gms.maps.GoogleMap\nimport com.google.android.gms.maps.model.LatLng\nimport com.google.android.gms.maps.model.Marker\nimport com.google.android.gms.maps.model.MarkerOptions\nimport org.wit.placemark.models.Location\n\nclass MapsPresenter(val activity: MapsActivity) {\n\n  var location = Location()\n\n  init {\n    location = activity.intent.extras.getParcelable&lt;Location&gt;(&quot;location&quot;)\n  }\n\n  fun initMap(map: GoogleMap) {\n    val loc = LatLng(location.lat, location.lng)\n    val options = MarkerOptions()\n        .title(&quot;Placemark&quot;)\n        .snippet(&quot;GPS : &quot; + loc.toString())\n        .draggable(true)\n        .position(loc)\n    map.addMarker(options)\n    map.moveCamera(CameraUpdateFactory.newLatLngZoom(loc, location.zoom))\n  }\n\n  fun doUpdateLocation(lat: Double, lng: Double, zoom: Float) {\n    location.lat = lat\n    location.lng = lng\n    location.zoom = zoom\n  }\n\n  fun doOnBackPressed() {\n    val resultIntent = Intent()\n    resultIntent.putExtra(&quot;location&quot;, location)\n    activity.setResult(Activity.RESULT_OK, resultIntent)\n    activity.finish()\n  }\n\n  fun doUpdateMarker(marker: Marker) {\n    val loc = LatLng(location.lat, location.lng)\n    marker.setSnippet(&quot;GPS : &quot; + loc.toString())\n  }\n}</code></pre>\n<p>Revised MapsActivity to use this class:</p>\n<h2>MapsActivity</h2>\n<pre><code>package org.wit.placemark.activities\n\nimport android.support.v7.app.AppCompatActivity\nimport android.os.Bundle\nimport com.google.android.gms.maps.GoogleMap\nimport com.google.android.gms.maps.SupportMapFragment\nimport com.google.android.gms.maps.model.Marker\nimport org.wit.placemark.R\n\nclass MapsActivity : AppCompatActivity(), GoogleMap.OnMarkerDragListener, GoogleMap.OnMarkerClickListener {\n\n  lateinit var map: GoogleMap\n  lateinit var presenter: MapsPresenter\n\n  override fun onCreate(savedInstanceState: Bundle?) {\n    super.onCreate(savedInstanceState)\n    setContentView(R.layout.activity_maps)\n    val mapFragment = supportFragmentManager.findFragmentById(R.id.map) as SupportMapFragment\n    presenter = MapsPresenter(this)\n    mapFragment.getMapAsync {\n      map = it\n      map.setOnMarkerDragListener(this)\n      map.setOnMarkerClickListener(this)\n      presenter.initMap(map)\n    }\n  }\n\n  override fun onMarkerDragStart(marker: Marker) {}\n\n  override fun onMarkerDrag(marker: Marker) {}\n\n  override fun onMarkerDragEnd(marker: Marker) {\n    presenter.doUpdateLocation(marker.position.latitude, marker.position.longitude, map.cameraPosition.zoom)\n  }\n\n  override fun onBackPressed() {\n    presenter.doOnBackPressed()\n  }\n\n  override fun onMarkerClick(marker: Marker): Boolean {\n    presenter.doUpdateMarker(marker)\n    return false\n  }\n}</code></pre>\n",
  "<p>The Current Maps Activity:</p>\n",
  "# Rename & Refactor",
  "<h2>Rename &amp; Refactor</h2>\n<p>We might take this opportunity to tidy up some of the names we have been using</p>\n<h2>1: MapsActivity/MapsPresenter</h2>\n<p>This class has a poor name choice, as it conflicts somewhat with one of our other activities.</p>\n<ul>\n<li>Rename MapsActivity to EditLoctionActivity</li>\n<li>Rename MapsPresenter to EditLocationPresenter</li>\n</ul>\n<p>Be sure to use the refactoring tools to do this. In particular, make sure that the various resources to refer to the activity class are appropriately updated.</p>\n<p>A good way of doing this is to keep an eye on the git changes once the refactoring is complete.</p>\n<p>Do not proceed until you have completed a complete rebuild and also test of the application.</p>\n<h2>2: Rename all <code>Activities</code> to <code>Views</code></h2>\n<p>As we are now using the MVP pattern - it would be a good idea to adjust our class naming to reveal this.</p>\n<ul>\n<li>Rename all XxxxActivity classes to ViewActivity</li>\n<li>Rename all <code>activity</code> references in the Presenters to <code>view</code></li>\n</ul>\n<p>So we would have <code>PlacemarkView</code> and <code>PlacemarkPresenter</code>, with the <code>activity</code> property in PlacemarkPresenter renamed to <code>view</code>:</p>\n<pre><code>...\nclass PlacemarkPresenter(val view: PlacemarkView) {\n...</code></pre>\n<p>Again, try to use the refactoring tools to do this.</p>\n<h2>Refactor package structure</h2>\n<p>Finally, this is our current package structure:</p>\n<p><img src=\"img/11.png\" alt=\"\"></p>\n<p>Have a look at this revised version:</p>\n<p><img src=\"img/10.png\" alt=\"\"></p>\n<p>Notice that we have created a <code>views</code> packages - and then this contains a package for each view/presenter pair.</p>\n<p>See if you can replicate this now in your project.</p>\n",
  "<p>We might take this opportunity to tidy up some of the names we have been using</p>\n",
  "<h1>Exercises</h1>\n<p>Placemark application so far:</p>\n<ul>\n<li><a href=\"archives/archive.zip\">archive.zip</a></li>\n</ul>\n<h2>Exercise 1</h2>\n<p>Convert the PlacemarkMaps Activity into PlacemarkMapView + PlacemarkPresenter. Perhaps aim for this final structure:</p>\n<p><img src=\"img/12.png\" alt=\"\"></p>\n<h2>Exercise 2:</h2>\n<p>Simplify the UX for PlacemarkActivity, removing the <code>Add Placemark</code> button, and including a <code>save</code> menu option to perform equivalent functionality:</p>\n<p><img src=\"img/09.png\" alt=\"\"></p>\n",
  "00.Lab-08b MVP II.md",
  "<h1>Objectives</h1>\n<p>Complete the presenter pattern implementation, introducing BaseView &amp; BasePresenter classes</p>\n",
  " Solutions",
  "<h1>Solutions</h1>\n<h2>Exercise 1</h2>\n<p>Convert the PlacemarkMaps Activity into PlacemarkMapView + PlacemarkPresenter. Perhaps aim for this final structure:</p>\n<p><img src=\"img/01.png\" alt=\"\"></p>\n<h2>Exercise 1 Solution</h2>\n<h2>PlacemarkMapPresenter</h2>\n<pre><code>package org.wit.placemark.views.map\n\nimport com.google.android.gms.maps.CameraUpdateFactory\nimport com.google.android.gms.maps.GoogleMap\nimport com.google.android.gms.maps.model.LatLng\nimport com.google.android.gms.maps.model.Marker\nimport com.google.android.gms.maps.model.MarkerOptions\nimport org.wit.placemark.main.MainApp\n\nclass PlacemarkMapPresenter(val view: PlacemarkMapView) {\n\n  var app: MainApp\n\n  init {\n    app = view.application as MainApp\n  }\n\n  fun doPopulateMap(map: GoogleMap) {\n    map.uiSettings.setZoomControlsEnabled(true)\n    map.setOnMarkerClickListener(view)\n    app.placemarks.findAll().forEach {\n      val loc = LatLng(it.lat, it.lng)\n      val options = MarkerOptions().title(it.title).position(loc)\n      map.addMarker(options).tag = it.id\n      map.moveCamera(CameraUpdateFactory.newLatLngZoom(loc, it.zoom))\n    }\n  }\n\n  fun doMarkerSelected(marker: Marker) {\n    val tag = marker.tag as Long\n    val placemark = app.placemarks.findById(tag)\n    if (placemark != null) view.showPlacemark(placemark)\n  }\n}</code></pre>\n<h2>PlacemarkMapView</h2>\n<pre><code>package org.wit.placemark.views.map\n\nimport android.os.Bundle\nimport android.support.v7.app.AppCompatActivity\nimport com.google.android.gms.maps.GoogleMap\nimport com.google.android.gms.maps.model.Marker\nimport org.wit.placemark.R\nimport kotlinx.android.synthetic.main.activity_placemark_map.*\nimport kotlinx.android.synthetic.main.content_placemark_map.*\nimport org.wit.placemark.helpers.readImageFromPath\nimport org.wit.placemark.models.PlacemarkModel\n\nclass PlacemarkMapView : AppCompatActivity(), GoogleMap.OnMarkerClickListener {\n\n  lateinit var presenter: PlacemarkMapPresenter\n\n  override fun onCreate(savedInstanceState: Bundle?) {\n    super.onCreate(savedInstanceState)\n    setContentView(R.layout.activity_placemark_map)\n    setSupportActionBar(toolbarMaps)\n    presenter = PlacemarkMapPresenter(this)\n\n    mapView.onCreate(savedInstanceState);\n    mapView.getMapAsync {\n      presenter.doPopulateMap(it)\n    }\n  }\n\n  fun showPlacemark(placemark: PlacemarkModel) {\n    currentTitle.text = placemark.title\n    currentDescription.text = placemark.description\n    imageView.setImageBitmap(readImageFromPath(this, placemark.image))\n  }\n\n  override fun onMarkerClick(marker: Marker): Boolean {\n    presenter.doMarkerSelected(marker)\n    return true\n  }\n\n  override fun onDestroy() {\n    super.onDestroy()\n    mapView.onDestroy()\n  }\n\n  override fun onLowMemory() {\n    super.onLowMemory()\n    mapView.onLowMemory()\n  }\n\n  override fun onPause() {\n    super.onPause()\n    mapView.onPause()\n  }\n\n  override fun onResume() {\n    super.onResume()\n    mapView.onResume()\n  }\n\n  override fun onSaveInstanceState(outState: Bundle?) {\n    super.onSaveInstanceState(outState)\n    mapView.onSaveInstanceState(outState)\n  }\n}</code></pre>\n<h2>AndroidManifest.xml</h2>\n<pre><code>    &lt;activity\n      android:name=&quot;.views.map.PlacemarkMapView&quot;\n      android:label=&quot;@string/title_activity_placemark_maps&quot;\n      android:theme=&quot;@style/AppTheme&quot;&gt;&lt;/activity&gt;</code></pre>\n<h2>activity_placemark_map.xml</h2>\n<pre><code>&lt;android.support.design.widget.CoordinatorLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;\n  xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot;\n  xmlns:tools=&quot;http://schemas.android.com/tools&quot;\n  android:layout_width=&quot;match_parent&quot;\n  android:layout_height=&quot;match_parent&quot;\n  tools:context=&quot;org.wit.placemark.views.map.PlacemarkMapView&quot;&gt;\n\n  ...\n  &lt;include layout=&quot;@layout/content_placemark_map&quot; /&gt;\n  ...</code></pre>\n<h2>content_placemark_map.xml</h2>\n<pre><code>&lt;android.support.constraint.ConstraintLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;\n  xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot;\n  xmlns:tools=&quot;http://schemas.android.com/tools&quot;\n  android:layout_width=&quot;match_parent&quot;\n  android:layout_height=&quot;match_parent&quot;\n  app:layout_behavior=&quot;@string/appbar_scrolling_view_behavior&quot;\n  tools:context=&quot;org.wit.placemark.views.map.PlacemarkMapView&quot;\n  tools:showIn=&quot;@layout/activity_placemark_map&quot;&gt;\n...</code></pre>\n",
  "<h1>Solutions</h1>\n<h2>Exercise 2:</h2>\n<p>Simplify the UX for PlacemarkActivity, removing the <code>Add Placemark</code> button, and including a <code>save</code> menu option to perform equivalent functionality:</p>\n<p><img src=\"img/02.png\" alt=\"\"></p>\n<h2>Solution</h2>\n<h2>strings.xml</h2>\n<pre><code>  &lt;string name=&quot;menu_savePlacemark&quot;&gt;Save&lt;/string&gt;</code></pre>\n<h2>menu_placemark.xml</h2>\n<pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;\n&lt;menu xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;\n  xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot;&gt;\n\n  &lt;item\n    android:id=&quot;@+id/item_save&quot;\n    android:title=&quot;@string/menu_savePlacemark&quot;\n    app:showAsAction=&quot;always&quot;/&gt;\n  &lt;item\n    android:id=&quot;@+id/item_delete&quot;\n    android:title=&quot;@string/menu_deletePlacemark&quot;\n    app:showAsAction=&quot;always&quot;/&gt;\n&lt;/menu&gt;</code></pre>\n<h2>activity_placemark</h2>\n<pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;\n&lt;android.support.constraint.ConstraintLayout\n  xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;\n  xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot;\n  xmlns:tools=&quot;http://schemas.android.com/tools&quot;\n  android:layout_width=&quot;match_parent&quot;\n  android:layout_height=&quot;match_parent&quot;\n  tools:context=&quot;org.wit.placemark.views.placemark.PlacemarkView&quot;&gt;\n\n  &lt;android.support.design.widget.AppBarLayout\n    android:id=&quot;@+id/appBarLayout&quot;\n    android:layout_width=&quot;match_parent&quot;\n    android:layout_height=&quot;wrap_content&quot;\n    android:background=&quot;@color/colorAccent&quot;\n    android:fitsSystemWindows=&quot;true&quot;\n    app:elevation=&quot;0dip&quot;\n    app:theme=&quot;@style/ThemeOverlay.AppCompat.Dark.ActionBar&quot;&gt;\n\n    &lt;android.support.v7.widget.Toolbar\n      android:id=&quot;@+id/toolbarAdd&quot;\n      android:layout_width=&quot;match_parent&quot;\n      android:layout_height=&quot;wrap_content&quot;\n      app:titleTextColor=&quot;@color/colorPrimary&quot; /&gt;\n\n  &lt;/android.support.design.widget.AppBarLayout&gt;\n\n  &lt;android.support.constraint.ConstraintLayout\n    android:layout_width=&quot;match_parent&quot;\n    android:layout_height=&quot;600dp&quot;\n    android:layout_marginEnd=&quot;8dp&quot;\n    android:layout_marginStart=&quot;8dp&quot;\n    app:layout_constraintEnd_toEndOf=&quot;parent&quot;\n    app:layout_constraintStart_toStartOf=&quot;parent&quot;\n    app:layout_constraintTop_toTopOf=&quot;parent&quot;&gt;\n\n    &lt;EditText\n      android:id=&quot;@+id/placemarkTitle&quot;\n      android:layout_width=&quot;365dp&quot;\n      android:layout_height=&quot;wrap_content&quot;\n      android:layout_marginEnd=&quot;8dp&quot;\n      android:layout_marginStart=&quot;8dp&quot;\n      android:layout_marginTop=&quot;64dp&quot;\n      android:ems=&quot;10&quot;\n      android:hint=&quot;@string/hint_placemarkTitle&quot;\n      android:inputType=&quot;text&quot;\n      app:layout_constraintEnd_toEndOf=&quot;parent&quot;\n      app:layout_constraintHorizontal_bias=&quot;0.503&quot;\n      app:layout_constraintStart_toStartOf=&quot;parent&quot;\n      app:layout_constraintTop_toTopOf=&quot;parent&quot; /&gt;\n\n    &lt;EditText\n      android:id=&quot;@+id/description&quot;\n      android:layout_width=&quot;365dp&quot;\n      android:layout_height=&quot;wrap_content&quot;\n      android:layout_marginEnd=&quot;8dp&quot;\n      android:layout_marginStart=&quot;8dp&quot;\n      android:layout_marginTop=&quot;8dp&quot;\n      android:ems=&quot;10&quot;\n      android:hint=&quot;@string/hint_placemarkDescription&quot;\n      android:inputType=&quot;textPersonName&quot;\n      app:layout_constraintEnd_toEndOf=&quot;parent&quot;\n      app:layout_constraintStart_toStartOf=&quot;parent&quot;\n      app:layout_constraintTop_toBottomOf=&quot;@+id/placemarkTitle&quot; /&gt;\n\n    &lt;Button\n      android:id=&quot;@+id/chooseImage&quot;\n      android:layout_width=&quot;158dp&quot;\n      android:layout_height=&quot;wrap_content&quot;\n      android:layout_marginStart=&quot;8dp&quot;\n      android:text=&quot;@string/button_addImage&quot;\n      app:layout_constraintStart_toStartOf=&quot;parent&quot;\n      app:layout_constraintTop_toBottomOf=&quot;@+id/description&quot; /&gt;\n\n    &lt;Button\n      android:id=&quot;@+id/placemarkLocation&quot;\n      android:layout_width=&quot;167dp&quot;\n      android:layout_height=&quot;wrap_content&quot;\n      android:layout_marginEnd=&quot;8dp&quot;\n      android:text=&quot;@string/button_location&quot;\n      app:layout_constraintEnd_toEndOf=&quot;parent&quot;\n      app:layout_constraintTop_toBottomOf=&quot;@+id/description&quot; /&gt;\n\n    &lt;ImageView\n      android:id=&quot;@+id/placemarkImage&quot;\n      android:layout_width=&quot;0dp&quot;\n      android:layout_height=&quot;0dp&quot;\n      android:layout_marginStart=&quot;8dp&quot;\n      android:layout_marginTop=&quot;8dp&quot;\n      android:layout_marginEnd=&quot;8dp&quot;\n      android:layout_marginBottom=&quot;8dp&quot;\n      app:layout_constraintBottom_toBottomOf=&quot;parent&quot;\n      app:layout_constraintEnd_toEndOf=&quot;parent&quot;\n      app:layout_constraintHorizontal_bias=&quot;0.555&quot;\n      app:layout_constraintStart_toStartOf=&quot;parent&quot;\n      app:layout_constraintTop_toBottomOf=&quot;@+id/placemarkLocation&quot;\n      app:layout_constraintVertical_bias=&quot;0.173&quot;\n      app:srcCompat=&quot;@drawable/ic_launcher_background&quot; /&gt;\n\n  &lt;/android.support.constraint.ConstraintLayout&gt;\n\n&lt;/android.support.constraint.ConstraintLayout&gt;</code></pre>\n<h2>PlacemarkView</h2>\n<pre><code>package org.wit.placemark.views.placemark\n\nimport android.content.Intent\nimport android.support.v7.app.AppCompatActivity\nimport android.os.Bundle\nimport android.view.Menu\nimport android.view.MenuItem\nimport kotlinx.android.synthetic.main.activity_placemark.*\nimport org.jetbrains.anko.AnkoLogger\nimport org.jetbrains.anko.toast\nimport org.wit.placemark.R\nimport org.wit.placemark.helpers.readImageFromPath\nimport org.wit.placemark.models.PlacemarkModel\n\nclass PlacemarkView : AppCompatActivity(), AnkoLogger {\n\n  lateinit var presenter: PlacemarkPresenter\n  var placemark = PlacemarkModel()\n\n  override fun onCreate(savedInstanceState: Bundle?) {\n    super.onCreate(savedInstanceState)\n    setContentView(R.layout.activity_placemark)\n    toolbarAdd.title = title\n    setSupportActionBar(toolbarAdd)\n\n    presenter = PlacemarkPresenter(this)\n\n    chooseImage.setOnClickListener { presenter.doSelectImage() }\n\n    placemarkLocation.setOnClickListener { presenter.doSetLocation() }\n  }\n\n  fun showPlacemark(placemark: PlacemarkModel) {\n    placemarkTitle.setText(placemark.title)\n    description.setText(placemark.description)\n    placemarkImage.setImageBitmap(readImageFromPath(this, placemark.image))\n    if (placemark.image != null) {\n      chooseImage.setText(R.string.change_placemark_image)\n    }\n  }\n\n  override fun onCreateOptionsMenu(menu: Menu): Boolean {\n    menuInflater.inflate(R.menu.menu_placemark, menu)\n    return super.onCreateOptionsMenu(menu)\n  }\n\n  override fun onOptionsItemSelected(item: MenuItem?): Boolean {\n    when (item?.itemId) {\n      R.id.item_delete -&gt; {\n        presenter.doDelete()\n      }\n      R.id.item_save -&gt; {\n        if (placemarkTitle.text.toString().isEmpty()) {\n          toast(R.string.enter_placemark_title)\n        } else {\n          presenter.doAddOrSave(placemarkTitle.text.toString(), description.text.toString())\n        }\n      }\n    }\n    return super.onOptionsItemSelected(item)\n  }\n\n  override fun onActivityResult(requestCode: Int, resultCode: Int, data: Intent?) {\n    super.onActivityResult(requestCode, resultCode, data)\n    if (data != null) {\n      presenter.doActivityResult(requestCode, resultCode, data)\n    }\n  }\n\n  override fun onBackPressed() {\n    presenter.doCancel()\n  }\n}</code></pre>\n",
  "<h2>Exercise 2:</h2>\n",
  " BaseView/Presenter",
  "<h1>BaseView/Presenter</h1>\n<p>These new classes will implement some commonality that can be extracted from our MVP implementation.</p>\n<p>First, a base class for all Presenters:</p>\n<h2>BasePresenter</h2>\n<pre><code>package org.wit.placemark.views\n\nimport android.content.Intent\nimport org.wit.placemark.main.MainApp\n\nopen class BasePresenter(var view: BaseView?) {\n\n  var app: MainApp =  view?.application as MainApp\n\n  open fun doActivityResult(requestCode: Int, resultCode: Int, data: Intent) {\n  }\n\n  open fun doRequestPermissionsResult(requestCode: Int, permissions: Array&lt;String&gt;, grantResults: IntArray) {\n  }\n\n  open fun onDestroy() {\n    view = null\n  }\n}</code></pre>\n<p>Notice this is where we keep our app reference.</p>\n<p>THen the base class for all Views:</p>\n<h2>BaseView</h2>\n<pre><code>package org.wit.placemark.views\n\nimport android.content.Intent\n\nimport android.os.Parcelable\nimport android.support.v7.app.AppCompatActivity\nimport android.support.v7.widget.Toolbar\nimport org.jetbrains.anko.AnkoLogger\n\nimport org.wit.placemark.models.PlacemarkModel\nimport org.wit.placemark.views.editlocation.EditLocationView\nimport org.wit.placemark.views.map.PlacemarkMapView\nimport org.wit.placemark.views.placemark.PlacemarkView\nimport org.wit.placemark.views.placemarklist.PlacemarkListView\n\nval IMAGE_REQUEST = 1\nval LOCATION_REQUEST = 2\n\nenum class VIEW {\n  LOCATION, PLACEMARK, MAPS, LIST\n}\n\nopen abstract class BaseView() : AppCompatActivity(), AnkoLogger {\n\n  var basePresenter: BasePresenter? = null\n\n  fun navigateTo(view: VIEW, code: Int = 0, key: String = &quot;&quot;, value: Parcelable? = null) {\n    var intent = Intent(this, PlacemarkListView::class.java)\n    when (view) {\n      VIEW.LOCATION -&gt; intent = Intent(this, EditLocationView::class.java)\n      VIEW.PLACEMARK -&gt; intent = Intent(this, PlacemarkView::class.java)\n      VIEW.MAPS -&gt; intent = Intent(this, PlacemarkMapView::class.java)\n      VIEW.LIST -&gt; intent = Intent(this, PlacemarkListView::class.java)\n    }\n    if (key != &quot;&quot;) {\n      intent.putExtra(key, value)\n    }\n    startActivityForResult(intent, code)\n  }\n\n  fun initPresenter(presenter: BasePresenter): BasePresenter {\n    basePresenter = presenter\n    return presenter\n  }\n\n  fun init(toolbar: Toolbar) {\n    toolbar.title = title\n    setSupportActionBar(toolbar)\n  }\n\n  override fun onDestroy() {\n    basePresenter?.onDestroy()\n    super.onDestroy()\n  }\n\n\n  override fun onActivityResult(requestCode: Int, resultCode: Int, data: Intent?) {\n    super.onActivityResult(requestCode, resultCode, data)\n    if (data != null) {\n      basePresenter?.doActivityResult(requestCode, resultCode, data)\n    }\n  }\n\n  override fun onRequestPermissionsResult(requestCode: Int, permissions: Array&lt;String&gt;, grantResults: IntArray) {\n    basePresenter?.doRequestPermissionsResult(requestCode, permissions, grantResults)\n  }\n\n  open fun showPlacemark(placemark: PlacemarkModel) {}\n  open fun showPlacemarks(placemarks: List&lt;PlacemarkModel&gt;) {}\n  open fun showProgress() {}\n  open fun hideProgress() {}\n}</code></pre>\n<p>This is more involved, including:</p>\n<ul>\n<li>utility method for launching activities</li>\n<li>some default lifecycle implementations </li>\n<li>shared initialisation of the toolbar</li>\n<li>stubbed specification of useful methods which concrete View classes will implement.</li>\n</ul>\n",
  "<p>These new classes will implement some commonality that can be extracted from our MVP implementation.</p>\n",
  " PlacemarkPresenter/View",
  "<h1>PlacemarkPresenter/View</h1>\n<p>Notice in this implementation that the view reference may be null, thus all access is via null safe calls.</p>\n<h2>PlacemarkPresenter</h2>\n<pre><code>package org.wit.placemark.views.placemark\n\nimport android.content.Intent\nimport org.wit.placemark.helpers.showImagePicker\nimport org.wit.placemark.models.Location\nimport org.wit.placemark.models.PlacemarkModel\nimport org.wit.placemark.views.*\n\nclass PlacemarkPresenter(view: BaseView) : BasePresenter(view) {\n\n  var placemark = PlacemarkModel()\n  var defaultLocation = Location(52.245696, -7.139102, 15f)\n  var edit = false;\n\n  init {\n    if (view.intent.hasExtra(&quot;placemark_edit&quot;)) {\n      edit = true\n      placemark = view.intent.extras.getParcelable&lt;PlacemarkModel&gt;(&quot;placemark_edit&quot;)\n      view.showPlacemark(placemark)\n    }\n  }\n\n  fun doAddOrSave(title: String, description: String) {\n    placemark.title = title\n    placemark.description = description\n    if (edit) {\n      app.placemarks.update(placemark)\n    } else {\n      app.placemarks.create(placemark)\n    }\n    view?.finish()\n  }\n\n  fun doCancel() {\n    view?.finish()\n  }\n\n  fun doDelete() {\n    app.placemarks.delete(placemark)\n    view?.finish()\n  }\n\n  fun doSelectImage() {\n     view?.let{\n       showImagePicker(view!!, IMAGE_REQUEST)\n     }\n  }\n\n  fun doSetLocation() {\n    if (edit == false) {\n      view?.navigateTo(VIEW.LOCATION, LOCATION_REQUEST, &quot;location&quot;, defaultLocation)\n    } else {\n      view?.navigateTo(VIEW.LOCATION, LOCATION_REQUEST, &quot;location&quot;, Location(placemark.lat, placemark.lng, placemark.zoom))\n    }\n  }\n\n  override fun doActivityResult(requestCode: Int, resultCode: Int, data: Intent) {\n    when (requestCode) {\n      IMAGE_REQUEST -&gt; {\n        placemark.image = data.data.toString()\n        view?.showPlacemark(placemark)\n      }\n      LOCATION_REQUEST -&gt; {\n        val location = data.extras.getParcelable&lt;Location&gt;(&quot;location&quot;)\n        placemark.lat = location.lat\n        placemark.lng = location.lng\n        placemark.zoom = location.zoom\n      }\n    }\n  }\n}</code></pre>\n<p>This is the view:</p>\n<h2>PlacemarkView</h2>\n<pre><code>import org.wit.placemark.views.BaseView\n\nclass PlacemarkView : BaseView(), AnkoLogger {\n\n  lateinit var presenter: PlacemarkPresenter\n  var placemark = PlacemarkModel()\n\n  override fun onCreate(savedInstanceState: Bundle?) {\n    super.onCreate(savedInstanceState)\n    setContentView(R.layout.activity_placemark)\n\n    init(toolbarAdd)\n\n    presenter = initPresenter (PlacemarkPresenter(this)) as PlacemarkPresenter\n\n    chooseImage.setOnClickListener { presenter.doSelectImage() }\n\n    placemarkLocation.setOnClickListener { presenter.doSetLocation() }\n  }\n\n  override fun showPlacemark(placemark: PlacemarkModel) {\n    placemarkTitle.setText(placemark.title)\n    description.setText(placemark.description)\n    placemarkImage.setImageBitmap(readImageFromPath(this, placemark.image))\n    if (placemark.image != null) {\n      chooseImage.setText(R.string.change_placemark_image)\n    }\n  }\n\n  override fun onCreateOptionsMenu(menu: Menu): Boolean {\n    menuInflater.inflate(R.menu.menu_placemark, menu)\n    return super.onCreateOptionsMenu(menu)\n  }\n\n  override fun onOptionsItemSelected(item: MenuItem?): Boolean {\n    when (item?.itemId) {\n      R.id.item_delete -&gt; {\n        presenter.doDelete()\n      }\n      R.id.item_save -&gt; {\n        if (placemarkTitle.text.toString().isEmpty()) {\n          toast(R.string.enter_placemark_title)\n        } else {\n          presenter.doAddOrSave(placemarkTitle.text.toString(), description.text.toString())\n        }\n      }\n    }\n    return super.onOptionsItemSelected(item)\n  }\n\n  override fun onActivityResult(requestCode: Int, resultCode: Int, data: Intent?) {\n    super.onActivityResult(requestCode, resultCode, data)\n    if (data != null) {\n      presenter.doActivityResult(requestCode, resultCode, data)\n    }\n  }\n\n  override fun onBackPressed() {\n    presenter.doCancel()\n  }\n}</code></pre>\n",
  "<p>Notice in this implementation that the view reference may be null, thus all access is via null safe calls.</p>\n",
  " PlacemarkListView/Presenter",
  "<h1>PlacemarkListView/Presenter</h1>\n<p>Notice in the presenter a more attractive signature for launching activities in the <code>navigateTo</code> method:</p>\n<h2>PlacemarkListPresenter</h2>\n<pre><code>package org.wit.placemark.views.placemarklist\n\nimport org.wit.placemark.models.PlacemarkModel\nimport org.wit.placemark.views.BasePresenter\nimport org.wit.placemark.views.BaseView\nimport org.wit.placemark.views.VIEW\n\nclass PlacemarkListPresenter(view: BaseView) : BasePresenter(view) {\n\n  fun doAddPlacemark() {\n    view?.navigateTo(VIEW.PLACEMARK)\n  }\n\n  fun doEditPlacemark(placemark: PlacemarkModel) {\n    view?.navigateTo(VIEW.PLACEMARK, 0, &quot;placemark_edit&quot;, placemark)\n  }\n\n  fun doShowPlacemarksMap() {\n    view?.navigateTo(VIEW.MAPS)\n  }\n\n  fun loadPlacemarks() {\n    view?.showPlacemarks(app.placemarks.findAll())\n  }\n}</code></pre>\n<p>This is the view:</p>\n<h2>PlacemarkListView</h2>\n<pre><code>package org.wit.placemark.views.placemarklist\n\nimport android.content.Intent\nimport android.os.Bundle\nimport android.support.v7.widget.LinearLayoutManager\nimport android.view.*\nimport kotlinx.android.synthetic.main.activity_placemark_list.*\nimport org.wit.placemark.R\nimport org.wit.placemark.models.PlacemarkModel\nimport org.wit.placemark.views.BaseView\n\nclass PlacemarkListView :  BaseView(), PlacemarkListener {\n\n  lateinit var presenter: PlacemarkListPresenter\n\n  override fun onCreate(savedInstanceState: Bundle?) {\n    super.onCreate(savedInstanceState)\n    setContentView(R.layout.activity_placemark_list)\n    init(toolbarMain)\n\n    presenter = initPresenter(PlacemarkListPresenter(this)) as PlacemarkListPresenter\n\n    val layoutManager = LinearLayoutManager(this)\n    recyclerView.layoutManager = layoutManager\n    presenter.loadPlacemarks()\n  }\n\n  override fun showPlacemarks(placemarks: List&lt;PlacemarkModel&gt;) {\n    recyclerView.adapter = PlacemarkAdapter(placemarks, this)\n    recyclerView.adapter?.notifyDataSetChanged()\n  }\n\n  override fun onCreateOptionsMenu(menu: Menu?): Boolean {\n    menuInflater.inflate(R.menu.menu_main, menu)\n    return super.onCreateOptionsMenu(menu)\n  }\n\n  override fun onOptionsItemSelected(item: MenuItem?): Boolean {\n    when (item?.itemId) {\n      R.id.item_add -&gt; presenter.doAddPlacemark()\n      R.id.item_map -&gt; presenter.doShowPlacemarksMap()\n    }\n    return super.onOptionsItemSelected(item)\n  }\n\n  override fun onPlacemarkClick(placemark: PlacemarkModel) {\n    presenter.doEditPlacemark(placemark)\n  }\n\n  override fun onActivityResult(requestCode: Int, resultCode: Int, data: Intent?) {\n    presenter.loadPlacemarks()\n    super.onActivityResult(requestCode, resultCode, data)\n  }\n}</code></pre>\n",
  "<p>Notice in the presenter a more attractive signature for launching activities in the <code>navigateTo</code> method:</p>\n",
  "<h1>Solution</h1>\n<p>Placemark application so far:</p>\n<ul>\n<li><a href=\"archives/archive.zip\">archive.zip</a></li>\n</ul>\n<h1>Exercise 1</h1>\n<p>Using this lab as a guide, convert PlacemarkMapView/Presenter to use the PlacemarkView/Presenter base classes</p>\n<h1>Exercise 2</h1>\n<p>Also convert EditLoctionView/Presenter to use the base classes</p>\n",
  "00.Lab-09a Location.md",
  "<h1>Objectives</h1>\n<p>When creating a new placemark, use the current location as the starting point.</p>\n",
  "<h1>Solutions</h1>\n<h1>Exercise 1</h1>\n<p>Using this lab as a guide, convert PlacemarkMapView/Presenter to use the PlacemarkView/Presenter base classes</p>\n<h2>Solution</h2>\n<h2>PlacemarkMapPresenter</h2>\n<pre><code>package org.wit.placemark.views.map\n\nimport com.google.android.gms.maps.CameraUpdateFactory\nimport com.google.android.gms.maps.GoogleMap\nimport com.google.android.gms.maps.model.LatLng\nimport com.google.android.gms.maps.model.Marker\nimport com.google.android.gms.maps.model.MarkerOptions\nimport org.wit.placemark.models.PlacemarkModel\nimport org.wit.placemark.views.BasePresenter\nimport org.wit.placemark.views.BaseView\n\nclass PlacemarkMapPresenter(view: BaseView) : BasePresenter(view) {\n\n  fun doPopulateMap(map: GoogleMap, placemarks: List&lt;PlacemarkModel&gt;) {\n    map.uiSettings.setZoomControlsEnabled(true)\n    placemarks.forEach {\n      val loc = LatLng(it.lat, it.lng)\n      val options = MarkerOptions().title(it.title).position(loc)\n      map.addMarker(options).tag = it.id\n      map.moveCamera(CameraUpdateFactory.newLatLngZoom(loc, it.zoom))\n    }\n  }\n\n  fun doMarkerSelected(marker: Marker) {\n    val tag = marker.tag as Long\n    val placemark = app.placemarks.findById(tag)\n    if (placemark != null) view?.showPlacemark(placemark)\n\n  }\n\n  fun loadPlacemarks() {\n    view?.showPlacemarks(app.placemarks.findAll())\n  }\n}</code></pre>\n<h2>PlacemarkMapView</h2>\n<pre><code>package org.wit.placemark.views.map\n\nimport android.os.Bundle\nimport com.google.android.gms.maps.GoogleMap\nimport com.google.android.gms.maps.model.Marker\nimport org.wit.placemark.R\nimport kotlinx.android.synthetic.main.activity_placemark_map.*\nimport kotlinx.android.synthetic.main.content_placemark_map.*\nimport org.wit.placemark.helpers.readImageFromPath\nimport org.wit.placemark.models.PlacemarkModel\nimport org.wit.placemark.views.BaseView\n\nclass PlacemarkMapView : BaseView(), GoogleMap.OnMarkerClickListener {\n\n  lateinit var presenter: PlacemarkMapPresenter\n  lateinit var map : GoogleMap\n\n  override fun onCreate(savedInstanceState: Bundle?) {\n    super.onCreate(savedInstanceState)\n    setContentView(R.layout.activity_placemark_map)\n    super.init(toolbarMaps)\n\n    presenter = initPresenter (PlacemarkMapPresenter(this)) as PlacemarkMapPresenter\n\n    mapView.onCreate(savedInstanceState);\n    mapView.getMapAsync {\n      map = it\n      map.setOnMarkerClickListener(this)\n      presenter.loadPlacemarks()\n    }\n  }\n\n  override fun showPlacemark(placemark: PlacemarkModel) {\n    currentTitle.text = placemark.title\n    currentDescription.text = placemark.description\n    imageView.setImageBitmap(readImageFromPath(this, placemark.image))\n  }\n\n  override fun showPlacemarks(placemarks: List&lt;PlacemarkModel&gt;) {\n    presenter.doPopulateMap(map, placemarks)\n  }\n\n  override fun onMarkerClick(marker: Marker): Boolean {\n    presenter.doMarkerSelected(marker)\n    return true\n  }\n\n  override fun onDestroy() {\n    super.onDestroy()\n    mapView.onDestroy()\n  }\n\n  override fun onLowMemory() {\n    super.onLowMemory()\n    mapView.onLowMemory()\n  }\n\n  override fun onPause() {\n    super.onPause()\n    mapView.onPause()\n  }\n\n  override fun onResume() {\n    super.onResume()\n    mapView.onResume()\n  }\n\n  override fun onSaveInstanceState(outState: Bundle?) {\n    super.onSaveInstanceState(outState)\n    mapView.onSaveInstanceState(outState)\n  }\n}</code></pre>\n",
  "<h1>Solutions</h1>\n<h1>Exercise 2</h1>\n<p>Also convert EditLoctionView/Presenter to use the base classes</p>\n<h2>Solution</h2>\n<h2>EditLocationPresenter</h2>\n<pre><code>import com.google.android.gms.maps.model.MarkerOptions\nimport org.wit.placemark.models.Location\nimport org.wit.placemark.views.BasePresenter\nimport org.wit.placemark.views.BaseView\n\nclass EditLocationPresenter(view: BaseView) : BasePresenter(view) {\n\n  var location = Location()\n\n  init {\n    location = view.intent.extras.getParcelable&lt;Location&gt;(&quot;location&quot;)\n  }\n\n  fun doConfigureMap(map: GoogleMap) {\n    val loc = LatLng(location.lat, location.lng)\n    val options = MarkerOptions()\n        .title(&quot;Placemark&quot;)\n        .snippet(&quot;GPS : &quot; + loc.toString())\n        .draggable(true)\n        .position(loc)\n    map.addMarker(options)\n    map.moveCamera(CameraUpdateFactory.newLatLngZoom(loc, location.zoom))\n  }\n\n  fun doUpdateLocation(lat: Double, lng: Double) {\n    location.lat = lat\n    location.lng = lng\n  }\n\n  fun doSave() {\n    val resultIntent = Intent()\n    resultIntent.putExtra(&quot;location&quot;, location)\n    view?.setResult(0, resultIntent)\n    view?.finish()\n  }\n\n  fun doUpdateMarker(marker: Marker) {\n    val loc = LatLng(location.lat, location.lng)\n    marker.setSnippet(&quot;GPS : &quot; + loc.toString())\n  }\n}</code></pre>\n<h2>EditLocationView</h2>\n<pre><code>package org.wit.placemark.views.editlocation\n\nimport android.os.Bundle\nimport com.google.android.gms.maps.GoogleMap\nimport com.google.android.gms.maps.SupportMapFragment\nimport com.google.android.gms.maps.model.Marker\nimport org.wit.placemark.R\nimport org.wit.placemark.views.BaseView\n\nclass EditLocationView : BaseView(), GoogleMap.OnMarkerDragListener, GoogleMap.OnMarkerClickListener {\n\n  lateinit var map: GoogleMap\n  lateinit var presenter: EditLocationPresenter\n\n  override fun onCreate(savedInstanceState: Bundle?) {\n    super.onCreate(savedInstanceState)\n    setContentView(R.layout.activity_maps)\n    val mapFragment = supportFragmentManager.findFragmentById(R.id.map) as SupportMapFragment\n    presenter = EditLocationPresenter(this)\n    mapFragment.getMapAsync {\n      map = it\n      map.setOnMarkerDragListener(this)\n      map.setOnMarkerClickListener(this)\n      presenter.doConfigureMap(map)\n    }\n  }\n\n  override fun onMarkerDragStart(marker: Marker) {}\n\n  override fun onMarkerDrag(marker: Marker) {}\n\n  override fun onMarkerDragEnd(marker: Marker) {\n    presenter.doUpdateLocation(marker.position.latitude, marker.position.longitude)\n  }\n\n  override fun onBackPressed() {\n    presenter.doSave()\n  }\n\n  override fun onMarkerClick(marker: Marker): Boolean {\n    presenter.doUpdateMarker(marker)\n    return false\n  }\n}</code></pre>\n",
  "<h1>Exercise 2</h1>\n",
  " MapView",
  "<h1>MapView</h1>\n<p>Using the Layout Editor, restructure activity_placemark to contain a MapView:</p>\n<p><img src=\"img/03.png\" alt=\"\"></p>\n<p>This is the layout file:</p>\n<h2>activity_placemark.xml</h2>\n<pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;\n&lt;android.support.constraint.ConstraintLayout\n  xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;\n  xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot;\n  xmlns:tools=&quot;http://schemas.android.com/tools&quot;\n  android:layout_width=&quot;match_parent&quot;\n  android:layout_height=&quot;match_parent&quot;\n  tools:context=&quot;org.wit.placemark.views.placemark.PlacemarkView&quot;&gt;\n\n  &lt;android.support.design.widget.AppBarLayout\n    android:id=&quot;@+id/appBarLayout&quot;\n    android:layout_width=&quot;match_parent&quot;\n    android:layout_height=&quot;wrap_content&quot;\n    android:background=&quot;@color/colorAccent&quot;\n    android:fitsSystemWindows=&quot;true&quot;\n    app:elevation=&quot;0dip&quot;\n    app:theme=&quot;@style/ThemeOverlay.AppCompat.Dark.ActionBar&quot;&gt;\n\n    &lt;android.support.v7.widget.Toolbar\n      android:id=&quot;@+id/toolbarAdd&quot;\n      android:layout_width=&quot;match_parent&quot;\n      android:layout_height=&quot;wrap_content&quot;\n      app:titleTextColor=&quot;@color/colorPrimary&quot; /&gt;\n\n  &lt;/android.support.design.widget.AppBarLayout&gt;\n\n  &lt;android.support.constraint.ConstraintLayout\n    android:layout_width=&quot;match_parent&quot;\n    android:layout_height=&quot;600dp&quot;\n    android:layout_marginEnd=&quot;8dp&quot;\n    android:layout_marginStart=&quot;8dp&quot;\n    app:layout_constraintEnd_toEndOf=&quot;parent&quot;\n    app:layout_constraintStart_toStartOf=&quot;parent&quot;\n    app:layout_constraintTop_toTopOf=&quot;parent&quot;&gt;\n\n    &lt;EditText\n      android:id=&quot;@+id/placemarkTitle&quot;\n      android:layout_width=&quot;365dp&quot;\n      android:layout_height=&quot;wrap_content&quot;\n      android:layout_marginEnd=&quot;8dp&quot;\n      android:layout_marginStart=&quot;8dp&quot;\n      android:layout_marginTop=&quot;64dp&quot;\n      android:ems=&quot;10&quot;\n      android:hint=&quot;@string/hint_placemarkTitle&quot;\n      android:inputType=&quot;text&quot;\n      app:layout_constraintEnd_toEndOf=&quot;parent&quot;\n      app:layout_constraintHorizontal_bias=&quot;0.503&quot;\n      app:layout_constraintStart_toStartOf=&quot;parent&quot;\n      app:layout_constraintTop_toTopOf=&quot;parent&quot; /&gt;\n\n    &lt;EditText\n      android:id=&quot;@+id/description&quot;\n      android:layout_width=&quot;365dp&quot;\n      android:layout_height=&quot;wrap_content&quot;\n      android:layout_marginEnd=&quot;8dp&quot;\n      android:layout_marginStart=&quot;8dp&quot;\n      android:layout_marginTop=&quot;8dp&quot;\n      android:ems=&quot;10&quot;\n      android:hint=&quot;@string/hint_placemarkDescription&quot;\n      android:inputType=&quot;textPersonName&quot;\n      app:layout_constraintEnd_toEndOf=&quot;parent&quot;\n      app:layout_constraintStart_toStartOf=&quot;parent&quot;\n      app:layout_constraintTop_toBottomOf=&quot;@+id/placemarkTitle&quot; /&gt;\n\n    &lt;Button\n      android:id=&quot;@+id/chooseImage&quot;\n      android:layout_width=&quot;0dp&quot;\n      android:layout_height=&quot;wrap_content&quot;\n      android:layout_marginStart=&quot;8dp&quot;\n      android:layout_marginEnd=&quot;8dp&quot;\n      android:text=&quot;@string/button_addImage&quot;\n      app:layout_constraintEnd_toEndOf=&quot;parent&quot;\n      app:layout_constraintStart_toStartOf=&quot;parent&quot;\n      app:layout_constraintTop_toBottomOf=&quot;@+id/description&quot; /&gt;\n\n    &lt;Button\n      android:id=&quot;@+id/placemarkLocation&quot;\n      android:layout_width=&quot;0dp&quot;\n      android:layout_height=&quot;wrap_content&quot;\n      android:layout_marginStart=&quot;8dp&quot;\n      android:layout_marginTop=&quot;8dp&quot;\n      android:layout_marginEnd=&quot;8dp&quot;\n      android:text=&quot;@string/button_location&quot;\n      app:layout_constraintEnd_toEndOf=&quot;parent&quot;\n      app:layout_constraintStart_toStartOf=&quot;parent&quot;\n      app:layout_constraintTop_toBottomOf=&quot;@+id/placemarkImage&quot; /&gt;\n\n    &lt;ImageView\n      android:id=&quot;@+id/placemarkImage&quot;\n      android:layout_width=&quot;355dp&quot;\n      android:layout_height=&quot;139dp&quot;\n      android:layout_marginStart=&quot;8dp&quot;\n      android:layout_marginTop=&quot;16dp&quot;\n      android:layout_marginEnd=&quot;8dp&quot;\n      app:layout_constraintEnd_toEndOf=&quot;parent&quot;\n      app:layout_constraintHorizontal_bias=&quot;0.0&quot;\n      app:layout_constraintStart_toStartOf=&quot;parent&quot;\n      app:layout_constraintTop_toBottomOf=&quot;@+id/chooseImage&quot;\n      app:srcCompat=&quot;@drawable/ic_launcher_background&quot; /&gt;\n\n    &lt;com.google.android.gms.maps.MapView\n      android:id=&quot;@+id/mapView&quot;\n      android:layout_width=&quot;0dp&quot;\n      android:layout_height=&quot;163dp&quot;\n      android:layout_marginStart=&quot;8dp&quot;\n      android:layout_marginTop=&quot;8dp&quot;\n      android:layout_marginEnd=&quot;8dp&quot;\n      android:layout_marginBottom=&quot;8dp&quot;\n      app:layout_constraintBottom_toBottomOf=&quot;parent&quot;\n      app:layout_constraintEnd_toEndOf=&quot;parent&quot;\n      app:layout_constraintStart_toStartOf=&quot;parent&quot;\n      app:layout_constraintTop_toBottomOf=&quot;@+id/placemarkLocation&quot; /&gt;\n\n  &lt;/android.support.constraint.ConstraintLayout&gt;\n\n&lt;/android.support.constraint.ConstraintLayout&gt;</code></pre>\n",
  "<p>Using the Layout Editor, restructure activity_placemark to contain a MapView:</p>\n",
  "# PlacemarkView",
  "<h2>PlacemarkView</h2>\n<p>We should be familiar with manually managing a MapView component, which involves:</p>\n<ul>\n<li>declaring a GoogleMap reference</li>\n<li>initialising the mapView widget + using it to acquire the googleMap reference</li>\n<li>manage the mapView lifecycle</li>\n</ul>\n<pre><code>...\nclass PlacemarkView : BaseView(), AnkoLogger {\n  ...\n  lateinit var map: GoogleMap\n  ...\n\n  override fun onCreate(savedInstanceState: Bundle?) {\n    ...\n    mapView.onCreate(savedInstanceState);\n    mapView.getMapAsync {\n      map = it\n      presenter.doConfigureMap(map)\n    }\n  }\n\n  ...\n\n  override fun onDestroy() {\n    super.onDestroy()\n    mapView.onDestroy()\n  }\n\n  override fun onLowMemory() {\n    super.onLowMemory()\n    mapView.onLowMemory()\n  }\n\n  override fun onPause() {\n    super.onPause()\n    mapView.onPause()\n  }\n\n  override fun onResume() {\n    super.onResume()\n    mapView.onResume()\n  }\n\n  override fun onSaveInstanceState(outState: Bundle?) {\n    super.onSaveInstanceState(outState)\n    mapView.onSaveInstanceState(outState)\n  }\n}</code></pre>\n<pre><code>class PlacemarkPresenter(view: BaseView) : BasePresenter(view) {\n\n  var map: GoogleMap? = null\n\n\n  fun doConfigureMap(m: GoogleMap) {\n    map = m\n    locationUpdate(placemark.lat, placemark.lng)\n  }\n\n  fun locationUpdate(lat: Double, lng: Double) {\n    placemark.lat = lat\n    placemark.lng = lng\n    placemark.zoom = 15f\n    map?.clear()\n    map?.uiSettings?.setZoomControlsEnabled(true)\n    val options = MarkerOptions().title(placemark.title).position(LatLng(placemark.lat, placemark.lng))\n    map?.addMarker(options)\n    map?.moveCamera(CameraUpdateFactory.newLatLngZoom(LatLng(placemark.lat, placemark.lng), placemark.zoom))\n    view?.showPlacemark(placemark)\n  }</code></pre>\n<p>This will ensure that the marker is placed on the map correctly - if the placemark already exists. For a new placemark, we would need to take special measures:</p>\n<p>In the init block, if we are not in edit mode, set the location to the default:</p>\n<pre><code>  init {\n    if (view.intent.hasExtra(&quot;placemark_edit&quot;)) {\n      edit = true\n      placemark = view.intent.extras.getParcelable&lt;PlacemarkModel&gt;(&quot;placemark_edit&quot;)\n      view.showPlacemark(placemark)\n    } else {\n      placemark.lat = defaultLocation.lat\n      placemark.lng = defaultLocation.lng\n    }\n  }</code></pre>\n<p>Also, when the user has edited the location - make sure to also update the position:</p>\n<pre><code>  override fun doActivityResult(requestCode: Int, resultCode: Int, data: Intent) {\n    ...\n    ...\n      LOCATION_REQUEST -&gt; {\n        val location = data.extras.getParcelable&lt;Location&gt;(&quot;location&quot;)\n        placemark.lat = location.lat\n        placemark.lng = location.lng\n        placemark.zoom = location.zoom\n        locationUpdate(placemark.lat, placemark.lng)\n      }\n    }\n  }</code></pre>\n<p>This is the complete class at this stage:</p>\n<h2>PlacemarkPresenter</h2>\n<pre><code>class PlacemarkPresenter(view: BaseView) : BasePresenter(view) {\n\n  var map: GoogleMap? = null\n  var placemark = PlacemarkModel()\n  var defaultLocation = Location(52.245696, -7.139102, 15f)\n  var edit = false;\n\n  init {\n    if (view.intent.hasExtra(&quot;placemark_edit&quot;)) {\n      edit = true\n      placemark = view.intent.extras.getParcelable&lt;PlacemarkModel&gt;(&quot;placemark_edit&quot;)\n      view.showPlacemark(placemark)\n    } else {\n      placemark.lat = defaultLocation.lat\n      placemark.lng = defaultLocation.lng\n    }\n  }\n\n  fun doConfigureMap(m: GoogleMap) {\n    map = m\n    locationUpdate(placemark.lat, placemark.lng)\n  }\n\n  fun locationUpdate(lat: Double, lng: Double) {\n    placemark.lat = lat\n    placemark.lng = lng\n    placemark.zoom = 15f\n    map?.clear()\n    map?.uiSettings?.setZoomControlsEnabled(true)\n    val options = MarkerOptions().title(placemark.title).position(LatLng(placemark.lat, placemark.lng))\n    map?.addMarker(options)\n    map?.moveCamera(CameraUpdateFactory.newLatLngZoom(LatLng(placemark.lat, placemark.lng), placemark.zoom))\n    view?.showPlacemark(placemark)\n  }\n\n  fun doAddOrSave(title: String, description: String) {\n    placemark.title = title\n    placemark.description = description\n    if (edit) {\n      app.placemarks.update(placemark)\n    } else {\n      app.placemarks.create(placemark)\n    }\n    view?.finish()\n  }\n\n  fun doCancel() {\n    view?.finish()\n  }\n\n  fun doDelete() {\n    app.placemarks.delete(placemark)\n    view?.finish()\n  }\n\n  fun doSelectImage() {\n     view?.let{\n       showImagePicker(view!!, IMAGE_REQUEST)\n     }\n  }\n\n  fun doSetLocation() {\n    if (edit == false) {\n      view?.navigateTo(VIEW.LOCATION, LOCATION_REQUEST, &quot;location&quot;, defaultLocation)\n    } else {\n      view?.navigateTo(VIEW.LOCATION, LOCATION_REQUEST, &quot;location&quot;, Location(placemark.lat, placemark.lng, placemark.zoom))\n    }\n  }\n\n  override fun doActivityResult(requestCode: Int, resultCode: Int, data: Intent) {\n    when (requestCode) {\n      IMAGE_REQUEST -&gt; {\n        placemark.image = data.data.toString()\n        view?.showPlacemark(placemark)\n      }\n      LOCATION_REQUEST -&gt; {\n        val location = data.extras.getParcelable&lt;Location&gt;(&quot;location&quot;)\n        placemark.lat = location.lat\n        placemark.lng = location.lng\n        placemark.zoom = location.zoom\n        locationUpdate(placemark.lat, placemark.lng)\n      }\n    }\n  }\n}</code></pre>\n<p>It still does not determine the actual current location.</p>\n",
  "<p>We should be familiar with manually managing a MapView component, which involves:</p>\n",
  " Location Libraries",
  "<h1>Location Libraries</h1>\n<p>In order to determine the current location, we need the google play service location libraries:</p>\n<h2>gradle</h2>\n<pre><code>...\n  implementation &quot;com.google.android.gms:play-services-location:16.0.0&quot;\n...</code></pre>\n<p>We also need this new helper class:</p>\n<h2>LocationHelpers</h2>\n<pre><code>package org.wit.placemark.helpers\n\nimport android.Manifest\nimport android.app.Activity\nimport android.content.pm.PackageManager\nimport android.support.v4.app.ActivityCompat\nimport android.util.Log\n\nval REQUEST_PERMISSIONS_REQUEST_CODE = 34\n\nfun checkLocationPermissions(activity: Activity) : Boolean {\n  if (ActivityCompat.checkSelfPermission(activity, Manifest.permission.ACCESS_FINE_LOCATION) == PackageManager.PERMISSION_GRANTED) {\n    return true\n  }\n  else {\n    ActivityCompat.requestPermissions(activity, arrayOf(Manifest.permission.ACCESS_FINE_LOCATION), REQUEST_PERMISSIONS_REQUEST_CODE)\n    return false\n  }\n}\n\nfun isPermissionGranted(code: Int, grantResults: IntArray): Boolean {\n  var permissionGranted = false;\n  if (code == REQUEST_PERMISSIONS_REQUEST_CODE) {\n    when {\n      grantResults.isEmpty() -&gt; Log.i(&quot;Location&quot;, &quot;User interaction was cancelled.&quot;)\n      (grantResults[0] == PackageManager.PERMISSION_GRANTED) -&gt; {\n        permissionGranted = true\n        Log.i(&quot;Location&quot;, &quot;Permission Granted.&quot;)\n      }\n      else -&gt; Log.i(&quot;Location&quot;, &quot;Permission Denied.&quot;)\n    }\n  }\n  return permissionGranted\n}</code></pre>\n",
  "<p>In order to determine the current location, we need the google play service location libraries:</p>\n",
  " Location Permissions",
  "<h1>Location Permissions</h1>\n<p>If we wish to access the devices current location, we will need to prompt the user to grant this permission - and be able to proceed in an orderly manner if this permission is denied.</p>\n<p>First, in the presenter, acquire a reference to the location provider client:</p>\n<pre><code>  var locationService: FusedLocationProviderClient = LocationServices.getFusedLocationProviderClient(view)</code></pre>\n<p>Th init block is modified to check to see if permission is requires (or already has been granted):</p>\n<pre><code>  init {\n    if (view.intent.hasExtra(&quot;placemark_edit&quot;)) {\n      edit = true\n      placemark = view.intent.extras.getParcelable&lt;PlacemarkModel&gt;(&quot;placemark_edit&quot;)\n      view.showPlacemark(placemark)\n    } else {\n      if (checkLocationPermissions(view)) {\n        // todo get the current location\n      }\n    }\n  }</code></pre>\n<p>This method will be called with the users response to the permissions dialog:</p>\n<pre><code>  override fun doRequestPermissionsResult(requestCode: Int, permissions: Array&lt;String&gt;, grantResults: IntArray) {\n    if (isPermissionGranted(requestCode, grantResults)) {\n      // todo get the current location\n    } else {\n      // permissions denied, so use the default location\n      locationUpdate(defaultLocation.lat, defaultLocation.lng)\n    }\n  }</code></pre>\n<p>Run the application now - when you create a new placemark you should see this dialog:</p>\n<p><img src=\"img/01x.png\" alt=\"\"></p>\n<p>Close the app and run it again. Does the dialog appear? (it doesnt).</p>\n<p>Now, close the app and delete from the phone. Rerun - and the dialog will reappear. Android is persisting the permission request/response, only displaying once.</p>\n<p>This is the presenter at this stage (we still are not acquiring the current location)</p>\n<h2>PlacemarkPresenter</h2>\n<pre><code>package org.wit.placemark.views.placemark\n\nimport android.annotation.SuppressLint\nimport android.content.Intent\nimport com.google.android.gms.location.FusedLocationProviderClient\nimport com.google.android.gms.location.LocationServices\nimport com.google.android.gms.maps.CameraUpdateFactory\nimport com.google.android.gms.maps.GoogleMap\nimport com.google.android.gms.maps.model.LatLng\nimport com.google.android.gms.maps.model.MarkerOptions\nimport kotlinx.android.synthetic.main.activity_maps.*\nimport org.wit.placemark.helpers.checkLocationPermissions\nimport org.wit.placemark.helpers.isPermissionGranted\nimport org.wit.placemark.helpers.showImagePicker\nimport org.wit.placemark.models.Location\nimport org.wit.placemark.models.PlacemarkModel\nimport org.wit.placemark.views.*\n\nclass PlacemarkPresenter(view: BaseView) : BasePresenter(view) {\n\n  var map: GoogleMap? = null\n  var locationService: FusedLocationProviderClient = LocationServices.getFusedLocationProviderClient(view)\n\n  var placemark = PlacemarkModel()\n  var defaultLocation = Location(52.245696, -7.139102, 15f)\n  var edit = false;\n\n  init {\n    if (view.intent.hasExtra(&quot;placemark_edit&quot;)) {\n      edit = true\n      placemark = view.intent.extras.getParcelable&lt;PlacemarkModel&gt;(&quot;placemark_edit&quot;)\n      view.showPlacemark(placemark)\n    } else {\n      if (checkLocationPermissions(view)) {\n        // todo get the current location\n      }\n    }\n  }\n\n  fun doConfigureMap(m: GoogleMap) {\n    map = m\n    locationUpdate(placemark.lat, placemark.lng)\n  }\n\n  fun locationUpdate(lat: Double, lng: Double) {\n    placemark.lat = lat\n    placemark.lng = lng\n    placemark.zoom = 15f\n    map?.clear()\n    map?.uiSettings?.setZoomControlsEnabled(true)\n    val options = MarkerOptions().title(placemark.title).position(LatLng(placemark.lat, placemark.lng))\n    map?.addMarker(options)\n    map?.moveCamera(CameraUpdateFactory.newLatLngZoom(LatLng(placemark.lat, placemark.lng), placemark.zoom))\n    view?.showPlacemark(placemark)\n  }\n\n  override fun doRequestPermissionsResult(requestCode: Int, permissions: Array&lt;String&gt;, grantResults: IntArray) {\n    if (isPermissionGranted(requestCode, grantResults)) {\n      // todo get the current location\n    } else {\n      // permissions denied, so use the default location\n      locationUpdate(defaultLocation.lat, defaultLocation.lng)\n    }\n  }\n\n  fun doAddOrSave(title: String, description: String) {\n    placemark.title = title\n    placemark.description = description\n    if (edit) {\n      app.placemarks.update(placemark)\n    } else {\n      app.placemarks.create(placemark)\n    }\n    view?.finish()\n  }\n\n  fun doCancel() {\n    view?.finish()\n  }\n\n  fun doDelete() {\n    app.placemarks.delete(placemark)\n    view?.finish()\n  }\n\n  fun doSelectImage() {\n    view?.let {\n      showImagePicker(view!!, IMAGE_REQUEST)\n    }\n  }\n\n  fun doSetLocation() {\n    if (edit == false) {\n      view?.navigateTo(VIEW.LOCATION, LOCATION_REQUEST, &quot;location&quot;, defaultLocation)\n    } else {\n      view?.navigateTo(VIEW.LOCATION, LOCATION_REQUEST, &quot;location&quot;, Location(placemark.lat, placemark.lng, placemark.zoom))\n    }\n  }\n\n  override fun doActivityResult(requestCode: Int, resultCode: Int, data: Intent) {\n    when (requestCode) {\n      IMAGE_REQUEST -&gt; {\n        placemark.image = data.data.toString()\n        view?.showPlacemark(placemark)\n      }\n      LOCATION_REQUEST -&gt; {\n        val location = data.extras.getParcelable&lt;Location&gt;(&quot;location&quot;)\n        placemark.lat = location.lat\n        placemark.lng = location.lng\n        placemark.zoom = location.zoom\n        locationUpdate(placemark.lat, placemark.lng)\n      }\n    }\n  }\n}</code></pre>\n",
  "<p>If we wish to access the devices current location, we will need to prompt the user to grant this permission - and be able to proceed in an orderly manner if this permission is denied.</p>\n",
  " Requesting the Current Location",
  "<h1>Requesting the Current Location</h1>\n<p>Introduce this new method into the presenter:</p>\n<pre><code>  @SuppressLint(&quot;MissingPermission&quot;)\n  fun doSetCurrentLocation() {\n    locationService.lastLocation.addOnSuccessListener {\n      locationUpdate(it.latitude, it.longitude)\n    }\n  }</code></pre>\n<p>In the init block, we can now call this method:</p>\n<pre><code>      if (checkLocationPermissions(view)) {\n        doSetCurrentLocation()\n      }</code></pre>\n<p>Finally, we can complete the permissions response:</p>\n<pre><code>  override fun doRequestPermissionsResult(requestCode: Int, permissions: Array&lt;String&gt;, grantResults: IntArray) {\n    if (isPermissionGranted(requestCode, grantResults)) {\n      doSetCurrentLocation()\n    } else {\n      locationUpdate(defaultLocation.lat, defaultLocation.lng)\n    }\n  }</code></pre>\n<p>Also, our doSetLocation can be simplified:</p>\n<pre><code>  fun doSetLocation() {\n    view?.navigateTo(VIEW.LOCATION, LOCATION_REQUEST, &quot;location&quot;, Location(placemark.lat, placemark.lng, placemark.zoom))\n  }</code></pre>\n<p>Testing this in the emulator, you do have the ability to set the simulator location:</p>\n<p><img src=\"img/02x.png\" alt=\"\"></p>\n<p>However, if you change the location it might take a few minutes before it percolates into the location provider.</p>\n<p>This is the complete Presenter at this stage:</p>\n<pre><code>package org.wit.placemark.views.placemark\n\nimport android.annotation.SuppressLint\nimport android.content.Intent\nimport com.google.android.gms.location.FusedLocationProviderClient\nimport com.google.android.gms.location.LocationServices\nimport com.google.android.gms.maps.CameraUpdateFactory\nimport com.google.android.gms.maps.GoogleMap\nimport com.google.android.gms.maps.model.LatLng\nimport com.google.android.gms.maps.model.MarkerOptions\nimport org.wit.placemark.helpers.checkLocationPermissions\nimport org.wit.placemark.helpers.isPermissionGranted\nimport org.wit.placemark.helpers.showImagePicker\nimport org.wit.placemark.models.Location\nimport org.wit.placemark.models.PlacemarkModel\nimport org.wit.placemark.views.*\n\nclass PlacemarkPresenter(view: BaseView) : BasePresenter(view) {\n\n  var map: GoogleMap? = null\n  var placemark = PlacemarkModel()\n  var defaultLocation = Location(52.245696, -7.139102, 15f)\n  var edit = false;\n  var locationService: FusedLocationProviderClient = LocationServices.getFusedLocationProviderClient(view)\n\n  init {\n    if (view.intent.hasExtra(&quot;placemark_edit&quot;)) {\n      edit = true\n      placemark = view.intent.extras.getParcelable&lt;PlacemarkModel&gt;(&quot;placemark_edit&quot;)\n      view.showPlacemark(placemark)\n    } else {\n      if (checkLocationPermissions(view)) {\n        doSetCurrentLocation()\n      }\n    }\n  }\n\n  @SuppressLint(&quot;MissingPermission&quot;)\n  fun doSetCurrentLocation() {\n    locationService.lastLocation.addOnSuccessListener {\n      locationUpdate(it.latitude, it.longitude)\n    }\n  }\n\n  override fun doRequestPermissionsResult(requestCode: Int, permissions: Array&lt;String&gt;, grantResults: IntArray) {\n    if (isPermissionGranted(requestCode, grantResults)) {\n      doSetCurrentLocation()\n    } else {\n      locationUpdate(defaultLocation.lat, defaultLocation.lng)\n    }\n  }\n\n  fun doConfigureMap(m: GoogleMap) {\n    map = m\n    locationUpdate(placemark.lat, placemark.lng)\n  }\n\n  fun locationUpdate(lat: Double, lng: Double) {\n    placemark.lat = lat\n    placemark.lng = lng\n    placemark.zoom = 15f\n    map?.clear()\n    map?.uiSettings?.setZoomControlsEnabled(true)\n    val options = MarkerOptions().title(placemark.title).position(LatLng(placemark.lat, placemark.lng))\n    map?.addMarker(options)\n    map?.moveCamera(CameraUpdateFactory.newLatLngZoom(LatLng(placemark.lat, placemark.lng), placemark.zoom))\n    view?.showPlacemark(placemark)\n  }\n\n\n  fun doAddOrSave(title: String, description: String) {\n    placemark.title = title\n    placemark.description = description\n    if (edit) {\n      app.placemarks.update(placemark)\n    } else {\n      app.placemarks.create(placemark)\n    }\n    view?.finish()\n  }\n\n  fun doCancel() {\n    view?.finish()\n  }\n\n  fun doDelete() {\n    app.placemarks.delete(placemark)\n    view?.finish()\n  }\n\n  fun doSelectImage() {\n    view?.let {\n      showImagePicker(view!!, IMAGE_REQUEST)\n    }\n  }\n\n  fun doSetLocation() {\n    view?.navigateTo(VIEW.LOCATION, LOCATION_REQUEST, &quot;location&quot;, Location(placemark.lat, placemark.lng, placemark.zoom))\n  }\n\n  override fun doActivityResult(requestCode: Int, resultCode: Int, data: Intent) {\n    when (requestCode) {\n      IMAGE_REQUEST -&gt; {\n        placemark.image = data.data.toString()\n        view?.showPlacemark(placemark)\n      }\n      LOCATION_REQUEST -&gt; {\n        val location = data.extras.getParcelable&lt;Location&gt;(&quot;location&quot;)\n        placemark.lat = location.lat\n        placemark.lng = location.lng\n        placemark.zoom = location.zoom\n        locationUpdate(placemark.lat, placemark.lng)\n      }\n    }\n  }\n}</code></pre>\n",
  "<p>Introduce this new method into the presenter:</p>\n",
  "<h1>Solution</h1>\n<p>Placemark application so far:</p>\n<ul>\n<li><a href=\"archives/archive.zip\">archive.zip</a></li>\n</ul>\n<h2>Exercises</h2>\n<p>Look at the following version of the placemark activity:</p>\n<p><img src=\"img/03x.png\" alt=\"\"></p>\n<h2>Exercise 1:</h2>\n<p>As in the above, show the latitude/longitude of the placemark on the view.</p>\n<h2>Exercise 2:</h2>\n<p>Notice in the above that the &#39;Set Location&#39; button has been removed. If the map widget itself is clicked, then we will launch the EditLocation activity. Implement this capability</p>\n",
  "00.Lab-09b Tracking.md",
  "<h1>Objectives</h1>\n<p>Extend the location facility to track location in real time.</p>\n",
  " Exercise Solution 1",
  "<h1>Exercise Solution 1</h1>\n<p>This is the revised view we are seeking:</p>\n<p><img src=\"img/03x.png\" alt=\"\"></p>\n<p>activity_placemark layout to include lat/lng and remove the Set Location button:</p>\n<pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;\n&lt;android.support.constraint.ConstraintLayout\n  xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;\n  xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot;\n  xmlns:tools=&quot;http://schemas.android.com/tools&quot;\n  android:layout_width=&quot;match_parent&quot;\n  android:layout_height=&quot;match_parent&quot;\n  tools:context=&quot;org.wit.placemark.views.placemark.PlacemarkView&quot;&gt;\n\n  &lt;android.support.design.widget.AppBarLayout\n    android:id=&quot;@+id/appBarLayout&quot;\n    android:layout_width=&quot;match_parent&quot;\n    android:layout_height=&quot;wrap_content&quot;\n    android:background=&quot;@color/colorAccent&quot;\n    android:fitsSystemWindows=&quot;true&quot;\n    app:elevation=&quot;0dip&quot;\n    app:theme=&quot;@style/ThemeOverlay.AppCompat.Dark.ActionBar&quot;&gt;\n\n    &lt;android.support.v7.widget.Toolbar\n      android:id=&quot;@+id/toolbarAdd&quot;\n      android:layout_width=&quot;match_parent&quot;\n      android:layout_height=&quot;wrap_content&quot;\n      app:titleTextColor=&quot;@color/colorPrimary&quot; /&gt;\n\n  &lt;/android.support.design.widget.AppBarLayout&gt;\n\n  &lt;android.support.constraint.ConstraintLayout\n    android:layout_width=&quot;match_parent&quot;\n    android:layout_height=&quot;600dp&quot;\n    android:layout_marginEnd=&quot;8dp&quot;\n    android:layout_marginStart=&quot;8dp&quot;\n    app:layout_constraintEnd_toEndOf=&quot;parent&quot;\n    app:layout_constraintStart_toStartOf=&quot;parent&quot;\n    app:layout_constraintTop_toTopOf=&quot;parent&quot;&gt;\n\n    &lt;EditText\n      android:id=&quot;@+id/placemarkTitle&quot;\n      android:layout_width=&quot;239dp&quot;\n      android:layout_height=&quot;wrap_content&quot;\n      android:layout_marginStart=&quot;8dp&quot;\n      android:ems=&quot;10&quot;\n      android:hint=&quot;@string/hint_placemarkTitle&quot;\n      android:inputType=&quot;text&quot;\n      app:layout_constraintBaseline_toBaselineOf=&quot;@+id/textView&quot;\n      app:layout_constraintStart_toStartOf=&quot;parent&quot; /&gt;\n\n    &lt;EditText\n      android:id=&quot;@+id/description&quot;\n      android:layout_width=&quot;239dp&quot;\n      android:layout_height=&quot;wrap_content&quot;\n      android:layout_marginStart=&quot;8dp&quot;\n      android:ems=&quot;10&quot;\n      android:hint=&quot;@string/hint_placemarkDescription&quot;\n      android:inputType=&quot;textPersonName&quot;\n      app:layout_constraintBaseline_toBaselineOf=&quot;@+id/textView2&quot;\n      app:layout_constraintStart_toStartOf=&quot;parent&quot; /&gt;\n\n    &lt;Button\n      android:id=&quot;@+id/chooseImage&quot;\n      android:layout_width=&quot;0dp&quot;\n      android:layout_height=&quot;wrap_content&quot;\n      android:layout_marginStart=&quot;8dp&quot;\n      android:layout_marginEnd=&quot;8dp&quot;\n      android:text=&quot;@string/button_addImage&quot;\n      app:layout_constraintEnd_toEndOf=&quot;parent&quot;\n      app:layout_constraintStart_toStartOf=&quot;parent&quot;\n      app:layout_constraintTop_toBottomOf=&quot;@+id/description&quot; /&gt;\n\n    &lt;ImageView\n      android:id=&quot;@+id/placemarkImage&quot;\n      android:layout_width=&quot;0dp&quot;\n      android:layout_height=&quot;139dp&quot;\n      android:layout_marginStart=&quot;8dp&quot;\n      android:layout_marginTop=&quot;16dp&quot;\n      android:layout_marginEnd=&quot;8dp&quot;\n      app:layout_constraintEnd_toEndOf=&quot;parent&quot;\n      app:layout_constraintHorizontal_bias=&quot;0.0&quot;\n      app:layout_constraintStart_toStartOf=&quot;parent&quot;\n      app:layout_constraintTop_toBottomOf=&quot;@+id/chooseImage&quot;\n      app:srcCompat=&quot;@drawable/ic_launcher_background&quot; /&gt;\n\n    &lt;com.google.android.gms.maps.MapView\n      android:id=&quot;@+id/mapView&quot;\n      android:layout_width=&quot;0dp&quot;\n      android:layout_height=&quot;0dp&quot;\n      android:layout_marginStart=&quot;8dp&quot;\n      android:layout_marginTop=&quot;8dp&quot;\n      android:layout_marginEnd=&quot;8dp&quot;\n      app:layout_constraintBottom_toBottomOf=&quot;parent&quot;\n      app:layout_constraintEnd_toEndOf=&quot;parent&quot;\n      app:layout_constraintStart_toStartOf=&quot;parent&quot;\n      app:layout_constraintTop_toBottomOf=&quot;@+id/placemarkImage&quot; /&gt;\n\n    &lt;TextView\n      android:id=&quot;@+id/textView&quot;\n      android:layout_width=&quot;wrap_content&quot;\n      android:layout_height=&quot;wrap_content&quot;\n      android:layout_marginStart=&quot;8dp&quot;\n      android:text=&quot;Lat:&quot;\n      app:layout_constraintBaseline_toBaselineOf=&quot;@+id/lat&quot;\n      app:layout_constraintStart_toEndOf=&quot;@+id/placemarkTitle&quot; /&gt;\n\n    &lt;TextView\n      android:id=&quot;@+id/textView2&quot;\n      android:layout_width=&quot;wrap_content&quot;\n      android:layout_height=&quot;wrap_content&quot;\n      android:layout_marginStart=&quot;8dp&quot;\n      android:text=&quot;Lng:&quot;\n      app:layout_constraintBaseline_toBaselineOf=&quot;@+id/lng&quot;\n      app:layout_constraintStart_toEndOf=&quot;@+id/description&quot; /&gt;\n\n    &lt;TextView\n      android:id=&quot;@+id/lat&quot;\n      android:layout_width=&quot;wrap_content&quot;\n      android:layout_height=&quot;wrap_content&quot;\n      android:layout_marginStart=&quot;8dp&quot;\n      android:layout_marginTop=&quot;72dp&quot;\n      android:layout_marginEnd=&quot;8dp&quot;\n      android:text=&quot;00.000000&quot;\n      app:layout_constraintEnd_toEndOf=&quot;parent&quot;\n      app:layout_constraintStart_toEndOf=&quot;@+id/textView&quot;\n      app:layout_constraintTop_toTopOf=&quot;parent&quot; /&gt;\n\n    &lt;TextView\n      android:id=&quot;@+id/lng&quot;\n      android:layout_width=&quot;wrap_content&quot;\n      android:layout_height=&quot;wrap_content&quot;\n      android:layout_marginStart=&quot;8dp&quot;\n      android:layout_marginTop=&quot;20dp&quot;\n      android:layout_marginEnd=&quot;8dp&quot;\n      android:text=&quot;00.000000&quot;\n      app:layout_constraintEnd_toEndOf=&quot;parent&quot;\n      app:layout_constraintStart_toEndOf=&quot;@+id/textView2&quot;\n      app:layout_constraintTop_toBottomOf=&quot;@+id/lat&quot; /&gt;\n\n  &lt;/android.support.constraint.ConstraintLayout&gt;\n\n&lt;/android.support.constraint.ConstraintLayout&gt;</code></pre>\n",
  "<p>This is the revised view we are seeking:</p>\n",
  "<h2>PlacemarkView</h2>\n<p>In PlacemarkView, display the lat/lng:</p>\n<h2>PlacemarkView</h2>\n<pre><code>  override fun showPlacemark(placemark: PlacemarkModel) {\n    placemarkTitle.setText(placemark.title)\n    description.setText(placemark.description)\n    placemarkImage.setImageBitmap(readImageFromPath(this, placemark.image))\n    if (placemark.image != null) {\n      chooseImage.setText(R.string.change_placemark_image)\n    }\n    lat.setText(&quot;%.6f&quot;.format(placemark.lat))\n    lng.setText(&quot;%.6f&quot;.format(placemark.lng))\n  }</code></pre>\n<p>Also in PlacemarkView - remove references to the setLocation button:</p>\n<pre><code>   // placemarkLocation.setOnClickListener { presenter.doSetLocation() }</code></pre>\n<p>Instead, set an onClikcListener on the GoogleMap object:</p>\n<pre><code>    mapView.getMapAsync {\n      presenter.doConfigureMap(it)\n      it.setOnMapClickListener { presenter.doSetLocation() }\n    }</code></pre>\n",
  "<p>In PlacemarkView, display the lat/lng:</p>\n",
  " Live Location Updates",
  "<h1>Live Location Updates</h1>\n<p>First, we need a new helper function:</p>\n<h2>LocationHelper</h2>\n<pre><code>@SuppressLint(&quot;RestrictedApi&quot;)\nfun createDefaultLocationRequest() : LocationRequest {\n  val locationRequest = LocationRequest().apply {\n    interval = 10000\n    fastestInterval = 5000\n    priority = LocationRequest.PRIORITY_HIGH_ACCURACY\n  }\n  return locationRequest\n}</code></pre>\n<p>In PlacemarkPresenter, use this helper to initialise a new attribute:</p>\n<pre><code>  val locationRequest = createDefaultLocationRequest()</code></pre>\n<p>Now introduce a new method, also in the presenter:</p>\n<h2>PlacemarkPresenter</h2>\n<pre><code>  @SuppressLint(&quot;MissingPermission&quot;)\n  fun doResartLocationUpdates() {\n    var locationCallback = object : LocationCallback() {\n      override fun onLocationResult(locationResult: LocationResult?) {\n        if (locationResult != null &amp;&amp; locationResult.locations != null) {\n          val l = locationResult.locations.last()\n          locationUpdate(l.latitude, l.longitude)\n        }\n      }\n    }\n    if (!edit) {\n      locationService.requestLocationUpdates(locationRequest, locationCallback, null)\n    }\n  }</code></pre>\n<p>This method, when invoked, does 12 things:</p>\n<ul>\n<li>defines a callback - to be triggered when we turn location updates</li>\n<li>checks to see if we are in edit mode - if not, it is assumed we would like live location updates to commence.</li>\n</ul>\n<p>Finally, we need to be careful how we start these location updates. The safest place is from the PresenterView:</p>\n<h2>PlacemarkView</h2>\n<pre><code>  override fun onResume() {\n    super.onResume()\n    mapView.onResume()\n    presenter.doResartLocationUpdates()\n  }</code></pre>\n<p>Here, in onResumne(), we ask for location updates to start (or restart if the view has been removed). We are assuming that location updates will be automatically terminated if the view is destroyed.</p>\n<p>Run the app now in the simulator - and modify the lat/log values, then pressing <code>Send</code>. The location should change reasonably promptly in the view.</p>\n",
  "<p>First, we need a new helper function:</p>\n",
  "04.Exercises.md",
  "<h1>Exercises</h1>\n<p>Placemark application so far:</p>\n<ul>\n<li><a href=\"archives/archive.zip\">archive.zip</a></li>\n</ul>\n<p>This is a revised EditLocation view:</p>\n<p><img src=\"img/02.png\" alt=\"\"></p>\n<p>In this version, as you drag the marker around the lat/long is updated as the marker is moved. Try to implement this now. </p>\n<p>One strategy might be to replace the existing view completely with a version that loads a new layout. This layout can be designed in the layout editor, and contain the MapView + the lat/lng text views.</p>\n<p>To kick start this process, you could copy the PlacemarkMapView class + layout. You should be able to keep the same presenter.</p>\n",
  "00.Lab-10a AndroidX.md",
  "<h1>Objectives</h1>\n<p>Migrate to AndroidX + manage library versions more optimally</p>\n",
  " Manifest Navigation Hierarchy",
  "<h1>Manifest Navigation Hierarchy</h1>\n<p>We need to augment strings with some additional labels/titles currently missing from our manmifest:</p>\n<h2>strings.xml</h2>\n<pre><code>  &lt;string name=&quot;title_activity_placemark_list&quot;&gt;Placemarks&lt;/string&gt;\n  &lt;string name=&quot;title_activity_placemark&quot;&gt;Placemark&lt;/string&gt;\n  &lt;string name=&quot;title_activity_edit_location&quot;&gt;Placemark&lt;/string&gt;</code></pre>\n<h2>AndroidManifest.xml</h2>\n<p>This is a revised manifest - which uses the above labels to ensure all activities have a title.</p>\n<p>In addition, each activity will have a <code>PARENT_ACTIVITY</code> - which we will make use of shorty:</p>\n<pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;\n&lt;manifest xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;\n  package=&quot;org.wit.placemark&quot;&gt;\n\n  &lt;uses-permission android:name=&quot;android.permission.ACCESS_FINE_LOCATION&quot; /&gt;\n\n  &lt;application\n    android:name=&quot;.main.MainApp&quot;\n    android:allowBackup=&quot;true&quot;\n    android:icon=&quot;@mipmap/ic_launcher&quot;\n    android:label=&quot;@string/app_name&quot;\n    android:roundIcon=&quot;@mipmap/ic_launcher_round&quot;\n    android:supportsRtl=&quot;true&quot;\n    android:theme=&quot;@style/AppTheme&quot;&gt;\n\n    &lt;activity android:name=&quot;.views.placemarklist.PlacemarkListView&quot;\n      android:label=&quot;@string/title_activity_placemark_list&quot;\n      android:launchMode=&quot;singleTop&quot;&gt;\n      &lt;intent-filter&gt;\n        &lt;action android:name=&quot;android.intent.action.VIEW&quot; /&gt;\n        &lt;action android:name=&quot;android.intent.action.MAIN&quot; /&gt;\n        &lt;category android:name=&quot;android.intent.category.LAUNCHER&quot; /&gt;\n      &lt;/intent-filter&gt;\n    &lt;/activity&gt;\n\n    &lt;activity android:name=&quot;.views.placemark.PlacemarkView&quot;\n      android:label=&quot;@string/title_activity_placemark&quot;&gt;\n      &lt;meta-data\n        android:name=&quot;android.support.PARENT_ACTIVITY&quot;\n        android:value=&quot;.views.placemarklist.PlacemarkListView&quot; /&gt;\n    &lt;/activity&gt;\n\n    &lt;activity\n      android:name=&quot;.views.editlocation.EditLocationView&quot;\n      android:label=&quot;@string/title_activity_edit_location&quot;&gt;\n      &lt;meta-data\n        android:name=&quot;android.support.PARENT_ACTIVITY&quot;\n        android:value=&quot;.views.placemark.PlacemarkView&quot; /&gt;\n    &lt;/activity&gt;\n\n    &lt;activity\n      android:name=&quot;.views.map.PlacemarkMapView&quot;\n      android:label=&quot;@string/title_activity_placemark_maps&quot;\n      android:launchMode=&quot;singleTop&quot;&gt;\n      &lt;meta-data\n        android:name=&quot;android.support.PARENT_ACTIVITY&quot;\n        android:value=&quot;.views.placemarklist.PlacemarkListView&quot; /&gt;\n    &lt;/activity&gt;\n\n    &lt;meta-data\n      android:name=&quot;com.google.android.geo.API_KEY&quot;\n      android:value=&quot;@string/google_maps_key&quot; /&gt;\n\n  &lt;/application&gt;\n\n&lt;/manifest&gt;</code></pre>\n",
  "<p>We need to augment strings with some additional labels/titles currently missing from our manmifest:</p>\n",
  " Up Support",
  "<h1>Up Support</h1>\n<p>Part of the AppBar components we are using has automatic <code>Up</code> support:</p>\n<ul>\n<li><a href=\"https://developer.android.com/training/appbar/up-action\">https://developer.android.com/training/appbar/up-action</a></li>\n</ul>\n<p>Now that all our Views are derived from a <code>BaseView</code> class - and we have already established the PARENT relationship in the previous step - introducing this button into all views is fairly simple:</p>\n<h2>BaseView</h2>\n<p>We already have this function, which we can extend:</p>\n<pre><code>  fun init(toolbar: Toolbar, upEnabled: Boolean) {\n    toolbar.title = title\n    setSupportActionBar(toolbar)\n    supportActionBar?.setDisplayHomeAsUpEnabled(upEnabled)\n  }</code></pre>\n<p>We make <code>upEnabled</code> a boolean parameter,  as it  does not make sense for all views to have the Up button.</p>\n<p>This change then to all all views:</p>\n<h2>EditLocationView</h2>\n<pre><code>    super.init(toolbar, true)</code></pre>\n<h2>PlacemarkView</h2>\n<pre><code>    super.init(toolbar, true)</code></pre>\n<h2>PlacemarkView</h2>\n<pre><code>    super.init(toolbar, true)</code></pre>\n<p>PlacemarkListView</p>\n<pre><code>    init(toolbarMain, false)</code></pre>\n<p>Try this now - all views, except list, should have the up button.</p>\n",
  "<p>Part of the AppBar components we are using has automatic <code>Up</code> support:</p>\n",
  " AndroidX Migration",
  "<h1>AndroidX Migration</h1>\n<p>AndroidX is a rationalisation of many of the libraries we are using </p>\n<ul>\n<li><a href=\"https://developer.android.com/jetpack/androidx/\">https://developer.android.com/jetpack/androidx/</a></li>\n</ul>\n<p>This is part of an overall repackaging of the Android SDK called &#39;JetPack&#39;</p>\n<ul>\n<li><a href=\"https://developer.android.com/jetpack/\">https://developer.android.com/jetpack/</a></li>\n</ul>\n<p>In AndroidX, version numbers are reset and many of the package names/name spaces are reset to androidx.</p>\n<p>Studio has a tool to automatically trigger this migration:</p>\n<p><img src=\"img/01.png\" alt=\"\"></p>\n<p>Try this now. THis will have changed the following gradle entries:</p>\n<pre><code>  implementation &#39;androidx.appcompat:appcompat:1.0.2&#39;\n  implementation &#39;androidx.constraintlayout:constraintlayout:2.0.0-alpha2&#39;\n  implementation &#39;androidx.cardview:cardview:1.0.0&#39;\n  androidTestImplementation &#39;androidx.test:runner:1.1.0&#39;\n  androidTestImplementation &#39;androidx.test.espresso:espresso-core:3.1.0&#39;</code></pre>\n<p>... and these file will have have been modified by the migration:</p>\n<pre><code>gradle.properties\napp/build.gradle\napp/src/androidTest/java/org/wit/placemark/ExampleInstrumentedTest.kt\napp/src/main/java/org/wit/placemark/helpers/LocationHelpers.kt\napp/src/main/java/org/wit/placemark/views/BaseView.kt\napp/src/main/java/org/wit/placemark/views/placemarklist/PlacemarkAdapter.kt\napp/src/main/java/org/wit/placemark/views/placemarklist/PlacemarkListView.kt\napp/src/main/res/layout/activity_edit_location.xml\napp/src/main/res/layout/activity_placemark.xml\napp/src/main/res/layout/activity_placemark_list.xml\napp/src/main/res/layout/activity_placemark_map.xml\napp/src/main/res/layout/card_placemark.xml\napp/src/main/res/layout/content_placemark_map.xml</code></pre>\n<p>These are largely import signature modifications.</p>\n<p>Rebuild now and verify that the app performs as before.</p>\n",
  "<p>AndroidX is a rationalisation of many of the libraries we are using </p>\n",
  " Version Management Strategy",
  "<h1>Version Management Strategy</h1>\n<p>Here is a revised version of main gradle script:</p>\n<pre><code>apply plugin: &#39;com.android.application&#39;\n\napply plugin: &#39;kotlin-android&#39;\n\napply plugin: &#39;kotlin-android-extensions&#39;\n\nandroidExtensions {\n  experimental = true\n}\n\nandroid {\n  compileSdkVersion 28\n  defaultConfig {\n    applicationId &quot;org.wit.placemark&quot;\n    minSdkVersion 23\n    targetSdkVersion 28\n    versionCode 1\n    versionName &quot;1.0&quot;\n    testInstrumentationRunner &quot;androidx.test.runner.AndroidJUnitRunner&quot;\n  }\n  buildTypes {\n    release {\n      minifyEnabled false\n      proguardFiles getDefaultProguardFile(&#39;proguard-android.txt&#39;), &#39;proguard-rules.pro&#39;\n    }\n  }\n}\n\next {\n  app_compat_version = &#39;1.0.2&#39;\n  constraint_layout_version = &#39;2.0.0-alpha2&#39;\n  material_version = &#39;1.0.0&#39;\n  cardview_version = &#39;1.0.0&#39;\n  design_library_version = &#39;26.1.0&#39;\n  support_library_version = &#39;26.1.0&#39;\n\n  play_services_maps_version = &#39;16.0.0&#39;\n  play_services_location_version = &#39;16.0.0&#39;\n\n  anko_version = &#39;0.10.7&#39;\n  anko_commons_version = &#39;0.10.7&#39;\n  gson_version = &#39;2.8.5&#39;\n}\n\ndependencies {\n  implementation fileTree(dir: &#39;libs&#39;, include: [&#39;*.jar&#39;])\n  implementation &quot;org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version&quot;\n  implementation &quot;androidx.appcompat:appcompat:$app_compat_version&quot;\n  implementation &quot;androidx.constraintlayout:constraintlayout:$constraint_layout_version&quot;\n  implementation &quot;com.google.android.material:material:$material_version&quot;\n  implementation &quot;androidx.cardview:cardview:$cardview_version&quot;\n  implementation &quot;com.google.android.gms:play-services-maps:$play_services_maps_version&quot;\n  implementation &quot;com.google.android.gms:play-services-location:$play_services_location_version&quot;\n  implementation &quot;org.jetbrains.anko:anko-commons:$anko_commons_version&quot;\n  implementation &quot;org.jetbrains.anko:anko:$anko_version&quot;\n  implementation &quot;com.google.code.gson:gson:$gson_version&quot;\n\n  testImplementation &#39;junit:junit:4.12&#39;\n  androidTestImplementation &#39;androidx.test:runner:1.1.0&#39;\n  androidTestImplementation &#39;androidx.test.espresso:espresso-core:3.1.0&#39;\n}</code></pre>\n<p>The main change here is the introduction of a new section:</p>\n<pre><code>ext {\n  app_compat_version = &#39;1.0.2&#39;\n  constraint_layout_version = &#39;2.0.0-alpha2&#39;\n  material_version = &#39;1.0.0&#39;\n  cardview_version = &#39;1.0.0&#39;\n  design_library_version = &#39;26.1.0&#39;\n  support_library_version = &#39;26.1.0&#39;\n\n  play_services_maps_version = &#39;16.0.0&#39;\n  play_services_location_version = &#39;16.0.0&#39;\n\n  anko_version = &#39;0.10.7&#39;\n  anko_commons_version = &#39;0.10.7&#39;\n  gson_version = &#39;2.8.5&#39;\n}</code></pre>\n<p>This centralises in one area all the library versions we are using. Having them together is a major advantage when we are reviewing and updating library versions - particularly when some library major version numbers must be kept in sync.</p>\n<p>The dependencies section then uses these identifiers instead of hard coded strings:</p>\n<pre><code>  implementation fileTree(dir: &#39;libs&#39;, include: [&#39;*.jar&#39;])\n  implementation &quot;org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version&quot;\n  implementation &quot;androidx.appcompat:appcompat:$app_compat_version&quot;\n  implementation &quot;androidx.constraintlayout:constraintlayout:$constraint_layout_version&quot;\n  implementation &quot;com.google.android.material:material:$material_version&quot;\n  implementation &quot;androidx.cardview:cardview:$cardview_version&quot;\n  implementation &quot;com.google.android.gms:play-services-maps:$play_services_maps_version&quot;\n  implementation &quot;com.google.android.gms:play-services-location:$play_services_location_version&quot;\n  implementation &quot;org.jetbrains.anko:anko-commons:$anko_commons_version&quot;\n  implementation &quot;org.jetbrains.anko:anko:$anko_version&quot;\n  implementation &quot;com.google.code.gson:gson:$gson_version&quot;\n\n  testImplementation &#39;junit:junit:4.12&#39;\n  androidTestImplementation &#39;androidx.test:runner:1.1.0&#39;\n  androidTestImplementation &#39;androidx.test.espresso:espresso-core:3.1.0&#39;\n}</code></pre>\n",
  "<p>Here is a revised version of main gradle script:</p>\n",
  "<h1>Exercises</h1>\n<p>Placemark application so far:</p>\n<ul>\n<li><a href=\"archives/archive.zip\">archive.zip</a></li>\n</ul>\n<h2>Exercise:</h2>\n<p>Refactor the Models package so that it is structured like this:</p>\n<p><img src=\"img/02.png\" alt=\"\"></p>\n<p>We will be introducing a new package here in the next lab</p>\n",
  "00.Lab-10b Rooms.md",
  "<h1>Objectives</h1>\n<p>Introduce a new PlacemarkStore implementation to persist to an SQLite database</p>\n",
  " Room Classes",
  "<h1>Room Classes</h1>\n<p>In 2017 Google introduced a vastly simplified approach to persisting objects to the SQLite database called Rooms:</p>\n<ul>\n<li><a href=\"https://developer.android.com/training/data-storage/room/index.html\">https://developer.android.com/training/data-storage/room/index.html</a></li>\n</ul>\n<p>Review the introduction above (just the page linked) before proceeding.</p>\n<p>First, we need to include the rooms libraries:</p>\n<h2>build.gradle</h2>\n<p>New dependencies:</p>\n<h2>build.gradle</h2>\n<p>A new plugin at the top of the file:</p>\n<pre><code>apply plugin: &quot;kotlin-kapt&quot;</code></pre>\n<p>A new version identifier:</p>\n<pre><code>  room_version = &quot;2.0.0&quot;</code></pre>\n<p>New libraries:</p>\n<pre><code>  implementation &quot;androidx.room:room-runtime:$room_version&quot;\n  kapt &quot;androidx.room:room-compiler:$room_version&quot;</code></pre>\n<p>Note the second dependency is slightly different - a <code>kapt</code> entry. Kapt is an annotation processor:</p>\n<ul>\n<li><a href=\"https://kotlinlang.org/docs/reference/kapt.html\">https://kotlinlang.org/docs/reference/kapt.html</a></li>\n</ul>\n<p>and we are using it here to engage the Room annotations we are about to use.</p>\n<p>Rebuild now to make sure the libraries are correctly included.</p>\n",
  "<p>In 2017 Google introduced a vastly simplified approach to persisting objects to the SQLite database called Rooms:</p>\n",
  " Room Classes & Annotations",
  "<h1>Room Classes &amp; Annotations</h1>\n<p>Now we need to adjust PlacemarkModel with additional annotations:</p>\n<h2>PlacemarkModel</h2>\n<pre><code>package org.wit.placemark.models\n\nimport android.os.Parcelable\nimport androidx.room.Entity\nimport androidx.room.PrimaryKey\nimport kotlinx.android.parcel.Parcelize\n\n@Parcelize\n@Entity\ndata class PlacemarkModel(@PrimaryKey(autoGenerate = true) var id: Long = 0,\n                          var title: String = &quot;&quot;,\n                          var description: String = &quot;&quot;,\n                          var image: String = &quot;&quot;,\n                          var lat : Double = 0.0,\n                          var lng: Double = 0.0,\n                          var zoom: Float = 0f) : Parcelable</code></pre>\n<p>We have included 2 additional annotations:</p>\n<ul>\n<li><a href=\"https://developer.android.com/reference/android/arch/persistence/room/Entity.html\">@Entity</a></li>\n<li><a href=\"https://developer.android.com/reference/android/arch/persistence/room/PrimaryKey.html\">@PrimaryKey</a></li>\n</ul>\n<p>These annotations will enable PlacemarkModel objects to be stored in a Room database.</p>\n<p>In a new <code>room</code> package, include these new classes:</p>\n<h2>Database</h2>\n<pre><code>package org.wit.placemark.room\n\nimport androidx.room.Database\nimport androidx.room.RoomDatabase\nimport org.wit.placemark.models.PlacemarkModel\n\n@Database(entities = arrayOf(PlacemarkModel::class), version = 1)\nabstract class Database : RoomDatabase() {\n\n  abstract fun placemarkDao(): PlacemarkDao\n}</code></pre>\n<h2>PlacemarkDao</h2>\n<pre><code>package org.wit.placemark.room\n\nimport androidx.room.*\nimport org.wit.placemark.models.PlacemarkModel\n\n@Dao\ninterface PlacemarkDao {\n\n  @Insert(onConflict = OnConflictStrategy.REPLACE)\n  fun create(placemark: PlacemarkModel)\n\n  @Query(&quot;SELECT * FROM PlacemarkModel&quot;)\n  fun findAll(): List&lt;PlacemarkModel&gt;\n\n  @Query(&quot;select * from PlacemarkModel where id = :id&quot;)\n  fun findById(id: Long): PlacemarkModel\n\n  @Update\n  fun update(placemark: PlacemarkModel)\n\n  @Delete\n  fun deletePlacemark(placemark: PlacemarkModel)\n}</code></pre>\n<p>These are classes that a new version of the PlacemarkStore interface can use to implement a new store.</p>\n",
  "<p>Now we need to adjust PlacemarkModel with additional annotations:</p>\n",
  "# PlacemarkStoreRoom - Version 1",
  "<h2>PlacemarkStoreRoom - Version 1</h2>\n<p>Here is a first implementation of PlacemarkStoreRoom</p>\n<pre><code>package org.wit.placemark.room\n\nimport android.content.Context\nimport androidx.room.Room\nimport org.jetbrains.anko.coroutines.experimental.bg\nimport org.wit.placemark.models.PlacemarkModel\nimport org.wit.placemark.models.PlacemarkStore\n\nclass PlacemarkStoreRoom(val context: Context) : PlacemarkStore {\n\n  var dao: PlacemarkDao\n\n  init {\n    val database = Room.databaseBuilder(context, Database::class.java, &quot;room_sample.db&quot;)\n        .fallbackToDestructiveMigration()\n        .build()\n    dao = database.placemarkDao()\n  }\n\n  override fun findAll(): List&lt;PlacemarkModel&gt; {\n    return dao.findAll()\n  }\n\n  override fun findById(id: Long): PlacemarkModel? {\n    return dao.findById(id)\n  }\n\n  override fun create(placemark: PlacemarkModel) {\n    dao.create(placemark)\n  }\n\n  override fun update(placemark: PlacemarkModel) {\n    dao.update(placemark)\n  }\n\n  override fun delete(placemark: PlacemarkModel) {\n    dao.deletePlacemark(placemark)\n  }\n\n  fun clear() {\n  }\n}</code></pre>\n<p>Lets try it out. In main, create PlacemarkStoreRoom instead of whatever version you are currently using:</p>\n<h2>MainApp</h2>\n<pre><code>class MainApp : Application(), AnkoLogger {\n\n  lateinit var placemarks: PlacemarkStore\n\n  override fun onCreate() {\n    super.onCreate()\n    placemarks = PlacemarkStoreRoom(applicationContext)\n    info(&quot;Placemark started&quot;)\n  }\n}</code></pre>\n<p>Run the app now:</p>\n<p><img src=\"img/03.png\" alt=\"\"></p>\n<p>If you interrogate logcat - you will (eventually) uncover the issue:</p>\n<pre><code>2018-11-16 16:50:58.333 12758-12758/org.wit.placemark E/AndroidRuntime: FATAL EXCEPTION: main\n    Process: org.wit.placemark, PID: 12758\n    java.lang.RuntimeException: Unable to start activity ComponentInfo{org.wit.placemark/org.wit.placemark.views.placemarklist.PlacemarkListView}: java.lang.IllegalStateException: Cannot access database on the main thread since it may potentially lock the UI for a long period of time.\n        at android.app.ActivityThread.performLaunchActivity(ActivityThread.java:2665)\n        at android.app.ActivityThread.handleLaunchActivity(ActivityThread.java:2726)\n        at android.app.ActivityThread.-wrap12(ActivityThread.java)\n        at android.app.ActivityThread$H.handleMessage(ActivityThread.java:1477)\n        at android.os.Handler.dispatchMessage(Handler.java:102)\n        at android.os.Looper.loop(Looper.java:154)\n        at android.app.ActivityThread.main(ActivityThread.java:6119)\n        at java.lang.reflect.Method.invoke(Native Method)\n        at com.android.internal.os.ZygoteInit$MethodAndArgsCaller.run(ZygoteInit.java:886)\n        at com.android.internal.os.ZygoteInit.main(ZygoteInit.java:776)\n     Caused by: java.lang.IllegalStateException: Cannot access database on the main thread since it may potentially lock the UI for a long period of time.\n        at androidx.room.RoomDatabase.assertNotMainThread(RoomDatabase.java:209)\n        at androidx.room.RoomDatabase.query(RoomDatabase.java:237)\n        at org.wit.placemark.room.PlacemarkDao_Impl.findAll(PlacemarkDao_Impl.java:137)\n        at org.wit.placemark.room.PlacemarkStoreRoom.findAll(PlacemarkStoreRoom.kt:21)\n        at org.wit.placemark.views.placemarklist.PlacemarkListPresenter.loadPlacemarks(PlacemarkListPresenter.kt:23)\n        at org.wit.placemark.views.placemarklist.PlacemarkListView.onCreate(PlacemarkListView.kt:25)\n        at android.app.Activity.performCreate(Activity.java:6679)\n        at android.app.Instrumentation.callActivityOnCreate(Instrumentation.java:1118)\n        at android.app.ActivityThread.performLaunchActivity(ActivityThread.java:2618)\n        at android.app.ActivityThread.handleLaunchActivity(ActivityThread.java:2726) \n        at android.app.ActivityThread.-wrap12(ActivityThread.java) \n        at android.app.ActivityThread$H.handleMessage(ActivityThread.java:1477) \n        at android.os.Handler.dispatchMessage(Handler.java:102) \n        at android.os.Looper.loop(Looper.java:154) \n        at android.app.ActivityThread.main(ActivityThread.java:6119) \n        at java.lang.reflect.Method.invoke(Native Method) \n        at com.android.internal.os.ZygoteInit$MethodAndArgsCaller.run(ZygoteInit.java:886) \n        at com.android.internal.os.ZygoteInit.main(ZygoteInit.java:776)</code></pre>\n<p>The report here is:</p>\n<pre><code>org.wit.placemark.views.placemarklist.PlacemarkListView}: java.lang.IllegalStateException: Cannot access database on the main thread</code></pre>\n<p>Out application has been terminated by Android, as we attempted to access a potentially long running operation (a database lookup) on the main thread.</p>\n<p>This is quite a challenging area to get to grips with:</p>\n<ul>\n<li><a href=\"https://developer.android.com/training/multiple-threads/\">https://developer.android.com/training/multiple-threads/</a></li>\n</ul>\n<p>However, as we are using Kotlin - we have a number of language features that can greatly simplify how we do this.</p>\n",
  "<p>Here is a first implementation of PlacemarkStoreRoom</p>\n",
  " suspend",
  "<h1>suspend</h1>\n<p>Android will not permit access to the database on the main UI thread - as it can seriously degrade performance. </p>\n<p>Qhen working with Kotlin we have considerable convenience methods available via the anko libraries when attempting multi-threaded development in Android:</p>\n<ul>\n<li><a href=\"https://github.com/Kotlin/anko/wiki/Anko-Coroutines\">https://github.com/Kotlin/anko/wiki/Anko-Coroutines</a></li>\n<li><a href=\"https://antonioleiva.com/anko-background-kotlin-android\">https://antonioleiva.com/anko-background-kotlin-android</a></li>\n</ul>\n<p>Before brining these features in your our application, we make some changes to the way we have defined the PlacemarkMemStore interface:</p>\n<h2>PlacemarkStore</h2>\n<pre><code>interface PlacemarkStore {\n  suspend fun findAll(): List&lt;PlacemarkModel&gt;\n  suspend fun findById(id:Long) : PlacemarkModel?\n  suspend fun create(placemark: PlacemarkModel)\n  suspend fun update(placemark: PlacemarkModel)\n  suspend fun delete(placemark: PlacemarkModel)\n}</code></pre>\n<p>Each method is marked with the keyword <code>suspend</code>. To get an initial understanding of the purpose of this keyword, read this (5 min):</p>\n<ul>\n<li><a href=\"&#109;&#x61;&#x69;&#108;&#x74;&#111;&#x3a;&#104;&#116;&#116;&#112;&#x73;&#58;&#x2f;&#x2f;&#109;&#101;&#x64;&#105;&#x75;&#109;&#x2e;&#x63;&#x6f;&#x6d;&#x2f;&#64;&#101;&#x6c;&#121;&#101;&#x2e;&#112;&#x72;&#x6f;&#x6a;&#101;&#99;&#x74;&#x2f;&#x75;&#110;&#100;&#x65;&#x72;&#x73;&#116;&#x61;&#110;&#100;&#x69;&#x6e;&#x67;&#45;&#x73;&#x75;&#x73;&#x70;&#101;&#110;&#x64;&#x2d;&#x66;&#x75;&#110;&#99;&#116;&#x69;&#111;&#x6e;&#x2d;&#111;&#102;&#45;&#99;&#111;&#x72;&#111;&#117;&#x74;&#105;&#110;&#x65;&#x73;&#x2d;&#100;&#x65;&#50;&#x36;&#x62;&#x30;&#55;&#x30;&#x63;&#53;&#x65;&#100;\">&#104;&#116;&#116;&#112;&#x73;&#58;&#x2f;&#x2f;&#109;&#101;&#x64;&#105;&#x75;&#109;&#x2e;&#x63;&#x6f;&#x6d;&#x2f;&#64;&#101;&#x6c;&#121;&#101;&#x2e;&#112;&#x72;&#x6f;&#x6a;&#101;&#99;&#x74;&#x2f;&#x75;&#110;&#100;&#x65;&#x72;&#x73;&#116;&#x61;&#110;&#100;&#x69;&#x6e;&#x67;&#45;&#x73;&#x75;&#x73;&#x70;&#101;&#110;&#x64;&#x2d;&#x66;&#x75;&#110;&#99;&#116;&#x69;&#111;&#x6e;&#x2d;&#111;&#102;&#45;&#99;&#111;&#x72;&#111;&#117;&#x74;&#105;&#110;&#x65;&#x73;&#x2d;&#100;&#x65;&#50;&#x36;&#x62;&#x30;&#55;&#x30;&#x63;&#53;&#x65;&#100;</a></li>\n</ul>\n<p>In addition, look at this article (7 mins):</p>\n<ul>\n<li><a href=\"https://android.jlelse.eu/a-first-walk-into-kotlin-coroutines-on-android-fe4a6e25f46a\">https://android.jlelse.eu/a-first-walk-into-kotlin-coroutines-on-android-fe4a6e25f46a</a></li>\n</ul>\n<p>Making the above change to PlacemarkStore will break the PlacemarkMemStore and PlacemarkJSONStore implementations. Fix them now by marking all of those classes with the equivalent <code>suspend</code> marker:</p>\n<pre><code>  suspend override fun findAll(): MutableList&lt;PlacemarkModel&gt; \n  ...\n  ...\n  ...</code></pre>\n<p>Rebuild the project - all of the Model classes should build, However, there will be errors in these three presenters:</p>\n<ul>\n<li>PlacemarkPresenter</li>\n<li>PlacemarkListPresenter</li>\n<li>PlacemarkMapPresenter</li>\n</ul>\n<p>This is the type of error you may see:</p>\n<p><img src=\"img/04.png\" alt=\"\"></p>\n",
  "<p>Android will not permit access to the database on the main UI thread - as it can seriously degrade performance. </p>\n",
  " PlacemarkStoreRoom",
  "<h1>PlacemarkStoreRoom</h1>\n<p>To get the application to function correctly - we need to revise PlacemarkStoreRoom to properly use the background thread for all database access</p>\n<h2>PlacemarkStoreRoom</h2>\n<pre><code>package org.wit.placemark.room\n\nimport android.content.Context\nimport androidx.room.Room\nimport org.jetbrains.anko.coroutines.experimental.bg\nimport org.wit.placemark.models.PlacemarkModel\nimport org.wit.placemark.models.PlacemarkStore\n\nclass PlacemarkStoreRoom(val context: Context) : PlacemarkStore {\n\n  var dao: PlacemarkDao\n\n  init {\n    val database = Room.databaseBuilder(context, Database::class.java, &quot;room_sample.db&quot;)\n        .fallbackToDestructiveMigration()\n        .build()\n    dao = database.placemarkDao()\n  }\n\n  suspend override fun findAll(): List&lt;PlacemarkModel&gt; {\n    val deferredPlacemarks = bg {\n      dao.findAll()\n    }\n    val placemarks = deferredPlacemarks.await()\n    return placemarks\n  }\n\n  suspend override fun findById(id: Long): PlacemarkModel? {\n    val deferredPlacemark = bg {\n      dao.findById(id)\n    }\n    val placemark = deferredPlacemark.await()\n    return placemark\n  }\n\n  suspend override fun create(placemark: PlacemarkModel) {\n    bg {\n      dao.create(placemark)\n    }\n  }\n\n  suspend override fun update(placemark: PlacemarkModel) {\n    bg {\n      dao.update(placemark)\n    }\n  }\n\n  suspend override fun delete(placemark: PlacemarkModel) {\n    bg {\n      dao.deletePlacemark(placemark)\n    }\n  }\n\n  fun clear() {\n  }\n}</code></pre>\n<p>Each method is now calling the database functions on the background thread via the <code>bg</code> helper:</p>\n<ul>\n<li><a href=\"https://github.com/Kotlin/anko/wiki/Anko-Coroutines#bg\">https://github.com/Kotlin/anko/wiki/Anko-Coroutines#bg</a></li>\n</ul>\n",
  "<p>To get the application to function correctly - we need to revise PlacemarkStoreRoom to properly use the background thread for all database access</p>\n",
  "# async",
  "<h2>async</h2>\n<p>To make the presenters work with the revised model, all called to the <code>suspend</code> versions of the PlacemarkStore objects will need to be reconfigured.</p>\n<p>Each call to a <code>suspend</code> method will need revision:</p>\n<h2>PlacemrkListPresenter</h2>\n<pre><code>  fun loadPlacemarks() {\n    async(UI) {\n      view?.showPlacemarks(app.placemarks.findAll())\n    }\n  }</code></pre>\n<h2>PlacemarkPresenter</h2>\n<pre><code>  ...\n\n  fun doDelete() {\n    async(UI) {\n      app.placemarks.delete(placemark)\n      view?.finish()\n    }\n  }\n\n  ...\n\n  fun doAddOrSave(title: String, description: String) {\n    placemark.title = title\n    placemark.description = description\n    async(UI) {\n      if (edit) {\n        app.placemarks.update(placemark)\n      } else {\n        app.placemarks.create(placemark)\n      }\n      view?.finish()\n    }\n  }\n\n  ...</code></pre>\n<h2>PlacemarkMapPresenter</h2>\n<pre><code>  fun loadPlacemarks() {\n    async(UI) {\n      view?.showPlacemarks(app.placemarks.findAll())\n    }\n  }</code></pre>\n<p>All of these rely on the following imports:</p>\n<pre><code>import kotlinx.coroutines.experimental.android.UI\nimport kotlinx.coroutines.experimental.async</code></pre>\n<p>This should rebuild now and run without error</p>\n",
  "<p>To make the presenters work with the revised model, all called to the <code>suspend</code> versions of the PlacemarkStore objects will need to be reconfigured.</p>\n",
  "<h2>Solution</h2>\n<p>Placemark application so far:</p>\n<ul>\n<li><a href=\"archives/archive.zip\">archive.zip</a></li>\n</ul>\n<h2>Exercise</h2>\n<p>Rework the PlacemarkModel so that, instead repeating lat/lng/zoom in each placemark, we embed a Location object. In order to implement this in the context of the Room system, you will need to use the <code>@Embedded</code> annotation:</p>\n<ul>\n<li><a href=\"https://developer.android.com/reference/android/arch/persistence/room/Embedded\">https://developer.android.com/reference/android/arch/persistence/room/Embedded</a></li>\n</ul>\n<p>Also, you will also have to adjust the other Store implementations.</p>\n",
  "00.Lab-11a Firebase Auth.md",
  "<h1>Objectives</h1>\n<p>Authenticate users against the Firebase Authentication service</p>\n",
  " Exercise",
  "<h1>Exercise</h1>\n<p>Rework the PlacemarkModel so that, instead repeating lat/lng/zoom in each placemark, we embed a Location object. In order to implement this in the context of the Room system, you will need to use the <code>@Embedded</code> annotation:</p>\n<ul>\n<li><a href=\"https://developer.android.com/reference/android/arch/persistence/room/Embedded\">https://developer.android.com/reference/android/arch/persistence/room/Embedded</a></li>\n</ul>\n<p>Also, you will also have to adjust the other Store implementations.</p>\n<h2>Solution</h2>\n<p>Revised PlacemarkModel:</p>\n<h2>PlacemarkModel</h2>\n<pre><code>package org.wit.placemark.models\n\nimport android.os.Parcelable\nimport androidx.room.Embedded\nimport androidx.room.Entity\nimport androidx.room.PrimaryKey\nimport kotlinx.android.parcel.Parcelize\n\n@Parcelize\n@Entity\ndata class PlacemarkModel(@PrimaryKey(autoGenerate = true) var id: Long = 0,\n                          var title: String = &quot;&quot;,\n                          var description: String = &quot;&quot;,\n                          var image: String = &quot;&quot;,\n                          @Embedded var location : Location = Location()): Parcelable\n\n@Parcelize\ndata class Location(var lat: Double = 0.0,\n                    var lng: Double = 0.0,\n                    var zoom: Float = 0f) : Parcelable</code></pre>\n<p>Revised update methods in some existing PlacemarmStore implementations:</p>\n<h2>PlacemarkMemStore</h2>\n<pre><code>  suspend override fun update(placemark: PlacemarkModel) {\n    var foundPlacemark: PlacemarkModel? = placemarks.find { p -&gt; p.id == placemark.id }\n    if (foundPlacemark != null) {\n      foundPlacemark.title = placemark.title\n      foundPlacemark.description = placemark.description\n      foundPlacemark.image = placemark.image\n      foundPlacemark.location = placemark.location\n      logAll();\n    }\n  }</code></pre>\n<h2>PlacemarkJSONStore</h2>\n<pre><code>  suspend override fun update(placemark: PlacemarkModel) {\n    val placemarksList = findAll() as ArrayList&lt;PlacemarkModel&gt;\n    var foundPlacemark: PlacemarkModel? = placemarksList.find { p -&gt; p.id == placemark.id }\n    if (foundPlacemark != null) {\n      foundPlacemark.title = placemark.title\n      foundPlacemark.description = placemark.description\n      foundPlacemark.image = placemark.image\n      foundPlacemark.location = placemark.location\n    }\n    serialize()\n  }</code></pre>\n<p>One View will need revision:</p>\n<h2>PlacemarkView</h2>\n<pre><code>...\n    lat.setText(&quot;%.6f&quot;.format(placemark.location.lat))\n    lng.setText(&quot;%.6f&quot;.format(placemark.location.lng))\n...</code></pre>\n<p>We can rework the PlacemarkPresenter to be marginally simplified:</p>\n<h2>PlacemarkPresenter</h2>\n<pre><code>package org.wit.placemark.views.placemark\n\nimport android.annotation.SuppressLint\nimport android.content.Intent\nimport com.google.android.gms.location.FusedLocationProviderClient\nimport com.google.android.gms.location.LocationCallback\nimport com.google.android.gms.location.LocationResult\nimport com.google.android.gms.location.LocationServices\nimport com.google.android.gms.maps.CameraUpdateFactory\nimport com.google.android.gms.maps.GoogleMap\nimport com.google.android.gms.maps.model.LatLng\nimport com.google.android.gms.maps.model.MarkerOptions\nimport kotlinx.coroutines.experimental.android.UI\nimport kotlinx.coroutines.experimental.async\nimport org.wit.placemark.helpers.checkLocationPermissions\nimport org.wit.placemark.helpers.createDefaultLocationRequest\nimport org.wit.placemark.helpers.isPermissionGranted\nimport org.wit.placemark.helpers.showImagePicker\nimport org.wit.placemark.models.Location\nimport org.wit.placemark.models.PlacemarkModel\nimport org.wit.placemark.views.*\n\nclass PlacemarkPresenter(view: BaseView) : BasePresenter(view) {\n\n  var map: GoogleMap? = null\n  var placemark = PlacemarkModel()\n  var defaultLocation = Location(52.245696, -7.139102, 15f)\n  var edit = false;\n  var locationService: FusedLocationProviderClient = LocationServices.getFusedLocationProviderClient(view)\n  val locationRequest = createDefaultLocationRequest()\n\n  init {\n    if (view.intent.hasExtra(&quot;placemark_edit&quot;)) {\n      edit = true\n      placemark = view.intent.extras.getParcelable&lt;PlacemarkModel&gt;(&quot;placemark_edit&quot;)\n      view.showPlacemark(placemark)\n    } else {\n      if (checkLocationPermissions(view)) {\n        doSetCurrentLocation()\n      }\n    }\n  }\n\n  @SuppressLint(&quot;MissingPermission&quot;)\n  fun doSetCurrentLocation() {\n    locationService.lastLocation.addOnSuccessListener {\n      locationUpdate(Location(it.latitude, it.longitude))\n    }\n  }\n\n  @SuppressLint(&quot;MissingPermission&quot;)\n  fun doResartLocationUpdates() {\n\n    var locationCallback = object : LocationCallback() {\n      override fun onLocationResult(locationResult: LocationResult?) {\n        if (locationResult != null &amp;&amp; locationResult.locations != null) {\n          val l = locationResult.locations.last()\n          locationUpdate(Location(l.latitude, l.longitude))\n        }\n      }\n    }\n    if (!edit) {\n      locationService.requestLocationUpdates(locationRequest, locationCallback, null)\n    }\n  }\n\n  override fun doRequestPermissionsResult(requestCode: Int, permissions: Array&lt;String&gt;, grantResults: IntArray) {\n    if (isPermissionGranted(requestCode, grantResults)) {\n      doSetCurrentLocation()\n    } else {\n      locationUpdate(defaultLocation)\n    }\n  }\n\n  fun doConfigureMap(m: GoogleMap) {\n    map = m\n    locationUpdate(placemark.location)\n  }\n\n  fun locationUpdate(location: Location) {\n    placemark.location = location\n    placemark.location.zoom = 15f\n    map?.clear()\n    map?.uiSettings?.setZoomControlsEnabled(true)\n    val options = MarkerOptions().title(placemark.title).position(LatLng(placemark.location.lat, placemark.location.lng))\n    map?.addMarker(options)\n    map?.moveCamera(CameraUpdateFactory.newLatLngZoom(LatLng(placemark.location.lat, placemark.location.lng), placemark.location.zoom))\n    view?.showPlacemark(placemark)\n  }\n\n\n  fun doAddOrSave(title: String, description: String) {\n    placemark.title = title\n    placemark.description = description\n    async(UI) {\n      if (edit) {\n        app.placemarks.update(placemark)\n      } else {\n        app.placemarks.create(placemark)\n      }\n      view?.finish()\n    }\n  }\n\n  fun doCancel() {\n    view?.finish()\n  }\n\n  fun doDelete() {\n    async(UI) {\n      app.placemarks.delete(placemark)\n      view?.finish()\n    }\n  }\n\n  fun doSelectImage() {\n    view?.let {\n      showImagePicker(view!!, IMAGE_REQUEST)\n    }\n  }\n\n  fun doSetLocation() {\n    view?.navigateTo(VIEW.LOCATION, LOCATION_REQUEST, &quot;location&quot;, Location(placemark.location.lat, placemark.location.lng, placemark.location.zoom))\n  }\n\n  override fun doActivityResult(requestCode: Int, resultCode: Int, data: Intent) {\n    when (requestCode) {\n      IMAGE_REQUEST -&gt; {\n        placemark.image = data.data.toString()\n        view?.showPlacemark(placemark)\n      }\n      LOCATION_REQUEST -&gt; {\n        val location = data.extras.getParcelable&lt;Location&gt;(&quot;location&quot;)\n        placemark.location = location\n        locationUpdate(location)\n      }\n    }\n  }\n}</code></pre>\n<p>Finally, PlacemarkMapPresenter:</p>\n<h2>PlacemarkMapPresenter</h2>\n<pre><code>  fun doPopulateMap(map: GoogleMap, placemarks: List&lt;PlacemarkModel&gt;) {\n    map.uiSettings.setZoomControlsEnabled(true)\n    placemarks.forEach {\n      val loc = LatLng(it.location.lat, it.location.lng)\n      val options = MarkerOptions().title(it.title).position(loc)\n      map.addMarker(options).tag = it.id\n      map.moveCamera(CameraUpdateFactory.newLatLngZoom(loc, it.location.zoom))\n    }\n  }</code></pre>\n",
  "<p>Rework the PlacemarkModel so that, instead repeating lat/lng/zoom in each placemark, we embed a Location object. In order to implement this in the context of the Room system, you will need to use the <code>@Embedded</code> annotation:</p>\n",
  " Login Layout",
  "<h1>Login Layout</h1>\n<p>We would like to introduce a new Login screen - which will be presented before any user logs in:</p>\n<p><img src=\"img/01x.png\" alt=\"\"></p>\n<p>We need these new string resources:</p>\n<h2>strings.xml</h2>\n<pre><code>  &lt;string name=&quot;title_activity_login&quot;&gt; Signup/Login to Placemark&lt;/string&gt;</code></pre>\n<p>This is the login layout:</p>\n<h2>res/layout/activity_login.xml</h2>\n<pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;\n&lt;androidx.constraintlayout.widget.ConstraintLayout\n  xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;\n  xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot;\n  xmlns:tools=&quot;http://schemas.android.com/tools&quot;\n  android:layout_width=&quot;match_parent&quot;\n  android:layout_height=&quot;match_parent&quot;\n  tools:context=&quot;org.wit.placemark.views.login.LoginView&quot;&gt;\n\n  &lt;com.google.android.material.appbar.AppBarLayout\n    android:id=&quot;@+id/appBarLayout&quot;\n    android:layout_width=&quot;match_parent&quot;\n    android:layout_height=&quot;wrap_content&quot;\n    android:background=&quot;@color/colorAccent&quot;\n    android:fitsSystemWindows=&quot;true&quot;\n    app:elevation=&quot;0dip&quot;\n    app:theme=&quot;@style/ThemeOverlay.AppCompat.Dark.ActionBar&quot;&gt;\n\n    &lt;androidx.appcompat.widget.Toolbar\n      android:id=&quot;@+id/toolbar&quot;\n      android:layout_width=&quot;match_parent&quot;\n      android:layout_height=&quot;wrap_content&quot;\n      app:titleTextColor=&quot;@color/colorPrimary&quot; /&gt;\n\n  &lt;/com.google.android.material.appbar.AppBarLayout&gt;\n\n  &lt;androidx.constraintlayout.widget.ConstraintLayout\n    android:layout_width=&quot;match_parent&quot;\n    android:layout_height=&quot;match_parent&quot;\n    android:layout_marginStart=&quot;8dp&quot;\n    android:layout_marginEnd=&quot;8dp&quot;\n    android:layout_marginBottom=&quot;16dp&quot;\n    app:layout_constraintBottom_toBottomOf=&quot;parent&quot;\n    app:layout_constraintEnd_toEndOf=&quot;parent&quot;\n    app:layout_constraintHorizontal_bias=&quot;0.0&quot;\n    app:layout_constraintStart_toStartOf=&quot;parent&quot;\n    app:layout_constraintTop_toTopOf=&quot;parent&quot;\n    app:layout_constraintVertical_bias=&quot;0.0&quot;&gt;\n\n\n    &lt;EditText\n      android:id=&quot;@+id/email&quot;\n      android:layout_width=&quot;237dp&quot;\n      android:layout_height=&quot;wrap_content&quot;\n      android:layout_marginStart=&quot;8dp&quot;\n      android:layout_marginTop=&quot;108dp&quot;\n      android:layout_marginEnd=&quot;36dp&quot;\n      android:ems=&quot;10&quot;\n      android:inputType=&quot;textEmailAddress&quot;\n      app:layout_constraintEnd_toEndOf=&quot;parent&quot;\n      app:layout_constraintHorizontal_bias=&quot;1.0&quot;\n      app:layout_constraintStart_toEndOf=&quot;@+id/textView&quot;\n      app:layout_constraintTop_toTopOf=&quot;parent&quot; /&gt;\n\n    &lt;TextView\n      android:id=&quot;@+id/textView&quot;\n      android:layout_width=&quot;72dp&quot;\n      android:layout_height=&quot;23dp&quot;\n      android:layout_marginStart=&quot;16dp&quot;\n      android:text=&quot;Email&quot;\n      android:textAlignment=&quot;textEnd&quot;\n      app:layout_constraintBaseline_toBaselineOf=&quot;@+id/email&quot;\n      app:layout_constraintStart_toStartOf=&quot;parent&quot; /&gt;\n\n    &lt;EditText\n      android:id=&quot;@+id/password&quot;\n      android:layout_width=&quot;239dp&quot;\n      android:layout_height=&quot;wrap_content&quot;\n      android:layout_marginTop=&quot;8dp&quot;\n      android:ems=&quot;10&quot;\n      android:inputType=&quot;textPassword&quot;\n      app:layout_constraintBottom_toBottomOf=&quot;parent&quot;\n      app:layout_constraintEnd_toEndOf=&quot;@+id/email&quot;\n      app:layout_constraintHorizontal_bias=&quot;0.0&quot;\n      app:layout_constraintStart_toStartOf=&quot;@+id/email&quot;\n      app:layout_constraintTop_toBottomOf=&quot;@+id/email&quot;\n      app:layout_constraintVertical_bias=&quot;0.026&quot; /&gt;\n\n    &lt;TextView\n      android:id=&quot;@+id/textView2&quot;\n      android:layout_width=&quot;70dp&quot;\n      android:layout_height=&quot;29dp&quot;\n      android:text=&quot;Password&quot;\n      android:textAlignment=&quot;textEnd&quot;\n      app:layout_constraintBaseline_toBaselineOf=&quot;@+id/password&quot;\n      app:layout_constraintEnd_toEndOf=&quot;@+id/textView&quot;\n      app:layout_constraintHorizontal_bias=&quot;1.0&quot;\n      app:layout_constraintStart_toStartOf=&quot;@+id/textView&quot; /&gt;\n\n    &lt;Button\n      android:id=&quot;@+id/signUp&quot;\n      android:layout_width=&quot;169dp&quot;\n      android:layout_height=&quot;wrap_content&quot;\n      android:layout_marginStart=&quot;8dp&quot;\n      android:layout_marginTop=&quot;32dp&quot;\n      android:text=&quot;Sign Up&quot;\n      app:layout_constraintStart_toStartOf=&quot;parent&quot;\n      app:layout_constraintTop_toBottomOf=&quot;@+id/textView2&quot; /&gt;\n\n    &lt;Button\n      android:id=&quot;@+id/logIn&quot;\n      android:layout_width=&quot;169dp&quot;\n      android:layout_height=&quot;wrap_content&quot;\n      android:layout_marginStart=&quot;8dp&quot;\n      android:layout_marginTop=&quot;8dp&quot;\n      android:layout_marginEnd=&quot;8dp&quot;\n      android:text=&quot;Log In&quot;\n      app:layout_constraintBottom_toBottomOf=&quot;@+id/signUp&quot;\n      app:layout_constraintEnd_toEndOf=&quot;parent&quot;\n      app:layout_constraintHorizontal_bias=&quot;1.0&quot;\n      app:layout_constraintStart_toEndOf=&quot;@+id/signUp&quot;\n      app:layout_constraintTop_toBottomOf=&quot;@+id/password&quot;\n      app:layout_constraintVertical_bias=&quot;1.0&quot; /&gt;\n  &lt;/androidx.constraintlayout.widget.ConstraintLayout&gt;\n\n&lt;/androidx.constraintlayout.widget.ConstraintLayout&gt;</code></pre>\n",
  "<p>We would like to introduce a new Login screen - which will be presented before any user logs in:</p>\n",
  " Login View/Presenter",
  "<h1>Login View/Presenter</h1>\n<p>Our first version will just let the user signup/login without paying any attention to what they enter as credentials.</p>\n<h2>LoginPresenter</h2>\n<pre><code>package org.wit.placemark.views.login\n\nimport org.wit.placemark.views.BasePresenter\nimport org.wit.placemark.views.BaseView\nimport org.wit.placemark.views.VIEW\n\nclass LoginPresenter(view: BaseView) : BasePresenter(view) {\n\n  fun doLogin(email: String, password: String) {\n    view?.navigateTo(VIEW.LIST)\n  }\n\n  fun doSignUp(email: String, password: String) {\n    view?.navigateTo(VIEW.LIST)\n  }\n}</code></pre>\n<h2>LoginView</h2>\n<pre><code>package org.wit.placemark.views.login\n\nimport android.os.Bundle\nimport kotlinx.android.synthetic.main.activity_login.*\nimport org.jetbrains.anko.toast\nimport org.wit.placemark.R\nimport org.wit.placemark.views.BaseView\n\nclass LoginView : BaseView() {\n\n  lateinit var presenter: LoginPresenter\n\n  override fun onCreate(savedInstanceState: Bundle?) {\n    super.onCreate(savedInstanceState)\n    setContentView(R.layout.activity_login)\n    init(toolbar, false)\n\n    presenter = initPresenter(LoginPresenter(this)) as LoginPresenter\n\n    signUp.setOnClickListener {\n      val email = email.text.toString()\n      val password = password.text.toString()\n      if (email == &quot;&quot; || password == &quot;&quot;) {\n        toast(&quot;Please provide email + password&quot;)\n      }\n      else {\n        presenter.doSignUp(email,password)\n      }\n    }\n\n    logIn.setOnClickListener {\n      val email = email.text.toString()\n      val password = password.text.toString()\n      if (email == &quot;&quot; || password == &quot;&quot;) {\n        toast(&quot;Please provide email + password&quot;)\n      }\n      else {\n        presenter.doLogin(email,password)\n      }\n    }\n  }\n}</code></pre>\n<p>In the above, note that we just start the PlacemarkListView, regardless of which button is pressed - or what is entered.</p>\n<p>The manifest needs to be altered to now nominate this LoginView as the <code>launch</code> activity:</p>\n<pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;\n&lt;manifest xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;\n  package=&quot;org.wit.placemark&quot;&gt;\n\n  &lt;uses-permission android:name=&quot;android.permission.ACCESS_FINE_LOCATION&quot; /&gt;\n\n  &lt;application\n    android:name=&quot;.main.MainApp&quot;\n    android:allowBackup=&quot;true&quot;\n    android:icon=&quot;@mipmap/ic_launcher&quot;\n    android:label=&quot;@string/app_name&quot;\n    android:roundIcon=&quot;@mipmap/ic_launcher_round&quot;\n    android:supportsRtl=&quot;true&quot;\n    android:theme=&quot;@style/AppTheme&quot;&gt;\n\n    &lt;activity android:name=&quot;.views.login.LoginView&quot;\n      android:label=&quot;@string/title_activity_login&quot;\n      android:launchMode=&quot;singleTop&quot;&gt;\n      &lt;intent-filter&gt;\n        &lt;action android:name=&quot;android.intent.action.VIEW&quot; /&gt;\n        &lt;action android:name=&quot;android.intent.action.MAIN&quot; /&gt;\n        &lt;category android:name=&quot;android.intent.category.LAUNCHER&quot; /&gt;\n      &lt;/intent-filter&gt;\n    &lt;/activity&gt;\n\n    &lt;activity android:name=&quot;.views.placemarklist.PlacemarkListView&quot;\n      android:label=&quot;@string/title_activity_placemark_list&quot;\n      android:launchMode=&quot;singleTop&quot;&gt;\n    &lt;/activity&gt;\n\n    &lt;activity android:name=&quot;.views.placemark.PlacemarkView&quot;\n      android:label=&quot;@string/title_activity_placemark&quot;&gt;\n      &lt;meta-data\n        android:name=&quot;android.support.PARENT_ACTIVITY&quot;\n        android:value=&quot;.views.placemarklist.PlacemarkListView&quot; /&gt;\n    &lt;/activity&gt;\n\n    &lt;activity\n      android:name=&quot;.views.editlocation.EditLocationView&quot;\n      android:label=&quot;@string/title_activity_edit_location&quot;&gt;\n      &lt;meta-data\n        android:name=&quot;android.support.PARENT_ACTIVITY&quot;\n        android:value=&quot;.views.placemark.PlacemarkView&quot; /&gt;\n    &lt;/activity&gt;\n\n    &lt;activity\n      android:name=&quot;.views.map.PlacemarkMapView&quot;\n      android:label=&quot;@string/title_activity_placemark_maps&quot;\n      android:launchMode=&quot;singleTop&quot;&gt;\n      &lt;meta-data\n        android:name=&quot;android.support.PARENT_ACTIVITY&quot;\n        android:value=&quot;.views.placemarklist.PlacemarkListView&quot; /&gt;\n    &lt;/activity&gt;\n\n    &lt;meta-data\n      android:name=&quot;com.google.android.geo.API_KEY&quot;\n      android:value=&quot;@string/google_maps_key&quot; /&gt;\n\n  &lt;/application&gt;\n\n&lt;/manifest&gt;</code></pre>\n<p>Run the app now - it should display the login activity first, and take you to the placemark list when you press either button.</p>\n",
  "<p>Our first version will just let the user signup/login without paying any attention to what they enter as credentials.</p>\n",
  " Logout",
  "<h1>Logout</h1>\n<p>As we now support log in - we also need to support logout. This will require a change to our existing menus in PlacemarkListView. Once logged in the AppBar will be reconfigured to have a drop down menu:</p>\n<p><img src=\"img/03x.png\" alt=\"\"></p>\n<p><img src=\"img/04x.png\" alt=\"\"></p>\n<p>First, some new/revised strings:</p>\n<h2>res/values/strings.xml</h2>\n<pre><code>  &lt;string name=&quot;menu_showMap&quot;&gt;Show Map&lt;/string&gt;\n  &lt;string name=&quot;menu_logout&quot;&gt;Logout&lt;/string&gt;</code></pre>\n<p>This is the revised menu </p>\n<h2>memu_main.xml</h2>\n<pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;\n&lt;menu xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;\n  xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot;&gt;\n\n  &lt;item\n    android:id=&quot;@+id/item_add&quot;\n    android:icon=&quot;@android:drawable/ic_menu_add&quot;\n    android:title=&quot;@string/menu_addPlacemark&quot;\n    app:showAsAction=&quot;never&quot;/&gt;\n\n  &lt;item\n    android:id=&quot;@+id/item_map&quot;\n    android:icon=&quot;@android:drawable/ic_menu_mapmode&quot;\n    android:title=&quot;@string/menu_showMap&quot;\n    app:showAsAction=&quot;never&quot;/&gt;\n\n  &lt;item\n    android:id=&quot;@+id/item_logout&quot;\n    android:title=&quot;@string/menu_logout&quot;\n    android:visible=&quot;true&quot;\n    app:showAsAction=&quot;never&quot; /&gt;\n&lt;/menu&gt;</code></pre>\n<p>In order to Launch a view, we have been encapsulating the start procedure in BaseView:</p>\n<h2>BaseView</h2>\n<pre><code>...\nimport org.wit.placemark.views.login.LoginView\n...\nenum class VIEW {\n  LOCATION, PLACEMARK, MAPS, LIST, LOGIN\n}\n...\n\n  fun navigateTo(view: VIEW, code: Int = 0, key: String = &quot;&quot;, value: Parcelable? = null) {\n    var intent = Intent(this, PlacemarkListView::class.java)\n    when (view) {\n      VIEW.LOCATION -&gt; intent = Intent(this, EditLocationView::class.java)\n      VIEW.PLACEMARK -&gt; intent = Intent(this, PlacemarkView::class.java)\n      VIEW.MAPS -&gt; intent = Intent(this, PlacemarkMapView::class.java)\n      VIEW.LIST -&gt; intent = Intent(this, PlacemarkListView::class.java)\n      VIEW.LOGIN -&gt; intent = Intent(this, LoginView::class.java)\n    }\n    if (key != &quot;&quot;) {\n      intent.putExtra(key, value)\n    }\n    startActivityForResult(intent, code)\n  }</code></pre>\n<p>We need to be able to handle the new logout menu option. This is an extend version of the menu handler in PlacemarkListView:</p>\n<h2>PlacemarkListView</h2>\n<pre><code>  override fun onOptionsItemSelected(item: MenuItem?): Boolean {\n    when (item?.itemId) {\n      R.id.item_add -&gt; presenter.doAddPlacemark()\n      R.id.item_map -&gt; presenter.doShowPlacemarksMap()\n      R.id.item_logout -&gt;presenter.doLogout()\n    }\n    return super.onOptionsItemSelected(item)\n  }</code></pre>\n<p>Finally, this will need a new method in PlacemarkListPresenter:</p>\n<h2>PlacemarkListPresenter</h2>\n<pre><code>  fun doLogout() {\n    view?.navigateTo(VIEW.LOGIN)\n  }\n}</code></pre>\n<p>Notice we are just switching to the login screen when logout is selected.</p>\n<p>Try this now, and make sure login and logout work as expected.</p>\n",
  "<p>As we now support log in - we also need to support logout. This will require a change to our existing menus in PlacemarkListView. Once logged in the AppBar will be reconfigured to have a drop down menu:</p>\n",
  " Firebase",
  "<h1>Firebase</h1>\n<p>Visit Firebase and create / log in to your account:</p>\n<ul>\n<li><a href=\"https://firebase.google.com/\">https://firebase.google.com/</a></li>\n</ul>\n<p>Create a new Firebase Project:</p>\n<p><img src=\"img/01.png\" alt=\"\"></p>\n<p>Give the project a name:</p>\n<p><img src=\"img/02.png\" alt=\"\"></p>\n<p>Once the app is created - you should see the application console (click on <code>Develop</code> to see drop down menu):</p>\n<p><img src=\"img/03.png\" alt=\"\"></p>\n<p>Select the <code>Authentication</code> panel - </p>\n<p><img src=\"img/04.png\" alt=\"\"></p>\n<p>Press <code>Set Sign-in Method</code> and in the next screen and enable <code>Email/Password</code>:</p>\n<p><img src=\"img/05.png\" alt=\"\"></p>\n<p>Your Authentication methods should look like this:</p>\n<p><img src=\"img/06.png\" alt=\"\"></p>\n",
  "<p>Visit Firebase and create / log in to your account:</p>\n",
  " Connect the App",
  "<h1>Connect the App</h1>\n<p>Back in Android Studio, select <code>Tools-&gt;Firebase</code> - you should see the Firebase Assistant:</p>\n<p><img src=\"img/07.png\" alt=\"\"></p>\n<p>Select <code>Authentication</code>:</p>\n<p><img src=\"img/08.png\" alt=\"\"></p>\n<p>... and then select <code>Email and password authentication</code>:</p>\n<p><img src=\"img/09.png\" alt=\"\"></p>\n<p>Now press <code>Connect to Firebase</code></p>\n<p>This may require you to authenticate to firebase with your account. Once connected, you should see your firebase created app:</p>\n<p><img src=\"img/10.png\" alt=\"\"></p>\n<p>Select the app and press <code>Connect to Firebase</code></p>\n<p>This will insert a new file into your project called <code>google-services.json</code>. This file is embedded in the <code>app</code> folder. You will need to switch to the <code>Project</code> perspective in Studio in order to see it.</p>\n<p>The assistant will also insert additional entries into both of our gradle files. The top level gradle will have this additional entry:</p>\n<h2>build.gradle</h2>\n<pre><code>    classpath &#39;com.google.gms:google-services:4.0.1&#39;</code></pre>\n<p>The app gradle file will have additional libraries. As we are managing our gradle a little differently - we will take control of this ourselves. </p>\n<p>This is a revised version of the base gradle file you should use:</p>\n<h2>project gradle</h2>\n<pre><code>apply plugin: &#39;com.android.application&#39;\n\napply plugin: &#39;kotlin-android&#39;\n\napply plugin: &#39;kotlin-android-extensions&#39;\n\napply plugin: &quot;kotlin-kapt&quot;\n\napply plugin: &#39;com.google.gms.google-services&#39;\n\nandroidExtensions {\n  experimental = true\n}\n\nandroid {\n  compileSdkVersion 28\n  defaultConfig {\n    applicationId &quot;org.wit.placemark&quot;\n    minSdkVersion 23\n    targetSdkVersion 28\n    versionCode 1\n    versionName &quot;1.0&quot;\n    testInstrumentationRunner &quot;androidx.test.runner.AndroidJUnitRunner&quot;\n  }\n  buildTypes {\n    release {\n      minifyEnabled false\n      proguardFiles getDefaultProguardFile(&#39;proguard-android.txt&#39;), &#39;proguard-rules.pro&#39;\n    }\n  }\n}\n\next {\n  app_compat_version = &#39;1.0.2&#39;\n  constraint_layout_version = &#39;2.0.0-alpha2&#39;\n  material_version = &#39;1.0.0&#39;\n  cardview_version = &#39;1.0.0&#39;\n  design_library_version = &#39;26.1.0&#39;\n  support_library_version = &#39;26.1.0&#39;\n\n  play_services_maps_version = &#39;16.0.0&#39;\n  play_services_location_version = &#39;16.0.0&#39;\n\n  anko_version = &#39;0.10.7&#39;\n  anko_commons_version = &#39;0.10.7&#39;\n  gson_version = &#39;2.8.5&#39;\n\n  room_version = &quot;2.0.0&quot;\n  firebase_version = &#39;16.0.5&#39;\n}\n\ndependencies {\n  implementation fileTree(dir: &#39;libs&#39;, include: [&#39;*.jar&#39;])\n  implementation &quot;org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version&quot;\n  implementation &quot;androidx.appcompat:appcompat:$app_compat_version&quot;\n  implementation &quot;androidx.constraintlayout:constraintlayout:$constraint_layout_version&quot;\n  implementation &quot;com.google.android.material:material:$material_version&quot;\n  implementation &quot;androidx.cardview:cardview:$cardview_version&quot;\n  implementation &quot;com.google.android.gms:play-services-maps:$play_services_maps_version&quot;\n  implementation &quot;com.google.android.gms:play-services-location:$play_services_location_version&quot;\n  implementation &quot;org.jetbrains.anko:anko-commons:$anko_commons_version&quot;\n  implementation &quot;org.jetbrains.anko:anko:$anko_version&quot;\n  implementation &quot;com.google.code.gson:gson:$gson_version&quot;\n  implementation &quot;androidx.room:room-runtime:$room_version&quot;\n  kapt &quot;androidx.room:room-compiler:$room_version&quot;\n\n  implementation &quot;com.google.firebase:firebase-auth:$firebase_version&quot;\n  implementation &quot;com.google.firebase:firebase-database:$firebase_version&quot;\n\n  testImplementation &#39;junit:junit:4.12&#39;\n  androidTestImplementation &#39;androidx.test:runner:1.1.0&#39;\n  androidTestImplementation &#39;androidx.test.espresso:espresso-core:3.1.0&#39;\n\n}</code></pre>\n<p>These are the new features in the project:</p>\n<pre><code>...\napply plugin: &#39;com.google.gms.google-services&#39;\n...\n  firebase_version = &#39;16.0.5&#39;\n  ...\n  implementation &quot;com.google.firebase:firebase-auth:$firebase_version&quot;\n  implementation &quot;com.google.firebase:firebase-database:$firebase_version&quot;\n...</code></pre>\n<p>Rebuild the application now to make sure all of these libraries can be incorporated correctly.</p>\n<h2>google-service.json</h2>\n<p>The Firebase wizard will also have generate a file of various credentials for your app in </p>\n<ul>\n<li>app/app/google-services.json</li>\n</ul>\n<p>Have a look at the contents of this file now. It contains multiple keys to facilitate authentication to your firebase app. You will need to exclude this from git, particularly if the repo is public:</p>\n<h2>.gitignore</h2>\n<pre><code>app/google-services.json</code></pre>\n",
  "<p>Back in Android Studio, select <code>Tools-&gt;Firebase</code> - you should see the Firebase Assistant:</p>\n",
  "# Progress",
  "<h2>Progress</h2>\n<p>When login in, we should display some indication to the user that we are &#39;working&#39; on the login. This is usually via a <code>Progress</code> widget of some kind. Bring one in now to the login layout:</p>\n<p><img src=\"img/17/png\" alt=\"\"></p>\n<p>It might be structured like this in the layout:</p>\n<h2>activity_login.xml</h2>\n<pre><code>...\n    &lt;ProgressBar\n      android:id=&quot;@+id/progressBar&quot;\n      style=&quot;@style/Widget.AppCompat.ProgressBar&quot;\n      android:layout_width=&quot;196dp&quot;\n      android:layout_height=&quot;96dp&quot;\n      android:layout_marginStart=&quot;8dp&quot;\n      android:layout_marginTop=&quot;8dp&quot;\n      android:layout_marginEnd=&quot;8dp&quot;\n      android:layout_marginBottom=&quot;8dp&quot;\n      app:layout_constraintBottom_toBottomOf=&quot;parent&quot;\n      app:layout_constraintEnd_toEndOf=&quot;parent&quot;\n      app:layout_constraintStart_toStartOf=&quot;parent&quot;\n      app:layout_constraintTop_toBottomOf=&quot;@+id/signUp&quot; /&gt;\n...</code></pre>\n<p>In LoginView we can then toggle this widget.</p>\n<p>First, in onCreate we can make it invisible (or GONE)</p>\n<pre><code>    progressBar.visibility = View.GONE</code></pre>\n<p>Then we can override the methods already defined in the BaseView class:</p>\n<h2>LoginView</h2>\n<pre><code>  override fun showProgress() {\n    progressBar.visibility = View.VISIBLE\n  }\n\n  override fun hideProgress() {\n    progressBar.visibility = View.GONE\n  }\n}</code></pre>\n",
  "<p>When login in, we should display some indication to the user that we are &#39;working&#39; on the login. This is usually via a <code>Progress</code> widget of some kind. Bring one in now to the login layout:</p>\n",
  "08.08.md",
  " Signup/Login Implementation",
  "08",
  "<h1>Signup/Login Implementation</h1>\n<p>Back in the LoginPresenter class - we can implement the Firebase login strategy:</p>\n<h2>LoginPresenter</h2>\n<pre><code>package org.wit.placemark.views.login\n\nimport com.google.firebase.auth.FirebaseAuth\nimport org.jetbrains.anko.toast\nimport org.wit.placemark.views.BasePresenter\nimport org.wit.placemark.views.BaseView\nimport org.wit.placemark.views.VIEW\n\nclass LoginPresenter(view: BaseView) : BasePresenter(view) {\n\n  var auth: FirebaseAuth = FirebaseAuth.getInstance()\n\n  fun doLogin(email: String, password: String) {\n    view?.showProgress()\n    auth.signInWithEmailAndPassword(email, password).addOnCompleteListener(view!!) { task -&gt;\n      if (task.isSuccessful) {\n        view?.navigateTo(VIEW.LIST)\n      } else {\n        view?.toast(&quot;Sign Up Failed: ${task.exception?.message}&quot;)\n      }\n      view?.hideProgress()\n    }\n  }\n\n  fun doSignUp(email: String, password: String) {\n    view?.showProgress()\n    auth.createUserWithEmailAndPassword(email, password).addOnCompleteListener(view!!) { task -&gt;\n      if (task.isSuccessful) {\n        view?.navigateTo(VIEW.LIST)\n      } else {\n        view?.toast(&quot;Sign Up Failed: ${task.exception?.message}&quot;)\n      }\n      view?.hideProgress()\n    }\n  }\n}</code></pre>\n<p>This will sign up a new user with the Firebase service. Try it now </p>\n<p>Make sure to enter a correctly formed email + a password of at least 8 characters.</p>\n<p>The application should take you to the main Placemarks screen.</p>\n<p>Back in the Firebase console - check the authentication panel to see if the new user is recorded:</p>\n<p><img src=\"img/12.png\" alt=\"\"></p>\n",
  "<p>Back in the LoginPresenter class - we can implement the Firebase login strategy:</p>\n",
  "09.Exercises.md",
  "<h1>Solution</h1>\n<p>Placemark application so far:</p>\n<ul>\n<li><a href=\"archives/archive.zip\">archive.zip</a></li>\n</ul>\n<h2>Exercise 1</h2>\n<p>Implement logout. This is the FirebaseAuth method we need:</p>\n<ul>\n<li><a href=\"https://firebase.google.com/docs/reference/android/com/google/firebase/auth/FirebaseAuth.html#signOut()\">https://firebase.google.com/docs/reference/android/com/google/firebase/auth/FirebaseAuth.html#signOut()</a></li>\n</ul>\n<h2>Exercise 2</h2>\n<p>Adjust the title of the PlacemarkListActivity - such that it displays the logged in users email:</p>\n<p><img src=\"img/13.png\" alt=\"\"></p>\n<p>The logged in user details are reasonably easy to locate:</p>\n<ul>\n<li><a href=\"https://firebase.google.com/docs/auth/web/manage-users\">https://firebase.google.com/docs/auth/web/manage-users</a></li>\n</ul>\n<p>Here is how we could access this in kotlin:</p>\n<pre><code>    val user = FirebaseAuth.getInstance().currentUser</code></pre>\n",
  "00.Lab-11b Firebase Database.md",
  "<h1>Objectives</h1>\n<p>Store placemarks in Firebase Realtime Database</p>\n",
  "01.Solutions.md",
  "Solutions",
  "<h1>Solutions</h1>\n<h2>Exercise 1 : Logout</h2>\n<h2>PlacemarkListPresenter</h2>\n<pre><code>  fun doLogout() {\n    FirebaseAuth.getInstance().signOut()\n    view?.navigateTo(VIEW.LOGIN)\n  }</code></pre>\n<h2>Exercise 2: Current User</h2>\n<p>Adjust the title of the PlacemarkListActivity - such that it displays the logged in users email:</p>\n<p><img src=\"img/13.png\" alt=\"\"></p>\n<h2>Solution</h2>\n<p>Now that we are centralising the toolbar initialisation in BaseView, we can introduce this feature for all views:</p>\n<h2>BaseView</h2>\n<pre><code>...\n fun init(toolbar: Toolbar, upEnabled: Boolean) {\n    toolbar.title = title\n    setSupportActionBar(toolbar)\n    supportActionBar?.setDisplayHomeAsUpEnabled(upEnabled)\n    val user = FirebaseAuth.getInstance().currentUser\n    if (user != null) {\n      toolbar.title = &quot;${title}: ${user.email}&quot;\n    }\n  }\n...</code></pre>\n",
  "<h2>Exercise 1 : Logout</h2>\n",
  " Image Management",
  "<h1>Image Management</h1>\n<p>Currently we load all of the images using a helper method we have written for this purpose. We will replace this now with the Glide library:</p>\n<ul>\n<li><a href=\"https://github.com/bumptech/glide\">https://github.com/bumptech/glide</a></li>\n</ul>\n<p>This will work as as currently, but additionally it will also work with url of images on the public Internet. This will be part of our move to firebase later in this lab.</p>\n<p>First, we define the version of Glide we wish to use:</p>\n<h2>build.gradle</h2>\n<pre><code>...\n  glide_version = &#39;4.8.0&#39;\n  ...\n  implementation &quot;com.github.bumptech.glide:glide:$glide_version&quot;\n  ...\n...</code></pre>\n<p>Now we can introduce the glide library wherever we are displaying images:</p>\n<h2>PlacemarkAdapter</h2>\n<p>Replace:</p>\n<pre><code>      itemView.imageIcon.setImageBitmap(readImageFromPath(itemView.context, placemark.image))</code></pre>\n<p>with</p>\n<pre><code>      Glide.with(itemView.context).load(placemark.image).into(itemView.imageIcon);</code></pre>\n<h2>PlacemarkView</h2>\n<p>Replace:</p>\n<pre><code>    placemarkImage.setImageBitmap(readImageFromPath(this, placemark.image))</code></pre>\n<p>with</p>\n<pre><code>    Glide.with(this).load(placemark.image).into(placemarkImage);</code></pre>\n<h2>PlacemarkMqpView</h2>\n<p>Replace:</p>\n<pre><code>     imageView.setImageBitmap(readImageFromPath(this, placemark.image))</code></pre>\n<p>with:</p>\n<pre><code>    Glide.with(this).load(placemark.image).into(imageView);</code></pre>\n<p>Rebuild and test the app now. It should behave as before.</p>\n<h2>PlacemarkMapPresenter</h2>\n<p>We need one other small adjustment - currently we have this line in PlacemarkMapPresenter::doPopulateMap()</p>\n<pre><code>      map.addMarker(options).tag = it.id</code></pre>\n<p>This stores a tag to refer to the placemark associated with the marker we have just placed on the map. Change this to the following:</p>\n<pre><code>      map.addMarker(options).tag = it</code></pre>\n<p>Now in PlacemarkMapPresenter::onMarkerSelected(), replace</p>\n<pre><code>      val tag = marker.tag as Long\n      val placemark = app.placemarks.findById(tag)</code></pre>\n<p>with</p>\n<pre><code>      val placemark = marker.tag as PlacemarkModel</code></pre>\n<p>The reason we are making this adjustment is because of the Firebase adjustments we will shortly make to the PlacemarkModel</p>\n",
  "<p>Currently we load all of the images using a helper method we have written for this purpose. We will replace this now with the Glide library:</p>\n",
  " Preparing for Firebase",
  "<h1>Preparing for Firebase</h1>\n<p>We need to make a number of small changes to the application in order to prepare for incorporating Firebase storage of placemarks.</p>\n<h1>Managing the Firebase ID</h1>\n<p>In PlacemarkModel, we need an additional ID - fbId - to record the Firebase ID of each placemark. Unlike the existing id, which is a Long, the firebase id is a string:</p>\n<h2>PlacemarkModel</h2>\n<pre><code>package org.wit.placemark.models\n\nimport android.os.Parcelable\nimport androidx.room.Embedded\nimport androidx.room.Entity\nimport androidx.room.PrimaryKey\nimport kotlinx.android.parcel.Parcelize\n\n@Parcelize\n@Entity\ndata class PlacemarkModel(@PrimaryKey(autoGenerate = true) var id: Long = 0,\n                          var fbId : String = &quot;&quot;,\n                          var title: String = &quot;&quot;,\n                          var description: String = &quot;&quot;,\n                          var image: String = &quot;&quot;,\n                          @Embedded var location : Location = Location()): Parcelable\n\n@Parcelize\ndata class Location(var lat: Double = 0.0,\n                    var lng: Double = 0.0,\n                    var zoom: Float = 0f) : Parcelable</code></pre>\n<h1>Clearing Placemarks between user logins</h1>\n<p>As we are now supporting multiple logins - then we need a way of clearing the placemarks between different users accessing the app.</p>\n<h2>PlacemarkMemStore</h2>\n<pre><code>  fun clear()</code></pre>\n<h2>PlacemarkMemStore</h2>\n<pre><code>  override fun clear() {\n    placemarks.clear()\n  }</code></pre>\n<h2>PlacemarkStoreRoom</h2>\n<pre><code>  override fun clear() {\n  }</code></pre>\n<h2>PlacemarkJSONStore</h2>\n<pre><code>  override fun clear() {\n    placemarks.clear()\n  }</code></pre>\n<p>We keep the PlacemarkStoreRoom implementation empty for the moment.</p>\n",
  "<p>We need to make a number of small changes to the application in order to prepare for incorporating Firebase storage of placemarks.</p>\n",
  " Firebase Database",
  "<h1>Firebase Database</h1>\n<p>In your Firebase Application Console, select <code>Database</code>:</p>\n<p><img src=\"img/01x.png\" alt=\"\"></p>\n<p>And press <code>Get Started</code> on <code>Realtime Database</code>:</p>\n<p><img src=\"img/02x.png\" alt=\"\"></p>\n<p>Be sure to select <code>Start in test mode</code> as shown above.</p>\n<p><img src=\"img/03x.png\" alt=\"\"></p>\n<p>This is a view into your database - you will see in real time here any objects you insert. Also, take note of the url:</p>\n<pre><code>https://placemark-XXXXd.firebaseio.co</code></pre>\n<p>This will be used in your application configuration. To establish the connection, in Studio select <code>Tools-&gt;Firebase-&gt;Realtime Database</code></p>\n<p><img src=\"img/04.png\" alt=\"\"></p>\n<p>Press connect (screen shot above shows result of pressing connect). This is all you need to do at this stage. If you like, you can verify that the connection has been made. Do this by locating the following file:</p>\n<ul>\n<li>app/google-services.json</li>\n</ul>\n<p>It may look something like this:</p>\n<pre><code>{\n  &quot;project_info&quot;: {\n    &quot;project_number&quot;: &quot;4283XXXXX&quot;,\n    &quot;firebase_url&quot;: &quot;https://placemark-XXXXd.firebaseio.com&quot;,\n    &quot;project_id&quot;: &quot;placemark-XXXd&quot;,\n  },\n  &quot;client&quot;: [\n    {\n      &quot;client_info&quot;: {\n        &quot;mobilesdk_app_id&quot;: &quot;1:428338485028:android:634c4XXXce143&quot;,\n        &quot;android_client_info&quot;: {\n          &quot;package_name&quot;: &quot;org.wit.placemark&quot;\n        }\n      },\n      &quot;oauth_client&quot;: [\n        {\n          &quot;client_id&quot;: &quot;4283XXXXX028-ntqXXXXXXXXXl9ot6ok3r.apps.googleusercontent.com&quot;,\n          &quot;client_type&quot;: 1,\n          &quot;android_info&quot;: {\n            &quot;package_name&quot;: &quot;org.wit.placemark&quot;,\n            &quot;certificate_hash&quot;: &quot;bcaa865ad78XXXXXXXXX731db4da8b&quot;\n          }\n        },\n        {\n          &quot;client_id&quot;: &quot;42833848XXXXXX5cup7XXXXXXk8s.apps.googleusercontent.com&quot;,\n          &quot;client_type&quot;: 3\n        }\n      ],\n      &quot;api_key&quot;: [\n        {\n          &quot;current_key&quot;: &quot;AIzaSyBXXXXXXXXXXXoTeWhTqfKxbI&quot;\n        }\n      ],\n      &quot;services&quot;: {\n        &quot;analytics_service&quot;: {\n          &quot;status&quot;: 1\n        },\n        &quot;appinvite_service&quot;: {\n          &quot;status&quot;: 2,\n          &quot;other_platform_oauth_client&quot;: [\n            {\n              &quot;client_id&quot;: &quot;428338XXXXXXXXXXXXXXXXXX1e4kk8s.apps.googleusercontent.com&quot;,\n              &quot;client_type&quot;: 3\n            }\n          ]\n        },\n        &quot;ads_service&quot;: {\n          &quot;status&quot;: 2\n        }\n      }\n    }\n  ],\n  &quot;configuration_version&quot;: &quot;1&quot;\n}</code></pre>\n<p>A Firebase URL should be in the opening info object.</p>\n",
  "<p>In your Firebase Application Console, select <code>Database</code>:</p>\n",
  " FireStore",
  "<h1>FireStore</h1>\n<p>Create a new package called <code>org.wit.placemark.models.firebase</code>, and introduce this new class, an implementation of PlacemarkStore:</p>\n<h3>PlacemarkFireStore</h3>\n<pre><code>package org.wit.placemark.models.firebase\n\nimport android.content.Context\nimport com.google.firebase.auth.FirebaseAuth\nimport com.google.firebase.database.*\nimport org.jetbrains.anko.AnkoLogger\nimport org.wit.placemark.models.PlacemarkModel\nimport org.wit.placemark.models.PlacemarkStore\n\nclass PlacemarkFireStore(val context: Context) : PlacemarkStore, AnkoLogger {\n\n  val placemarks = ArrayList&lt;PlacemarkModel&gt;()\n  lateinit var userId: String\n  lateinit var db: DatabaseReference\n\n  suspend override fun findAll(): List&lt;PlacemarkModel&gt; {\n    return placemarks\n  }\n\n  suspend override fun findById(id: Long): PlacemarkModel? {\n    val foundPlacemark: PlacemarkModel? = placemarks.find { p -&gt; p.id == id }\n    return foundPlacemark\n  }\n\n  suspend override fun create(placemark: PlacemarkModel) {\n    val key = db.child(&quot;users&quot;).child(userId).child(&quot;placemarks&quot;).push().key\n    placemark.fbId = key!!\n    placemarks.add(placemark)\n    db.child(&quot;users&quot;).child(userId).child(&quot;placemarks&quot;).child(key).setValue(placemark)\n  }\n\n  suspend override fun update(placemark: PlacemarkModel) {\n    var foundPlacemark: PlacemarkModel? = placemarks.find { p -&gt; p.fbId == placemark.fbId }\n    if (foundPlacemark != null) {\n      foundPlacemark.title = placemark.title\n      foundPlacemark.description = placemark.description\n      foundPlacemark.image = placemark.image\n      foundPlacemark.location = placemark.location\n    }\n\n    db.child(&quot;users&quot;).child(userId).child(&quot;placemarks&quot;).child(placemark.fbId).setValue(placemark)\n  }\n\n  suspend override fun delete(placemark: PlacemarkModel) {\n    db.child(&quot;users&quot;).child(userId).child(&quot;placemarks&quot;).child(placemark.fbId).removeValue()\n    placemarks.remove(placemark)\n  }\n\n  override fun clear() {\n    placemarks.clear()\n  }\n\n  fun fetchPlacemarks(placemarksReady: () -&gt; Unit) {\n    val valueEventListener = object : ValueEventListener {\n      override fun onCancelled(error: DatabaseError) {\n      }\n      override fun onDataChange(dataSnapshot: DataSnapshot) {\n        dataSnapshot.children.mapNotNullTo(placemarks) { it.getValue&lt;PlacemarkModel&gt;(PlacemarkModel::class.java) }\n        placemarksReady()\n      }\n    }\n    userId = FirebaseAuth.getInstance().currentUser!!.uid\n    db = FirebaseDatabase.getInstance().reference\n    placemarks.clear()\n    db.child(&quot;users&quot;).child(userId).child(&quot;placemarks&quot;).addListenerForSingleValueEvent(valueEventListener)\n  }\n}</code></pre>\n<p>This is an implementation of our PlacemarkStore interface - which stores/retrieves placemarks from the Firebase database.</p>\n<p>It implements all the PlacemarkStore methods + one new method not specified in the interface:</p>\n<pre><code>  fun fetchPlacemarks(placemarksReady: () -&gt; Unit) {\n    val valueEventListener = object : ValueEventListener {\n      override fun onCancelled(error: DatabaseError) {\n      }\n      override fun onDataChange(dataSnapshot: DataSnapshot) {\n        dataSnapshot.children.mapNotNullTo(placemarks) { it.getValue&lt;PlacemarkModel&gt;(PlacemarkModel::class.java) }\n        placemarksReady()\n      }\n    }\n    userId = FirebaseAuth.getInstance().currentUser!!.uid\n    db = FirebaseDatabase.getInstance().reference\n    placemarks.clear()\n    db.child(&quot;users&quot;).child(userId).child(&quot;placemarks&quot;).addListenerForSingleValueEvent(valueEventListener)\n  }</code></pre>\n<p>This is a method to fetch placemarks, and trigger a callback (placemarkReady) when the placemakrs have been retrieved. We will need to explicitly call this method when we are log in (next step).</p>\n",
  "<p>Create a new package called <code>org.wit.placemark.models.firebase</code>, and introduce this new class, an implementation of PlacemarkStore:</p>\n",
  " Login",
  "<h1>Login</h1>\n<p>This is a revised Login activity:</p>\n<h2>LoginAPresenter</h2>\n<pre><code>package org.wit.placemark.views.login\n\nimport com.google.firebase.auth.FirebaseAuth\nimport org.jetbrains.anko.toast\nimport org.wit.placemark.models.firebase.PlacemarkFireStore\nimport org.wit.placemark.views.BasePresenter\nimport org.wit.placemark.views.BaseView\nimport org.wit.placemark.views.VIEW\n\nclass LoginPresenter(view: BaseView) : BasePresenter(view) {\n\n  var auth: FirebaseAuth = FirebaseAuth.getInstance()\n  var fireStore: PlacemarkFireStore? = null\n\n  init {\n    if (app.placemarks is PlacemarkFireStore) {\n      fireStore = app.placemarks as PlacemarkFireStore\n    }\n  }\n\n  fun doLogin(email: String, password: String) {\n    view?.showProgress()\n    auth.signInWithEmailAndPassword(email, password).addOnCompleteListener(view!!) { task -&gt;\n      if (task.isSuccessful) {\n        if (fireStore != null) {\n          fireStore!!.fetchPlacemarks {\n            view?.hideProgress()\n            view?.navigateTo(VIEW.LIST)\n          }\n        } else {\n          view?.hideProgress()\n          view?.navigateTo(VIEW.LIST)\n        }\n      } else {\n        view?.hideProgress()\n        view?.toast(&quot;Sign Up Failed: ${task.exception?.message}&quot;)\n      }\n    }\n  }\n\n  fun doSignUp(email: String, password: String) {\n    view?.showProgress()\n    auth.createUserWithEmailAndPassword(email, password).addOnCompleteListener(view!!) { task -&gt;\n      if (task.isSuccessful) {\n        view?.hideProgress()\n        view?.navigateTo(VIEW.LIST)\n      } else {\n        view?.hideProgress()\n        view?.toast(&quot;Sign Up Failed: ${task.exception?.message}&quot;)\n      }\n    }\n  }\n}</code></pre>\n<p>The key here is the code dealing with a successful login:</p>\n<pre><code>      if (task.isSuccessful) {\n        if (fireStore != null) {\n          fireStore!!.fetchPlacemarks {\n            view?.hideProgress()\n            view?.navigateTo(VIEW.LIST)\n          }\n        }\n      }</code></pre>\n<p>In the above, we are checking to see if we are using the fireStore PlacemarkStore implementation, and if so, we fetch the placemarks and will be notified when they arrive. If we are not using the fireStore, then we just launch PlacemarkListActivity as normal.</p>\n<p>Finally, on logout we need to clear the placemarks:</p>\n<pre><code>  fun doLogout() {\n    FirebaseAuth.getInstance().signOut()\n    app.placemarks.clear()\n    view?.navigateTo(VIEW.LOGIN)\n  }</code></pre>\n",
  "<p>This is a revised Login activity:</p>\n",
  "# Console",
  "<h2>Console</h2>\n<p>Create the PlacemarkFireStore now in MainApp:</p>\n<pre><code>class MainApp : Application(), AnkoLogger {\n\n  lateinit var placemarks: PlacemarkStore\n\n  override fun onCreate() {\n    super.onCreate()\n    //placemarks = PlacemarkJSONStore(applicationContext)\n    //placemarks = PlacemarkStoreRoom(applicationContext)\n    placemarks = PlacemarkFireStore(applicationContext)\n    info(&quot;Placemark started&quot;)\n  }\n}</code></pre>\n<p>Run the app now, log in and create some placemarks. </p>\n<p>Keep an eye on the Database console:</p>\n<p><img src=\"img/06.png\" alt=\"\"></p>\n<p>You should see the placemarks you create populating here. Each users placemarks are grouped under the user id. And individual placemarks are under their own unique id.</p>\n<p>User Ids can be cross-referenced on the Authentication panel:</p>\n<p><img src=\"img/07.png\" alt=\"\"></p>\n<p>Experiment with various accounts + placemarks now. Verify that when you log in you get the placemarks relevant to the logged in user.</p>\n<p>Also - note that the images are still stored locally - examine the image path. So, although they will display as normal - they will not be available if you change emulators. </p>\n<p>Perhaps try this now to verify that placemark images are localised to a specific phone.</p>\n",
  "<p>Create the PlacemarkFireStore now in MainApp:</p>\n",
  "<h1>Solution</h1>\n<p>Placemark application so far:</p>\n<ul>\n<li><a href=\"archives/archive.zip\">archive.zip</a></li>\n</ul>\n",
  "00.Lab-11c Firebase Storage.md",
  "<h1>Objectives</h1>\n<p>Store images in Firebase Storage</p>\n",
  " Firebase Storage",
  "<h1>Firebase Storage</h1>\n<p>In the Firebase Console, select <code>Storage</code>:</p>\n<p><img src=\"img/02.png\" alt=\"\"></p>\n<p><img src=\"img/03.png\" alt=\"\"></p>\n<p>This gives a general purpose file storage area:</p>\n<p><img src=\"img/05.png\" alt=\"\"></p>\n<p>We will use this to store the placemark images.</p>\n<p>In Studio, we now connect our app to the Firebase Storage system:</p>\n<p><img src=\"img/08.png\" alt=\"\"></p>\n<p>This will update an entry in the google-services.json file, connecting the app to the storeage system.</p>\n",
  "<p>In the Firebase Console, select <code>Storage</code>:</p>\n",
  " Gradle",
  "<h1>Gradle</h1>\n<p>To use the new facilities, we need another library:</p>\n<h2>build.gradle</h2>\n<pre><code>  implementation &quot;com.google.firebase:firebase-storage:$firebase_version&quot;</code></pre>\n<p>Rebuild the app now.</p>\n",
  "<p>To use the new facilities, we need another library:</p>\n",
  " PlacemarkFireStore",
  "<h1>PlacemarkFireStore</h1>\n<p>We can augment PlacemarkFireStore with a new method:</p>\n<pre><code>  fun updateImage(placemark: PlacemarkModel) {\n    if (placemark.image != &quot;&quot;) {\n      val fileName = File(placemark.image)\n      val imageName = fileName.getName()\n\n      var imageRef = st.child(userId + &#39;/&#39; + imageName)\n      val baos = ByteArrayOutputStream()\n      val bitmap = readImageFromPath(context, placemark.image)\n\n      bitmap?.let {\n        bitmap.compress(Bitmap.CompressFormat.JPEG, 100, baos)\n        val data = baos.toByteArray()\n        val uploadTask = imageRef.putBytes(data)\n        uploadTask.addOnFailureListener {\n          println(it.message)\n        }.addOnSuccessListener { taskSnapshot -&gt;\n          taskSnapshot.metadata!!.reference!!.downloadUrl.addOnSuccessListener {\n            placemark.image = it.toString()\n            db.child(&quot;users&quot;).child(userId).child(&quot;placemarks&quot;).child(placemark.fbId).setValue(placemark)\n          }\n        }\n      }\n    }\n  }</code></pre>\n<p>This will be called whenever the user selects an image.</p>\n<p>This first part will load into a bitmap object the image the user as selected from the gallery:</p>\n<pre><code>      val fileName = File(placemark.image)\n      val imageName = fileName.getName()\n\n      var imageRef = st.child(userId + &#39;/&#39; + imageName)\n      val baos = ByteArrayOutputStream()\n      val bitmap = readImageFromPath(context, placemark.image)</code></pre>\n<p>Then, if the bimap successfully loaded, we compress it to save on bandwidth and obtain a reference to the bits:</p>\n<pre><code>        bitmap.compress(Bitmap.CompressFormat.JPEG, 100, baos)\n        val data = baos.toByteArray()</code></pre>\n<p>Then we upload to the firebase storage service:</p>\n<pre><code>        uploadTask.addOnFailureListener {\n        }.addOnSuccessListener {\n        }</code></pre>\n<p>If the upload goes successfully:</p>\n<pre><code>         { taskSnapshot -&gt;\n          taskSnapshot.metadata!!.reference!!.downloadUrl.addOnSuccessListener {\n            placemark.image = it.toString()\n            db.child(&quot;users&quot;).child(userId).child(&quot;placemarks&quot;).child(placemark.fbId).setValue(placemark)\n          }</code></pre>\n<p>we need to obtain a public url where the image is stored, and then place this string into the database entry for the placemark.</p>\n<p>This is the complete PlacemarkFireStore at at this stage - including all the code above:</p>\n<h2>PlacemarkFireStore</h2>\n<pre><code>package org.wit.placemark.models.firebase\n\nimport android.content.Context\nimport android.graphics.Bitmap\nimport com.google.firebase.auth.FirebaseAuth\nimport com.google.firebase.database.*\nimport com.google.firebase.storage.FirebaseStorage\nimport com.google.firebase.storage.StorageReference\nimport org.jetbrains.anko.AnkoLogger\nimport org.wit.placemark.helpers.readImageFromPath\nimport org.wit.placemark.models.PlacemarkModel\nimport org.wit.placemark.models.PlacemarkStore\nimport java.io.ByteArrayOutputStream\nimport java.io.File\n\nclass PlacemarkFireStore(val context: Context) : PlacemarkStore, AnkoLogger {\n\n  val placemarks = ArrayList&lt;PlacemarkModel&gt;()\n  lateinit var userId: String\n  lateinit var db: DatabaseReference\n  lateinit var st: StorageReference\n\n  suspend override fun findAll(): List&lt;PlacemarkModel&gt; {\n    return placemarks\n  }\n\n  suspend override fun findById(id: Long): PlacemarkModel? {\n    val foundPlacemark: PlacemarkModel? = placemarks.find { p -&gt; p.id == id }\n    return foundPlacemark\n  }\n\n  suspend override fun create(placemark: PlacemarkModel) {\n    val key = db.child(&quot;users&quot;).child(userId).child(&quot;placemarks&quot;).push().key\n    key?.let {\n      placemark.fbId = key\n      placemarks.add(placemark)\n      db.child(&quot;users&quot;).child(userId).child(&quot;placemarks&quot;).child(key).setValue(placemark)\n      updateImage(placemark)\n    }\n  }\n\n  suspend override fun update(placemark: PlacemarkModel) {\n    var foundPlacemark: PlacemarkModel? = placemarks.find { p -&gt; p.fbId == placemark.fbId }\n    if (foundPlacemark != null) {\n      foundPlacemark.title = placemark.title\n      foundPlacemark.description = placemark.description\n      foundPlacemark.image = placemark.image\n      foundPlacemark.location = placemark.location\n    }\n\n    db.child(&quot;users&quot;).child(userId).child(&quot;placemarks&quot;).child(placemark.fbId).setValue(placemark)\n    if ((placemark.image.length) &gt; 0 &amp;&amp; (placemark.image[0] != &#39;h&#39;)) {\n      updateImage(placemark)\n    }\n  }\n\n  suspend override fun delete(placemark: PlacemarkModel) {\n    db.child(&quot;users&quot;).child(userId).child(&quot;placemarks&quot;).child(placemark.fbId).removeValue()\n    placemarks.remove(placemark)\n  }\n\n  override fun clear() {\n    placemarks.clear()\n  }\n\n  fun updateImage(placemark: PlacemarkModel) {\n    if (placemark.image != &quot;&quot;) {\n      val fileName = File(placemark.image)\n      val imageName = fileName.getName()\n\n      var imageRef = st.child(userId + &#39;/&#39; + imageName)\n      val baos = ByteArrayOutputStream()\n      val bitmap = readImageFromPath(context, placemark.image)\n\n      bitmap?.let {\n        bitmap.compress(Bitmap.CompressFormat.JPEG, 100, baos)\n        val data = baos.toByteArray()\n        val uploadTask = imageRef.putBytes(data)\n        uploadTask.addOnFailureListener {\n          println(it.message)\n        }.addOnSuccessListener { taskSnapshot -&gt;\n          taskSnapshot.metadata!!.reference!!.downloadUrl.addOnSuccessListener {\n            placemark.image = it.toString()\n            db.child(&quot;users&quot;).child(userId).child(&quot;placemarks&quot;).child(placemark.fbId).setValue(placemark)\n          }\n        }\n      }\n    }\n  }\n\n  fun fetchPlacemarks(placemarksReady: () -&gt; Unit) {\n    val valueEventListener = object : ValueEventListener {\n      override fun onCancelled(dataSnapshot: DatabaseError) {\n      }\n      override fun onDataChange(dataSnapshot: DataSnapshot) {\n        dataSnapshot!!.children.mapNotNullTo(placemarks) { it.getValue&lt;PlacemarkModel&gt;(PlacemarkModel::class.java) }\n        placemarksReady()\n      }\n    }\n    userId = FirebaseAuth.getInstance().currentUser!!.uid\n    db = FirebaseDatabase.getInstance().reference\n    st = FirebaseStorage.getInstance().reference\n    placemarks.clear()\n    db.child(&quot;users&quot;).child(userId).child(&quot;placemarks&quot;).addListenerForSingleValueEvent(valueEventListener)\n  }\n}</code></pre>\n<p>If you try this out now, and look at the Firebase Database console:</p>\n<p><img src=\"img/09.png\" alt=\"\"></p>\n<p>You should see a firebase storage url in the image field.</p>\n<p>This is a public url - so you should be able to copy this url and paste it into a browser and retrieve the image.</p>\n",
  "<p>We can augment PlacemarkFireStore with a new method:</p>\n",
  "<h1>Solution</h1>\n<p>Placemark application so far:</p>\n<ul>\n<li><a href=\"archives/archive.zip\">archive.zip</a></li>\n</ul>\n<h2>Exercise : delete</h2>\n<p>Currently when a placemark is deleted it is only removed from the database:</p>\n<pre><code>  suspend override fun delete(placemark: PlacemarkModel) {\n    db.child(&quot;users&quot;).child(userId).child(&quot;placemarks&quot;).child(placemark.fbId).removeValue()\n    placemarks.remove(placemark)\n  }</code></pre>\n<p>Change this to also remove the image (if any)</p>\n"
]
