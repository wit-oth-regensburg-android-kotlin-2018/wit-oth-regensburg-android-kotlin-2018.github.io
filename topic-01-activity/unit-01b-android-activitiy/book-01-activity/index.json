


  {
  
  
    "properties" : {},
  
  "type" : "lab",
  "title" : "Lab-01 Activities",
  "img" : "img/main.png",
  "videoid" : "none",
  "objectives" : "<p>Layout the PlacemarkActivity - supporting create/edit of placemarks</p>",
  "folder" : "book-01-activity",
  "link" : "index.html",
  "los": [
   ]
,
  "chapters" : [
  
    {
    "title": "# Objectives",
    "shortTitle": "Lab-01 Activities",
    "contentMd" : "# Objectives\n\nLayout the PlacemarkActivity - supporting create/edit of placemarks"
    },
  
    {
    "title": "# Style & String Resources",
    "shortTitle": "01",
    "contentMd" : "# Style & String Resources\n\nBefore proceeding to introduce new features into our app - we will augment some of the libraries:\n\n## build.gradle\n~~~\n...\n  implementation 'com.android.support:design:28.0.0'\n...\n~~~\n\nMake sure you include the above in the correct build.gradle file (there are two). Append it to the other `implementation` entries. When you make the above change you will be invited to `sync` the project again - do this now.\n\nThis is an additional library to support android components and layouts not included in the base SDK:\n\n- <https://developer.android.com/training/material/design-library.html>\n\nAlso, change our theme:\n\n## styles.xml\n\n~~~\n  <style name=\"AppTheme\" parent=\"Theme.AppCompat.Light.NoActionBar\">\n~~~\n\nThis replaces the 'DarkActionBar' theme in the generated style\n\nNow change the colours:\n\n## colours.xml\n\n~~~\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<resources>\n  <color name=\"colorPrimary\">#FFFFFF</color>\n  <color name=\"colorPrimaryDark\">#000000</color>\n  <color name=\"colorAccent\">#4c90af</color>\n</resources>\n~~~\n\nOr choose other colours as you please...\n\n\nWe also need a new string for the button, which we will introduce in the next step:\n\n## strings.xml\n\n~~~\n  <string name=\"button_addPlacemark\">Add Placemark</string>\n~~~"
    },
  
    {
    "title": "# Layouts",
    "shortTitle": "02",
    "contentMd" : "# Layouts\n\nWorking with `activity_placemark.xml`, progressively introduce the following versions - replacing each with the successive content below. Keep an eye on the `design` view as you progress to notice the changes\n\n![](img/12.png)\n\n## activity_placemark.xml Version A\n\nThis is what you currently have (select the `Text` view to reveal this):\n\n~~~\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<android.support.constraint.ConstraintLayout\n    xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    xmlns:app=\"http://schemas.android.com/apk/res-auto\"\n    xmlns:tools=\"http://schemas.android.com/tools\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\"\n    tools:context=\"org.wit.placemark.PlacemarkActivity\">\n\n  <TextView\n      android:layout_width=\"wrap_content\"\n      android:layout_height=\"wrap_content\"\n      android:text=\"Hello World!\"\n      app:layout_constraintBottom_toBottomOf=\"parent\"\n      app:layout_constraintLeft_toLeftOf=\"parent\"\n      app:layout_constraintRight_toRightOf=\"parent\"\n      app:layout_constraintTop_toTopOf=\"parent\"/>\n\n</android.support.constraint.ConstraintLayout>\n~~~\n\n## activity_placemark.xml Version B \n\nNow make tee following change  ... replace the current contents to include relative layout + toolbar\n\n~~~\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<android.support.constraint.ConstraintLayout\n    xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    xmlns:app=\"http://schemas.android.com/apk/res-auto\"\n    xmlns:tools=\"http://schemas.android.com/tools\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\"\n    tools:context=\"org.wit.placemark.PlacemarkActivity\">\n\n  <RelativeLayout\n      android:layout_width=\"match_parent\"\n      android:layout_height=\"wrap_content\">\n\n    <android.support.design.widget.AppBarLayout\n        android:id=\"@+id/appBarLayout\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"wrap_content\"\n        android:background=\"@color/colorAccent\"\n        android:fitsSystemWindows=\"true\"\n        app:elevation=\"0dip\"\n        app:theme=\"@style/ThemeOverlay.AppCompat.Dark.ActionBar\">\n\n      <android.support.v7.widget.Toolbar\n          android:id=\"@+id/toolbarAdd\"\n          android:layout_width=\"match_parent\"\n          android:layout_height=\"wrap_content\"\n          app:titleTextColor=\"@color/colorPrimary\"/>\n    </android.support.design.widget.AppBarLayout>\n\n  </RelativeLayout>\n</android.support.constraint.ConstraintLayout>\n~~~\n\nKeep an eye on the Design view as you make this change.\n\n## activity_placemark.xml Version C \n\n... augment with a scroll view containing a linear layout:\n\n~~~\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<android.support.constraint.ConstraintLayout\n    xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    xmlns:app=\"http://schemas.android.com/apk/res-auto\"\n    xmlns:tools=\"http://schemas.android.com/tools\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\"\n    tools:context=\"org.wit.placemark.PlacemarkActivity\">\n\n  <RelativeLayout\n      android:layout_width=\"match_parent\"\n      android:layout_height=\"wrap_content\">\n\n    <android.support.design.widget.AppBarLayout\n        android:id=\"@+id/appBarLayout\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"wrap_content\"\n        android:background=\"@color/colorAccent\"\n        android:fitsSystemWindows=\"true\"\n        app:elevation=\"0dip\"\n        app:theme=\"@style/ThemeOverlay.AppCompat.Dark.ActionBar\">\n\n      <android.support.v7.widget.Toolbar\n          android:id=\"@+id/toolbarAdd\"\n          android:layout_width=\"match_parent\"\n          android:layout_height=\"wrap_content\"\n          app:titleTextColor=\"@color/colorPrimary\"/>\n    </android.support.design.widget.AppBarLayout>\n\n    <ScrollView\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"match_parent\"\n        android:layout_below=\"@id/appBarLayout\"\n        android:fillViewport=\"true\">\n\n      <LinearLayout\n          android:layout_width=\"match_parent\"\n          android:layout_height=\"wrap_content\"\n          android:orientation=\"vertical\">\n\n      </LinearLayout>\n    </ScrollView>\n\n  </RelativeLayout>\n</android.support.constraint.ConstraintLayout>\n~~~\n\n## activity_placemark.xml Version D \n\n... scroll view linear layout contains a text edit field:\n\n~~~\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<android.support.constraint.ConstraintLayout\n    xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    xmlns:app=\"http://schemas.android.com/apk/res-auto\"\n    xmlns:tools=\"http://schemas.android.com/tools\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\"\n    tools:context=\"org.wit.placemark.PlacemarkActivity\">\n\n  <RelativeLayout\n      android:layout_width=\"match_parent\"\n      android:layout_height=\"wrap_content\">\n\n    <android.support.design.widget.AppBarLayout\n        android:id=\"@+id/appBarLayout\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"wrap_content\"\n        android:background=\"@color/colorAccent\"\n        android:fitsSystemWindows=\"true\"\n        app:elevation=\"0dip\"\n        app:theme=\"@style/ThemeOverlay.AppCompat.Dark.ActionBar\">\n\n      <android.support.v7.widget.Toolbar\n          android:id=\"@+id/toolbarAdd\"\n          android:layout_width=\"match_parent\"\n          android:layout_height=\"wrap_content\"\n          app:titleTextColor=\"@color/colorPrimary\"/>\n    </android.support.design.widget.AppBarLayout>\n\n    <ScrollView\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"match_parent\"\n        android:layout_below=\"@id/appBarLayout\"\n        android:fillViewport=\"true\">\n\n      <LinearLayout\n          android:layout_width=\"match_parent\"\n          android:layout_height=\"wrap_content\"\n          android:orientation=\"vertical\">\n\n        <android.support.design.widget.TextInputEditText\n            android:id=\"@+id/placemarkTitle\"\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"wrap_content\"\n            android:layout_margin=\"8dp\"\n            android:hint=\"@string/hint_placemarkTitle\"\n            android:inputType=\"text\"\n            android:maxLength=\"25\"\n            android:maxLines=\"1\"\n            android:padding=\"8dp\"\n            android:textColor=\"@color/colorPrimaryDark\"\n            android:textSize=\"14sp\"/>\n\n      </LinearLayout>\n    </ScrollView>\n\n  </RelativeLayout>\n</android.support.constraint.ConstraintLayout>\n~~~\n\nThe above needs a new string resource:\n\n## strings.xml\n\n~~~\n<resources>\n  <string name=\"app_name\">Placemark</string>\n  <string name=\"hint_placemarkTitle\">Placemark Title</string>\n</resources>\n~~~\n\n## activity_placemark.xml Version E \n\n... a new button in the layout\n\n~~~\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<android.support.constraint.ConstraintLayout\nxmlns:android=\"http://schemas.android.com/apk/res/android\"\nxmlns:app=\"http://schemas.android.com/apk/res-auto\"\nxmlns:tools=\"http://schemas.android.com/tools\"\nandroid:layout_width=\"match_parent\"\nandroid:layout_height=\"match_parent\"\ntools:context=\"org.wit.placemark.PlacemarkActivity\">\n\n<RelativeLayout\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"wrap_content\">\n\n  <android.support.design.widget.AppBarLayout\n      android:id=\"@+id/appBarLayout\"\n      android:layout_width=\"match_parent\"\n      android:layout_height=\"wrap_content\"\n      android:background=\"@color/colorAccent\"\n      android:fitsSystemWindows=\"true\"\n      app:elevation=\"0dip\"\n      app:theme=\"@style/ThemeOverlay.AppCompat.Dark.ActionBar\">\n\n    <android.support.v7.widget.Toolbar\n        android:id=\"@+id/toolbarAdd\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"wrap_content\"\n        app:titleTextColor=\"@color/colorPrimary\"/>\n  </android.support.design.widget.AppBarLayout>\n\n  <ScrollView\n      android:layout_width=\"match_parent\"\n      android:layout_height=\"match_parent\"\n      android:layout_below=\"@id/appBarLayout\"\n      android:fillViewport=\"true\">\n\n    <LinearLayout\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"wrap_content\"\n        android:orientation=\"vertical\">\n\n      <android.support.design.widget.TextInputEditText\n          android:id=\"@+id/placemarkTitle\"\n          android:layout_width=\"match_parent\"\n          android:layout_height=\"wrap_content\"\n          android:layout_margin=\"8dp\"\n          android:hint=\"@string/hint_placemarkTitle\"\n          android:inputType=\"text\"\n          android:maxLength=\"25\"\n          android:maxLines=\"1\"\n          android:padding=\"8dp\"\n          android:textColor=\"@color/colorPrimaryDark\"\n          android:textSize=\"14sp\"/>\n\n      <Button\n          android:id=\"@+id/btnAdd\"\n          android:layout_width=\"match_parent\"\n          android:layout_height=\"wrap_content\"\n          android:layout_margin=\"16dp\"\n          android:background=\"@color/colorAccent\"\n          android:paddingBottom=\"8dp\"\n          android:paddingTop=\"8dp\"\n          android:stateListAnimator=\"@null\"\n          android:text=\"@string/button_addPlacemark\"\n          android:textColor=\"@color/colorPrimary\"\n          android:textSize=\"16sp\"/>\n    </LinearLayout>\n  </ScrollView>\n\n</RelativeLayout>\n</android.support.constraint.ConstraintLayout>\n~~~\n\n\nBuilding layouts textually like this is a useful skill to acquire over time. Initially, you will probably be most comfortable with drawing the layouts using the design view.\n\nMake sure the application launches now - and the design view is presented in the running app\n\n![](img/09.png)\n\nThis short article on layouts is as useful primer:\n\n- <https://medium.com/google-developers/layouts-attributes-and-you-9e5a4b4fe32c."
    },
  
    {
    "title": "# Logging ",
    "shortTitle": "03",
    "contentMd" : "# Logging \n\nWe are going to be working exclusively in Kotlin - not Java. This affords considerable improvements, largely around conciseness and expressiveness of code.\n\n\n## Logging\n\nTo prepare for this, include these additional dependencies in our gradle.build:\n\n## gradle.build\n\n~~~\n...\n  implementation 'org.jetbrains.anko:anko:0.10.7'\n...  \n~~~\n\nThis library is documented here:\n\n- <https://github.com/Kotlin/anko>\n\nWe will be progressively introducing some of its features as we evolve the application.\n\nThe first feature is a simple way of logging:\n\nChange the class to include the 'AnkoLogger' feature:\n\n## PlacemarkActivity\n\n~~~\n..\nclass PlacemarkActivity : AppCompatActivity(), AnkoLogger {\n...\n~~~\n\nWhen you make this change, AnkoLogger will not be recognised - so you will need to import it. This can be triggered automatically (if you can figure this out). The correct import statement is:\n\n~~~\nimport org.jetbrains.anko.AnkoLogger\n~~~\n\n\nThen, in our onCreate() method, try it out:\n\n~~~\n...\n    info(\"Placemark Activity started..\")\n...    \n~~~\n\nAgain, this will require an import - which will be this:\n\n~~~\nimport org.jetbrains.anko.info\n~~~\n\nTry to figure out the key strokes required to generate this...\n\n# Logcat\n\nNow, make sure you can run the app and see the log messages in the 'Logcat' view in Studio:\n\n![](img/13.png)\n\nDo not proceed further until you can locate something like the above in Logcat. The logs are a bit noisy, and may contain what look like errors. However, buried in there should be your message.\n\nThis style of logging is discussed here:\n\n- <https://github.com/Kotlin/anko/wiki/Anko-Commons-%E2%80%93-Logging>\n"
    },
  
    {
    "title": "# Event Handling",
    "shortTitle": "04",
    "contentMd" : "# Event Handling\n\nNow include the following inside the onCreate function:\n\n~~~\n    btnAdd.setOnClickListener() {\n      info(\"add Button Pressed\")\n    }\n~~~\n\nIntroducing this will require additional imports - get used to selecting these as prompted by Studio. On this occasion you will be presented with a choice of imports:\n\n![](img/14.png)\n\nWe need to select the synthetic import.The complete class will look like this:\n\n~~~\npackage org.wit.placemark\n\nimport android.support.v7.app.AppCompatActivity\nimport android.os.Bundle\nimport kotlinx.android.synthetic.main.activity_placemark.*\nimport org.jetbrains.anko.AnkoLogger\nimport org.jetbrains.anko.info\n\nclass PlacemarkActivity : AppCompatActivity(), AnkoLogger {\n\n  override fun onCreate(savedInstanceState: Bundle?) {\n    super.onCreate(savedInstanceState)\n    setContentView(R.layout.activity_placemark)\n    info(\"Placemark Activity started..\")\n\n    btnAdd.setOnClickListener() {\n      info(\"add Button Pressed\")\n    }\n  }\n}\n~~~\n\nMake sure you can run the app and that you can see the 'add button pressed' log.\n\nRead this short blog post outlining how the above code differers from the traditional java implementation of same.\n\n- <https://antonioleiva.com/lambdas-kotlin-android/>\n\nTry this alternative implementation of the event handler:\n\n~~~\n    btnAdd.setOnClickListener() {\n      val placemarkTitle = placemarkTitle.text.toString()\n      if (placemarkTitle.isNotEmpty()) {\n        info(\"add Button Pressed: $placemarkTitle\")\n      }\n      else {\n        toast (\"Please Enter a title\")\n      }\n    }\n~~~\n\nTry it out and notice the difference - particularly if you press add without entering a title...\n\nIn the above we are using anko toasts:\n\n- <https://github.com/Kotlin/anko/wiki/Anko-Commons-%E2%80%93-Dialogs>\n\n"
    },
  
    {
    "title": "# Refactor",
    "shortTitle": "05",
    "contentMd" : "# Refactor\n\nRefactor the application structure such that ActivityPlacemark is in a new package called 'org.wit.placemarks.activities':\n\n![](img/10.png)\n\nYou should be able to do this from within the Studio Android perspective. You will be using the context menu to create the new package in the java folder:\n\n![](img/16.png)\n\nand then dragging/dropping the class into this new package. This will automatically trigger refactor step:\n\n![](img/17.png)\n\nOnce this is completed, a number of files will be automatically changed:\n\n- AndroidManifest.xml\n- PlacemarkActivity.kt\n- activity_placemark.xml\n\nSee if you can locate each of the changes...\n\n## Models\n\nIntroduce a new package called 'models' as shown here:\n\n![](img/11.png)\n\n... and bring in this new class:\n\n## PlacemarkModel\n\n~~~\npackage org.wit.placemark.models\n\ndata class PlacemarkModel(var title: String = \"\")\n~~~\n\nThis is an example of a Kotlin Data class:\n\n- <https://antonioleiva.com/data-classes-kotlin/>\n\nBriefly review the above - this is the official documentation:\n\n- <https://kotlinlang.org/docs/reference/data-classes.html>\n\nHere is a new version of PlacemarkActivity that makes use of this model:\n\n~~~\npackage wit.org.placemark.activities\n\nimport android.support.v7.app.AppCompatActivity\nimport android.os.Bundle\nimport kotlinx.android.synthetic.main.activity_placemark.*\nimport org.jetbrains.anko.AnkoLogger\nimport org.jetbrains.anko.info\nimport org.jetbrains.anko.toast\nimport org.wit.placemark.models.PlacemarkModel\nimport wit.org.placemark.R\n\nclass PlacemarkActivity : AppCompatActivity(), AnkoLogger {\n\n  var placemark = PlacemarkModel()\n\n  override fun onCreate(savedInstanceState: Bundle?) {\n    super.onCreate(savedInstanceState)\n    setContentView(R.layout.activity_placemark)\n\n    btnAdd.setOnClickListener() {\n      placemark.title = placemarkTitle.text.toString()\n      if (placemark.title.isNotEmpty()) {\n        info(\"add Button Pressed: $placemark\")\n      }\n      else {\n        toast (\"Please Enter a title\")\n      }\n    }\n  }\n}\n~~~\n\nRead it carefully - notice how we are creating a placemark as a class member:\n\n~~~\n  var placemark = PlacemarkModel()\n~~~\n\nand then using it in the event handler:\n\n~~~\n    btnAdd.setOnClickListener() {\n      placemark.title = placemarkTitle.text.toString()\n      if (placemark.title.isNotEmpty()) {\n        info(\"add Button Pressed: $placemark\")\n      }\n      else {\n        toast (\"Please Enter a title\")\n      }\n    }\n~~~\n\n"
    },
  
    {
    "title": "# Solution",
    "shortTitle": "Exercises",
    "contentMd" : "# Solution\n\nPlacemark application so far:\n\n- [placemark-01.zip](archives/placemark-01.zip)\n\n## Exercise 1:\n\nDownload, expand and open in Studio the sample solution above. Run it in the emulator.\n\n## Exercise 2:\n\nMake sure you can auto import the correct libraries when you introduce referenced. As an exercise, delete all of the imports from PlacemarkActivity:\n\n~~~\npackage org.wit.placemark.activities\n\n// deleted imports..\n\nclass PlacemarkActivity : AppCompatActivity(), AnkoLogger {\n\n  var placemark = PlacemarkModel()\n\n  override fun onCreate(savedInstanceState: Bundle?) {\n    super.onCreate(savedInstanceState)\n    setContentView(R.layout.activity_placemark)\n    info(\"Placemark Activity started..\")\n\n    btnAdd.setOnClickListener() {\n      placemark.title = placemarkTitle.text.toString()\n      if (placemark.title.isNotEmpty()) {\n        info(\"add Button Pressed: $placemarkTitle\")\n      }\n      else {\n        toast (\"Please Enter a title\")\n      }\n    }\n  }\n}\n~~~\n\nNOw reintroduce them one-by-one. Keep a close eye on any choices you make as you do this.\n\n## Exercise 3:\n\nCreate an ArrayList of Placemarks in PlacemarkActivity - and add each new placemark to this list.\n\nLog all placemarks when a new one is entered.\n\nHINT: Here is a simple placemark array declaration + creation:\n\n~~~\n  val placemarks = ArrayList<PlacemarkModel>()\n~~~  \n\nThis is the documentation on lists in general:\n\n- <https://kotlinlang.org/docs/reference/collections.html>\n\nGreater emphasis is placed here on mutability - which we can explore at a later stage.\n\n## Exercise 4:\n\nCreate new text field `description` + log when entered. This will require you to:\n\n- and a new field in the layout\n- add a new entry in the strings.xml file\n- expend the model\n- recover the field in the event handler and include in the model objects\n- log the new field\n"
    }
  
  ]
  }

