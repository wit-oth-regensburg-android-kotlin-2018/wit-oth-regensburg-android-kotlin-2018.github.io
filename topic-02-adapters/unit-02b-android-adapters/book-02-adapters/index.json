


  {
  
  
  "type" : "lab",
  "title" : "Lab-02 Adapters",
  "img" : "book-02-adapters/img/main.png",
  "videoid" : "none",
  "objectives" : "<p>Introduce new activity to display a list of placemarks. Support adding to this list.</p>",
    
      "properties" : {},
    
    
      "folder" : "book-02-adapters",
    
    
      "link" : "book-02-adapters/index.html",
    
  "los": [
     ]
,
  "chapters" : [
  
    {
    "title": "Objectives",
    "shortTitle": "Lab-02 Adapters",
    
     
      
     
    
    "contentMd" : "#Objectives\n\nIntroduce new activity to display a list of placemarks. Support adding to this list."
    
    
      
    
    
    },
  
    {
    "title": " Exercises Solutions",
    "shortTitle": "Exercise Solutions",
    
     
      
     
    
    "contentMd" : "# Exercises Solutions\n\n## Exercise 1:\n\nDownload, expand and open in Studio the sample solution above. Run it in the emulator.\n\n---\n\n## Exercise 2:\n\nMake sure you can auto import the correct libraries when you introduce referenced. As an exercise, delete all of the imports from PlacemarkActivity:\n\n---\n\n## Exercise 3\n\nCreate an ArrayList of Placemarks in PlacemarkActivity - and add each new activity to this list.\n\nLog all placemarks when a new one is entered.\n\nHINT: Here is a simple placemark array declaration + creation:\n\n~~~\n  val placemarks = ArrayList<PlacemarkModel>()\n~~~  \n\n## Solution\n\nEven if you solved the problem - try this version:\n\n~~~\nclass PlacemarkActivity : AppCompatActivity(), AnkoLogger {\n\n  var placemark = PlacemarkModel()\n  val placemarks = ArrayList<PlacemarkModel>()\n\n  override fun onCreate(savedInstanceState: Bundle?) {\n    super.onCreate(savedInstanceState)\n    setContentView(R.layout.activity_placemark)\n\n    btnAdd.setOnClickListener() {\n      placemark.title = placemarkTitle.text.toString()\n      if (placemark.title.isNotEmpty()) {\n        placemarks.add(placemark)\n        info(\"add Button Pressed: $placemarkTitle\")\n        placemarks.forEach { info(\"add Button Pressed: ${it.title}\")}\n      }\n      else {\n        toast (\"Please Enter a title\")\n      }\n    }\n  }\n}\n~~~\n\nLook carefully at this statement:\n\n~~~\n        placemarks.forEach { info(\"add Button Pressed: ${it.title}\")}\n~~~\n\nWhat is going on here? This is another example of a Kotlin lambda - this time as a parameter to a forEach function associated with a collection. Review these posts here to get a general feel for how to manipulate collections effectively:\n\n- <https://antonioleiva.com/functional-programming-android-kotlin-lambdas/>\n- <https://antonioleiva.com/collection-operations-kotlin/>\n\n(You may need to bookmark them and come back to them later)\n\nRun the app with this solution - do you notice anything strange? You should see the every time we add a new placemark, we seem to log out the same value for all entries added. This is because we are only ever creating a single placemark :\n\n~~~\n  var placemark = PlacemarkModel()\n~~~\n\nTry this version of the add method instead:\n\n~~~\n        placemarks.add(placemark.copy())\n~~~\n\nRun again now and check the logs - each entry should be added now as expected.\n\n\n----\n\n## Exercise 4:\n\nCreate new text field `description` + log when entered. This will require you to:\n\n- and a new field in the layout\n- add a new entry in the strings.xml file\n- expend the model\n- recover the field in the event handler and include in the model objects\n- log the new field\n\n\n## Solution\n\n## strings.xml\n\n~~~\n...\n  <string name=\"hint_placemarkDescription\">Description </string>\n...  \n~~~\n\n## activity_placemark.xml\n\n~~~\n...\n        <android.support.design.widget.TextInputEditText\n            android:id=\"@+id/description\"\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"wrap_content\"\n            android:layout_margin=\"8dp\"\n            android:hint=\"@string/hint_placemarkDescription\"\n            android:inputType=\"text\"\n            android:maxLength=\"25\"\n            android:maxLines=\"1\"\n            android:padding=\"8dp\"\n            android:textColor=\"@color/colorPrimaryDark\"\n            android:textSize=\"14sp\"/>\n...\n~~~\n\nMake sure to put this into the correct context.\n\n## PlacemarkModel.kt\n\n~~~\ndata class PlacemarkModel(var title: String = \"\",\n                          var description: String = \"\")\n\n~~~\n\n## PlacemarkActivity.kt\n\n~~~\n...\n      placemark.description = description.text.toString()\n...\n~~~\n\nAgain, make sure to put this into the correct context."
    
    
      
    
    
    },
  
    {
    "title": " MainApp",
    "shortTitle": "02",
    
     
      
     
    
    "contentMd" : "# MainApp\n\nCreate a new package called `org.wit.placemark.main`, and introduce this class:\n\n## MainApp\n\n~~~\npackage org.wit.placemark.main\n\nimport android.app.Application\nimport org.jetbrains.anko.AnkoLogger\nimport org.jetbrains.anko.info\n\nclass MainApp : Application(), AnkoLogger {\n\n  override fun onCreate() {\n    super.onCreate()\n    info(\"Placemark started\")\n  }\n}\n~~~\n\nThe package structure should look like this:\n\n![](img/01.png)\n\nIn addition, change the AndroidManifest to specifically reference this class:\n\n## AndroidManifest.xml\n\n~~~\n...\n  <application\n      android:name=\"org.wit.placemark.main.MainApp\"\n...\n~~~\n\nA single instance of this class will be created when our application will be launched. A reference to this application can be acquired in other activities as needed.\n\nRun the app now, and verify that the log message is being generated.\n\nWe can now put the placemarks in to this class:\n\n## MainApp\n\n~~~\nclass MainApp : Application(), AnkoLogger {\n\n  val placemarks = ArrayList<PlacemarkModel>()\n\n  override fun onCreate() {\n    super.onCreate()\n    info(\"Placemark started\")\n  }\n}\n~~~\n\n... and we can adjust PlacemarkActivity to use this list instead of the one we had created in PlacemarkActivity:\n\n~~~\nclass PlacemarkActivity : AppCompatActivity(), AnkoLogger {\n\n  var placemark = PlacemarkModel()\n  var app : MainApp? = null\n\n  override fun onCreate(savedInstanceState: Bundle?) {\n    super.onCreate(savedInstanceState)\n    setContentView(R.layout.activity_placemark)\n    app = application as MainApp\n\n    btnAdd.setOnClickListener() {\n      placemark.title = placemarkTitle.text.toString()\n      placemark.description = description.text.toString()\n      if (placemark.title.isNotEmpty()) {\n        app!!.placemarks.add(placemark.copy())\n        info(\"add Button Pressed: $placemarkTitle\")\n        app!!.placemarks.forEach { info(\"add Button Pressed: ${it}\")}\n      }\n      else {\n        toast (\"Please Enter a title\")\n      }\n    }\n  }\n}\n~~~\n\n##  Null Safety\n\nNotice the the reference to the MainApp object:\n\n~~~\n  var app : MainApp? = null\n~~~\n\nHow it is initialised:\n\n~~~\n    app = application as MainApp\n~~~\n\nand how it is used:\n\n~~~\n        app!!.placemarks.add(placemark.copy())\n        info(\"add Button Pressed: $placemarkTitle\")\n        app!!.placemarks.forEach { info(\"add Button Pressed: ${it}\")}\n~~~\n\nThere is liberal use of `?` and `!!` in this code. This is an example of Null Safety in action in Kotlin. A key feature of Kotlin - (see point 2 a few pages down):\n\n- <https://antonioleiva.com/kotlin-for-android-introduction/>\n\nA more detailed outline here \n\n- <https://kotlinlang.org/docs/reference/null-safety.html>\n\n## lateinit\n\nSometimes, we which to override null safety checks - particularly if we are certain that the reference will in fact be initialised. Replace MainApp now with this version:\n\n## PlacemarkActivity\n\n~~~\nclass PlacemarkActivity : AppCompatActivity(), AnkoLogger {\n\n  var placemark = PlacemarkModel()\n  lateinit var app : MainApp\n\n  override fun onCreate(savedInstanceState: Bundle?) {\n    super.onCreate(savedInstanceState)\n    setContentView(R.layout.activity_placemark)\n    app = application as MainApp\n\n    btnAdd.setOnClickListener() {\n      placemark.title = placemarkTitle.text.toString()\n      placemark.description = description.text.toString()\n      if (placemark.title.isNotEmpty()) {\n        app.placemarks.add(placemark.copy())\n        info(\"add Button Pressed: $placemarkTitle\")\n        app.placemarks.forEach { info(\"add Button Pressed: ${it}\")}\n      }\n      else {\n        toast (\"Please Enter a title\")\n      }\n    }\n  }\n}\n~~~\n\nThe changes an be seen in these lines:\n\n~~~\n  lateinit var app : MainApp\n  ...\n      app = application as MainApp\n      ... \n        app.placemarks.add(placemark.copy())\n        ...\n        app.placemarks.forEach { info(\"add Button Pressed: ${it}\")}\n        ...\n~~~\n\nThis is using the `lateint` qualifier. See this short discussion here:\n\n- <https://www.bignerdranch.com/blog/kotlin-when-to-use-lazy-or-lateinit/>\n\n\n\n\n"
    
    
      
    
    
    },
  
    {
    "title": " PlacemarkList",
    "shortTitle": "03",
    
     
      
     
    
    "contentMd" : "# PlacemarkList\n\nWe need a new Activity to present a list of placemarks - `PlacemarkListActivity`. Introducing a new view usually requires at lest the following:\n\n- a layout\n- a class\n- a reference to the class in AndroidManifest.xml\n\nHere are the these three artifacts:\n\n## activity_placemark_list.xml\n\n~~~\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<android.support.design.widget.CoordinatorLayout\n    xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    xmlns:app=\"http://schemas.android.com/apk/res-auto\"\n    xmlns:tools=\"http://schemas.android.com/tools\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\"\n    tools:context=\"org.wit.placemark.activities.PlacemarkListActivity\">\n\n  <android.support.design.widget.AppBarLayout\n      android:layout_width=\"match_parent\"\n      android:layout_height=\"wrap_content\"\n      android:background=\"@color/colorAccent\"\n      android:fitsSystemWindows=\"true\"\n      app:elevation=\"0dip\"\n      app:theme=\"@style/ThemeOverlay.AppCompat.Dark.ActionBar\">\n\n    <android.support.v7.widget.Toolbar\n        android:id=\"@+id/toolbarMain\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"wrap_content\"\n        app:titleTextColor=\"@color/colorPrimary\"/>\n  </android.support.design.widget.AppBarLayout>\n  \n</android.support.design.widget.CoordinatorLayout>\n~~~\n\n## PlacemarkListActivity\n\n~~~\npackage org.wit.placemark.activities\n\nimport android.support.v7.app.AppCompatActivity\nimport android.os.Bundle\nimport org.wit.placemark.R\nimport org.wit.placemark.main.MainApp\n\nclass PlacemarkListActivity : AppCompatActivity() {\n\n  lateinit var app: MainApp\n\n  override fun onCreate(savedInstanceState: Bundle?) {\n    super.onCreate(savedInstanceState)\n    setContentView(R.layout.activity_placemark_list)\n    app = application as MainApp\n  }\n}\n~~~\n\nNotice in the above, we are retrieving and storing a reference to the MainApp object (for future use).\n\n## AndroidManifest.xml\n\n\nThis is the current version:\n\n~~~\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<manifest xmlns:android=\"http://schemas.android.com/apk/res/android\"\n          package=\"org.wit.placemark\">\n\n  <application\n      android:name=\"org.wit.placemark.main.MainApp\"\n      android:allowBackup=\"true\"\n      android:icon=\"@mipmap/ic_launcher\"\n      android:label=\"@string/app_name\"\n      android:roundIcon=\"@mipmap/ic_launcher_round\"\n      android:supportsRtl=\"true\"\n      android:theme=\"@style/AppTheme\">\n    <activity android:name=\".activities.PlacemarkActivity\">\n      <intent-filter>\n        <action android:name=\"android.intent.action.MAIN\"/>\n\n        <category android:name=\"android.intent.category.LAUNCHER\"/>\n      </intent-filter>\n    </activity>\n  </application>\n\n</manifest>\n~~~\n\nThis is a revised version - \n\n~~~\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<manifest xmlns:android=\"http://schemas.android.com/apk/res/android\"\n          package=\"org.wit.placemark\">\n\n  <application\n      android:name=\".main.MainApp\"\n      android:allowBackup=\"true\"\n      android:icon=\"@mipmap/ic_launcher\"\n      android:label=\"@string/app_name\"\n      android:roundIcon=\"@mipmap/ic_launcher_round\"\n      android:supportsRtl=\"true\"\n      android:theme=\"@style/AppTheme\">\n    <activity android:name=\".activities.PlacemarkActivity\">\n    </activity>\n    <activity android:name=\".activities.PlacemarkListActivity\">\n      <intent-filter>\n        <action android:name=\"android.intent.action.MAIN\"/>\n        <category android:name=\"android.intent.category.LAUNCHER\"/>\n      </intent-filter>\n    </activity>\n  </application>\n\n</manifest>\n~~~\n\nLook carefully at the differences - we have included a new entry:\n\n\n~~~\n    <activity android:name=\".activities.PlacemarkListActivity\">\n       ...\n    </activity>\n~~~\n\nand also, this entry is marked as the main activity:\n\n~~~\n    ...\n      <intent-filter>\n        <action android:name=\"android.intent.action.MAIN\"/>\n        <category android:name=\"android.intent.category.LAUNCHER\"/>\n      </intent-filter>\n    ...\n~~~\n\n\nRun the app now - you should see the (blank) PlacemarkListActivity\n"
    
    
      
    
    
    },
  
    {
    "title": " Card + RecyclerView",
    "shortTitle": "04",
    
     
      
     
    
    "contentMd" : "# Card + RecyclerView\n\nTo display a list of Placemarks, we will make use of these components:\n\n- CardView\n- RecyclerView\n- RecyclerViewAdapter\n\nOrchestrating these three is now a familiar patterns in Android development. It is covered briefly in this article here:\n\n- <https://developer.android.com/training/material/lists-cards.html>\n\nThis is worth a quick read before proceeding.\n\n## CardView \n\nCardView itself is supported by a library - which must be included now:\n\n## build.gradle\n\n~~~\n...\n  implementation 'com.android.support:cardview-v7:28.0.0'\n...\n~~~\n\nHere is the cardview itself:\n\n## card_placemark.xml\n\n~~~\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<android.support.v7.widget.CardView\n    xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"wrap_content\"\n    android:layout_marginBottom=\"8dp\"\n    android:elevation=\"24dp\">\n\n  <RelativeLayout\n      android:layout_width=\"match_parent\"\n      android:layout_height=\"wrap_content\"\n      android:padding=\"16dp\">\n\n    <TextView\n        android:id=\"@+id/placemarkTitle\"\n        android:layout_width=\"wrap_content\"\n        android:layout_height=\"wrap_content\"\n        android:layout_alignParentTop=\"true\"\n        android:textSize=\"30sp\"/>\n\n    <TextView\n        android:id=\"@+id/description\"\n        android:layout_width=\"wrap_content\"\n        android:layout_height=\"wrap_content\"\n        android:layout_below=\"@id/placemarkTitle\"/>\n\n  </RelativeLayout>\n</android.support.v7.widget.CardView>\n~~~\n\nWhen you rebuild the project, you should be able to view the card in design view.\n\nWe can insert the cards into the activity_placemark_list layout - by introducing a RecyclerView widget like this:\n\n## activity_placemark_list.xml\n\n~~~\n...\n  <android.support.v7.widget.RecyclerView\n      android:id=\"@+id/recyclerView\"\n      android:layout_width=\"match_parent\"\n      android:layout_height=\"match_parent\"\n      android:scrollbars=\"vertical\"\n      app:layout_behavior=\"@string/appbar_scrolling_view_behavior\"/>\n...      \n~~~\n\nThis is to be inserted just before the closing tag.\n\n## RecyclerView + Adapter\n\nWith these resources in place - the PlacemarkListActivity can be reworked to include the RecyclerView + adapter:\n\n## PlacemarkListActivity\n\n~~~\npackage org.wit.placemark.activities\n\nimport android.support.v7.app.AppCompatActivity\nimport android.os.Bundle\nimport android.support.v7.widget.LinearLayoutManager\nimport android.support.v7.widget.RecyclerView\nimport android.view.LayoutInflater\nimport android.view.View\nimport android.view.ViewGroup\nimport kotlinx.android.synthetic.main.activity_placemark_list.*\nimport kotlinx.android.synthetic.main.card_placemark.view.*\nimport org.wit.placemark.R\nimport org.wit.placemark.main.MainApp\nimport org.wit.placemark.models.PlacemarkModel\n\nclass PlacemarkListActivity : AppCompatActivity() {\n\n  lateinit var app: MainApp\n\n  override fun onCreate(savedInstanceState: Bundle?) {\n    super.onCreate(savedInstanceState)\n    setContentView(R.layout.activity_placemark_list)\n    app = application as MainApp\n\n    val layoutManager = LinearLayoutManager(this)\n    recyclerView.layoutManager = layoutManager\n    recyclerView.adapter = PlacemarkAdapter(app.placemarks)\n  }\n}\n\nclass PlacemarkAdapter constructor(private var placemarks: List<PlacemarkModel>) : RecyclerView.Adapter<PlacemarkAdapter.MainHolder>() {\n\n  override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): MainHolder {\n    return MainHolder(LayoutInflater.from(parent?.context).inflate(R.layout.card_placemark, parent, false))\n  }\n\n  override fun onBindViewHolder(holder: MainHolder, position: Int) {\n    val placemark = placemarks[holder.adapterPosition]\n    holder.bind(placemark)\n  }\n\n  override fun getItemCount(): Int = placemarks.size\n\n  class MainHolder constructor(itemView: View) : RecyclerView.ViewHolder(itemView) {\n\n    fun bind(placemark: PlacemarkModel) {\n      itemView.placemarkTitle.text = placemark.title\n      itemView.description.text = placemark.description\n    }\n  }\n}\n~~~\n\nThe app should run now - but will still be blank. In MainApp, we can add some test placemarks to test out the Recycler machinery:\n\n\n## MainApp\n\n~~~\n...\n  override fun onCreate() {\n    super.onCreate()\n    info(\"Placemark started\")\n    placemarks.add(PlacemarkModel(\"One\", \"About one...\"))\n    placemarks.add(PlacemarkModel(\"Two\", \"About two...\"))\n    placemarks.add(PlacemarkModel(\"Three\", \"About three...\"))\n  }\n...\n~~~\n\n![](img/02.png)\n"
    
    
      
    
    
    },
  
    {
    "title": " Menu & Actionbar",
    "shortTitle": "05",
    
     
      
     
    
    "contentMd" : "# Menu & Actionbar\n\nIn order to trigger the creation of Placemarks, we need some menu/action mechanic on our home screen. This will be provided by supporing a button/menu an action bar along the top of the PlacemarkListActivity.\n\nFirst a new string resource:\n\n## stings.xml\n\n~~~\n  <string name=\"menu_addPlacemark\">Add</string>\n~~~\n\nThen a new menu resource:\n\n\n## menu_main.xml\n\n~~~\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<menu xmlns:android=\"http://schemas.android.com/apk/res/android\"\n      xmlns:app=\"http://schemas.android.com/apk/res-auto\">\n\n  <item\n      android:id=\"@+id/item_add\"\n      android:icon=\"@android:drawable/ic_menu_add\"\n      android:title=\"@string/menu_addPlacemark\"\n      app:showAsAction=\"always\"/>\n</menu>\n~~~\n\nThe above resource must be in its own folder:\n\n![](img/03.png)\n\nIn the PlacemarkListActivity onCreate method, we must enable the action bar (and give it a title):\n\n\n## PlacemarkListActivity\n\n~~~\n...\n    toolbarMain.title = title\n    setSupportActionBar(toolbarMain)\n...\n~~~\n\n... and then override the method to load the menu resource:\n\n~~~\n...\n  override fun onCreateOptionsMenu(menu: Menu?): Boolean {\n    menuInflater.inflate(R.menu.menu_main, menu)\n    return super.onCreateOptionsMenu(menu)\n  }\n...  \n~~~\n\n\nThis gives us a single button on the action bar:\n\n![](img/04.png)\n\n\nThis is the stock icon we are using is \n\n~~~\n      android:icon=\"@android:drawable/ic_menu_add\"\n~~~\n\nThis is drawn from this set:\n\n- <http://androiddrawables.com/Menu.html>\n\nThese can change with each release of Android - a comprehensive set of all drawable resources is available here:\n\n- <http://androiddrawables.com/>\n\n\n"
    
    
      
    
    
    },
  
    {
    "title": " Action Implementation",
    "shortTitle": "06",
    
     
      
     
    
    "contentMd" : "# Action Implementation\n\nReview this general introduction to App Bar/toolbars here:\n\n- <https://developer.android.com/training/appbar/setting-up.html>\n\n\nWe need to respond to the button press - triggering the launch of the PlacemarkActivity:\n\n## PlacemarkListActivity\n\n~~~\n  override fun onOptionsItemSelected(item: MenuItem?): Boolean {\n    when (item?.itemId) {\n      R.id.item_add -> startActivityForResult<PlacemarkActivity>(0)\n    }\n    return super.onOptionsItemSelected(item)\n  }\n~~~\n\nThis implements the menu event handler - and if the event it `item_add`, we start the PlacemarkActivity.\n\nWe are using the anko intent library:\n\n- <https://github.com/Kotlin/anko/wiki/Anko-Commons-%E2%80%93-Intents>\n\nIn this case we are starting an 'intent' inside our own application. The intent systems in Android is more general than this - and we can trigger intents serviced by other applications.\n\n- <https://developer.android.com/training/basics/intents/index.html>\n\nIndeed, we expose an intent to permit one of our activities to be launched.\n\nRun the app now - and add an activity:\n\n- what happens when add activity is pressed?\n- what happens when you press the `back` button from AddActivity?\n\nClearly we are not quite finished yet. In PlacemarkActivity, we need to explicitly finish() the activity - and set a result code:\n\n~~~\n...\n      if (placemark.title.isNotEmpty()) {\n        app.placemarks.add(placemark.copy())\n        info(\"add Button Pressed: $placemarkTitle\")\n        app.placemarks.forEach { info(\"add Button Pressed: ${it}\")}\n        setResult(AppCompatActivity.RESULT_OK)\n        finish()\n      }\n...        \n~~~\n\nThis should end the PlacemarkActivity - and update the List view.\n\nWe can remove the test placemarks from MainApp now:\n\n~~~\n  override fun onCreate() {\n    super.onCreate()\n    info(\"Placemark started\")\n    // placemarks.add(PlacemarkModel(\"One\", \"About one...\"))\n    // placemarks.add(PlacemarkModel(\"Two\", \"About two...\"))\n    // placemarks.add(PlacemarkModel(\"Three\", \"About three...\"))\n  }\n~~~"
    
    
      
    
    
    },
  
    {
    "title": "Solution",
    "shortTitle": "Exercises",
    
     
      
     
    
    "contentMd" : "#Solution\n\nPlacemark application so far:\n\n- [placemark-02.zip](archives/placemark-02.zip)\n\n\n## Exercise 1: Sample Solution\n\nMake sure you can download and run the sample solution (archive above)\n\n## Exercise 2: Cancel Button\n\nIncorporate new 'Cancel' action into `PlacemarkActivity`. This should return to PlacemarkListActivity without adding a new Placemark.\n\n![](img/18.png)\n\nFollow the steps 05 & 06 in this lab as a guide to doing this. Remember, you will be introducing the menu/action into PlacemarkActivity.\n\n## Exercise 3: Refactor PlacemarkAdapter to its own source file.\n\nThe PlacemarkAdapter class is currently in the same source file as the PlacemarkListActivity class. For clarity and ease of maintenance, move this into its own source file.\n\n"
    
    
      
    
    
    }
  
  ]
  }

