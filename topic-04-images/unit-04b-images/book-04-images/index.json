


  {
  
  
  "type" : "lab",
  "title" : "Lab-04 Images",
  "folder" : "book-04-images",
  
    "link" : "book-04-images/index.html",
  
  "img" : "book-04-images/img/main.png",
  "videoid" : "none",
  "objectives" : "<p>Allow an image to be selected from the phones photos, and stored with the placemark</p>",
  "properties" : {},
  "los": [  ]
,
  "chapters" : [
  
    {
    "title": "Objectives",
    "shortTitle": "Lab-04 Images",
    "content": [
     
      "<h1>Objectives</h1>" ,
     
      "<p>Allow an image to be selected from the phones photos, and stored with the placemark</p>" ,
     
      "" 
     
    ]
    },
  
    {
    "title": "# Exercise Solutions",
    "shortTitle": "Exercise Solutions",
    "content": [
     
      "<h2>Exercise Solutions</h2>" ,
     
      "<h2>Exercise 1: String Resources</h2>" ,
     
      "<p>In PlacemarkActivity - we have the following hard coded string:</p>" ,
     
      "<h2>PlacemarkActivity</h2>" ,
     
      "<pre><code>  toast(&quot;Please Enter a title&quot;)</code></pre>" ,
     
      "<p>These strings should be in the strings.xml resource file.</p>" ,
     
      "<h2>Exercise 1 Solution:</h2>" ,
     
      "<h2>strings.xml</h2>" ,
     
      "<pre><code>  &lt;string name=&quot;enter_placemark_title&quot;&gt; Please enter a Placemark Title &lt;/string&gt;</code></pre>" ,
     
      "<p>We can now rewrite the toast like this:</p>" ,
     
      "<pre><code>        toast(R.string.enter_placemark_title)</code></pre>" ,
     
      "<p>Notice that, in studio, you might see the code looking like this:</p>" ,
     
      "<p><img src='img/05.png' alt=''></p>" ,
     
      "<p>If you click on the string, then it reveals the id:</p>" ,
     
      "<p><img src='img/06.png' alt=''></p>" ,
     
      "<p>This is Studio trying to helpfully display the value of the string by interpolating it from the ID.</p>" ,
     
      "<h1>Exercise 2: Add Button Label</h1>" ,
     
      "<p>When you select a placemark - and the PlacemarkActivity is launched, the button label is &#39;Add Placemark&#39;. See if you can change this to &#39;Save Placemark&#39;. This is only to be changed if PlacemarkActivity is launched with a placemark passed to it. Make sure the <code>Save Placemark</code> string is externalized (in strings.xml)</p>" ,
     
      "<h2>Exercise 2 Solution</h2>" ,
     
      "<h2>strings.xml</h2>" ,
     
      "<pre><code>  &lt;string name=&quot;save_placemark&quot;&gt; Save Placemark &lt;/string&gt;</code></pre>" ,
     
      "<h2>PlacemarkActivity</h2>" ,
     
      "<pre><code>  if (intent.hasExtra(&quot;placemark_edit&quot;)) {" ,
     
      "      ..." ,
     
      "      btnAdd.setText(R.string.save_placemark)" ,
     
      "    }</code></pre>" ,
     
      "<h2>Exercise 3</h2>" ,
     
      "<p>When you select a placemark from PlacemarkListActivity - it presents the activity in the PlacemarkActivity. If you press &#39;Save Activity&#39; - a new activity is created and appended to the list.</p>" ,
     
      "<p>Change this behaviour such that the button should update the existing placemark with the newly entered values, not create a new one.  We have new features in PlacemarkStore to enable you to implement this (the update method). Essentially, you will need to call update OR create when handling the button event.</p>" ,
     
      "<p>If you complete the implementation, you will notice that even if you update a Placemark&#39;s contents, the new contents will not be displayed in PlacemarkList. However, if you consult the logs you may be able to see if the values are actually changed.  </p>" ,
     
      "<h2>Exercise 3 Solution</h2>" ,
     
      "<p>Introduce a local flag in onCreate(), always initialised to false:</p>" ,
     
      "<h2>PlacemarkActivity</h2>" ,
     
      "<pre><code>    var edit = false</code></pre>" ,
     
      "<p>Set the flag to true if we have a placemark passed:</p>" ,
     
      "<pre><code>    if (intent.hasExtra(&quot;placemark_edit&quot;)) {" ,
     
      "      edit = true" ,
     
      "      placemark = intent.extras.getParcelable&lt;PlacemarkModel&gt;(&quot;placemark_edit&quot;)" ,
     
      "      placemarkTitle.setText(placemark.title)" ,
     
      "      description.setText(placemark.description)" ,
     
      "      btnAdd.setText(R.string.save_placemark)" ,
     
      "    }</code></pre>" ,
     
      "<p>Then rework the add button event handler to follows:</p>" ,
     
      "<pre><code>    ..." ,
     
      "    btnAdd.setOnClickListener() {" ,
     
      "      placemark.title = placemarkTitle.text.toString()" ,
     
      "      placemark.description = description.text.toString()" ,
     
      "      if (placemark.title.isEmpty()) {" ,
     
      "        toast(R.string.enter_placemark_title)" ,
     
      "      } else {" ,
     
      "        if (edit) {" ,
     
      "          app.placemarks.update(placemark.copy())" ,
     
      "        } else {" ,
     
      "          app.placemarks.create(placemark.copy())" ,
     
      "        }" ,
     
      "      }" ,
     
      "      info(&quot;add Button Pressed: $placemarkTitle&quot;)" ,
     
      "      setResult(AppCompatActivity.RESULT_OK)" ,
     
      "      finish()" ,
     
      "    }" ,
     
      "    ...</code></pre>" ,
     
      "" 
     
    ]
    },
  
    {
    "title": "# Model Updates",
    "shortTitle": "02",
    "content": [
     
      "<h2>Model Updates</h2>" ,
     
      "<p>Currently we cam successfully add and edit placemarks. However, although the edit is updating the model, the model is not being refreshed on the view (it is still displaying the original placemark).</p>" ,
     
      "<p>Here is a simple addition to fix this - a new method in PlacemarkListActivity:</p>" ,
     
      "<h2>PlacemarkListActivity:</h2>" ,
     
      "<pre><code>  override fun onActivityResult(requestCode: Int, resultCode: Int, data: Intent?) {" ,
     
      "    recyclerView.adapter?.notifyDataSetChanged()" ,
     
      "    super.onActivityResult(requestCode, resultCode, data)" ,
     
      "  }</code></pre>" ,
     
      "<p>This is another lifecycle event - this time to be triggered when an activity we have started finishes. We instruct the recyclerView&#39;s adapter that the model has been updated. </p>" ,
     
      "<p>This should trigger an update and the correct values displayed in the list.</p>" ,
     
      "" 
     
    ]
    },
  
    {
    "title": " Add Image UI",
    "shortTitle": "03",
    "content": [
     
      "<h1>Add Image UI</h1>" ,
     
      "<p>We need a new button, which when pressed will allow the user to select an image.</p>" ,
     
      "<p>First the button string resource:</p>" ,
     
      "<h2>strings.xml</h2>" ,
     
      "<p>A new string for the button we will introduce:</p>" ,
     
      "<pre><code>  &lt;string name=&quot;button_addImage&quot;&gt; Add Image &lt;/string&gt;</code></pre>" ,
     
      "<p>Then the button itself + an imageView to display the image:</p>" ,
     
      "<h2>activity_placemark.xml</h2>" ,
     
      "<p>Two new controls:</p>" ,
     
      "<pre><code>        &lt;Button" ,
     
      "            android:id=&quot;@+id/chooseImage&quot;" ,
     
      "            android:layout_width=&quot;match_parent&quot;" ,
     
      "            android:layout_height=&quot;wrap_content&quot;" ,
     
      "            android:layout_margin=&quot;16dp&quot;" ,
     
      "            android:background=&quot;@color/colorAccent&quot;" ,
     
      "            android:paddingBottom=&quot;8dp&quot;" ,
     
      "            android:paddingTop=&quot;8dp&quot;" ,
     
      "            android:text=&quot;@string/button_addImage&quot;" ,
     
      "            android:textColor=&quot;@color/colorPrimary&quot;" ,
     
      "            android:textSize=&quot;16sp&quot;/&gt;" ,
     
      "" ,
     
      "        &lt;ImageView" ,
     
      "            android:id=&quot;@+id/placemarkImage&quot;" ,
     
      "            android:layout_width=&quot;match_parent&quot;" ,
     
      "            android:layout_height=&quot;wrap_content&quot;" ,
     
      "            app:srcCompat=&quot;@mipmap/ic_launcher&quot;/&gt;</code></pre>" ,
     
      "<p>We can add these before the <code>Add Placemark</code> button.  The view should look like this now:</p>" ,
     
      "<p><img src='img/01.png' alt=''></p>" ,
     
      "<p>Take some time to look at the <code>Design</code> view in studio:</p>" ,
     
      "<p><img src='img/02.png' alt=''></p>" ,
     
      "<p>Remove the controls again - and this time add them using the pallette - dragging and dropping the button + imageView widgits to achieve the same effect. You will notice, however, that we have a set of additional parameters included in our hand coded xml above.</p>" ,
     
      "<p>We can add an event handler for the new button:</p>" ,
     
      "<h2>PlacemarkActivity</h2>" ,
     
      "<pre><code>    chooseImage.setOnClickListener {" ,
     
      "      info (&quot;Select image&quot;)" ,
     
      "    }</code></pre>" ,
     
      "<p>Note that this is <code>inside</code> the onCreate method. When you click on the button check that the log message is produced.</p>" ,
     
      "" 
     
    ]
    },
  
    {
    "title": " Selecting Images",
    "shortTitle": "04",
    "content": [
     
      "<h1>Selecting Images</h1>" ,
     
      "<p>We will be supporting the selection of images from the phones gallery/photos. There are APIs in android for this purpose. Since Android 4.4, this has been centralised into the Storage Access Framework:</p>" ,
     
      "<ul>" ,
     
      "<li><a href='https://developer.android.com/guide/topics/providers/document-provider'>https://developer.android.com/guide/topics/providers/document-provider</a></li>" ,
     
      "</ul>" ,
     
      "<p>This is part of a larger <code>Content Provider</code> architecture - and serves a much broader remit than just accessing photos. We will try to simplify usage of the framework, by encapsulating it in a <code>helper</code> class</p>" ,
     
      "<p>Create a package called <code>org.wit.placemark.helpers</code>, and incorporate this file into the package:</p>" ,
     
      "<h2>ImageHelpers.kt</h2>" ,
     
      "<pre><code>package org.wit.placemark.helpers" ,
     
      "" ,
     
      "import android.app.Activity" ,
     
      "import android.content.Intent" ,
     
      "import org.wit.placemark.R" ,
     
      "" ,
     
      "fun showImagePicker(parent: Activity, id: Int) {" ,
     
      "  val intent = Intent()" ,
     
      "  intent.type = &quot;image/*&quot;" ,
     
      "  intent.action = Intent.ACTION_OPEN_DOCUMENT" ,
     
      "  intent.addCategory(Intent.CATEGORY_OPENABLE)" ,
     
      "  val chooser = Intent.createChooser(intent, R.string.select_placemark_image.toString())" ,
     
      "  parent.startActivityForResult(chooser, id)" ,
     
      "}</code></pre>" ,
     
      "<p>This function relies on this new string in strings.xml:</p>" ,
     
      "<h2>strings.xml</h2>" ,
     
      "<pre><code>&lt;string name=&quot;select_placemark_image&quot;&gt;Select placemark image&lt;/string&gt;</code></pre>" ,
     
      "<p>Notice that this is just a function, not a class or an object. Its purpose is to show an image picker dialog.</p>" ,
     
      "<p>We will now trigger this dialog. When starting an activity like this, we usually define a special code - which we will expect the new activity to send back when it is finished (otherwise we might get confused as to which activity has just finished).</p>" ,
     
      "<p>Here is the id we invent - make it a class member of PlacemakerActivity:</p>" ,
     
      "<h2>PlacemakerActivity</h2>" ,
     
      "<pre><code>  val IMAGE_REQUEST = 1</code></pre>" ,
     
      "<p>Then to trigger the picker:</p>" ,
     
      "<pre><code>    chooseImage.setOnClickListener {" ,
     
      "      showImagePicker(this, IMAGE_REQUEST)" ,
     
      "    }</code></pre>" ,
     
      "<p>If there are no images in your simulator, you might want to launch a browser, find some images and save them to your camera roll (long press in chrome will trigger this).</p>" ,
     
      "<p>Run the app now and verify that the picker does in fact appear, presenting a set of images for selection.</p>" ,
     
      "<p><img src='img/03.png' alt=''></p>" ,
     
      "<p>The images will not go anywhere as yet.</p>" ,
     
      "" 
     
    ]
    },
  
    {
    "title": "Displaying the Image",
    "shortTitle": "05",
    "content": [
     
      "<h1>Displaying the Image</h1>" ,
     
      "<p>We can now extend the PlacemarkModel to include the image reference as an additional field:</p>" ,
     
      "<h2>PlacemarkModel</h2>" ,
     
      "<pre><code>    var image: String = &quot;&quot;</code></pre>" ,
     
      "<p>In PlacemarkActivity we can recover the image name when the activity picker activity finishes. This is via a lifecycle event - triggered when an activity we may have started finishes:</p>" ,
     
      "<h2>PlacemarkActivity</h2>" ,
     
      "<pre><code>  override fun onActivityResult(requestCode: Int, resultCode: Int, data: Intent?) {" ,
     
      "    super.onActivityResult(requestCode, resultCode, data)" ,
     
      "    when (requestCode) {" ,
     
      "      IMAGE_REQUEST -&gt; {" ,
     
      "        if (data != null) {" ,
     
      "          placemark.image = data.getData().toString()" ,
     
      "        }" ,
     
      "      }" ,
     
      "    }" ,
     
      "  }</code></pre>" ,
     
      "<p>Notice how we are recovering the name only when the IMAGE_REQUEST is seen.</p>" ,
     
      "<p>See if you can run the application under debug - and place a breakpoint in where the image names is recovered above. See if you can inspect the name.</p>" ,
     
      "<p>In order to display the image, we introduce another helper :</p>" ,
     
      "<h2>Imagehelpers</h2>" ,
     
      "<pre><code>fun readImage(activity: Activity, resultCode: Int, data: Intent?): Bitmap? {" ,
     
      "  var bitmap: Bitmap? = null" ,
     
      "  if (resultCode == Activity.RESULT_OK &amp;&amp; data != null &amp;&amp; data.data != null) {" ,
     
      "    try {" ,
     
      "      bitmap = MediaStore.Images.Media.getBitmap(activity.contentResolver, data.data)" ,
     
      "    } catch (e: IOException) {" ,
     
      "      e.printStackTrace()" ,
     
      "    }" ,
     
      "  }" ,
     
      "  return bitmap" ,
     
      "}</code></pre>" ,
     
      "<p>Finally, we can use this method to display the image in the image view:</p>" ,
     
      "<h2>PlacemarkActivity</h2>" ,
     
      "<pre><code>      IMAGE_REQUEST -&gt; {" ,
     
      "        if (data != null) {" ,
     
      "          placemark.image = data.getData().toString()" ,
     
      "          placemarkImage.setImageBitmap(readImage(this, resultCode, data))" ,
     
      "        }</code></pre>" ,
     
      "<p>Run this now, and the selected image should be displayed in the view.</p>" ,
     
      "<p><img src='img/04.png' alt=''></p>" ,
     
      "" 
     
    ]
    },
  
    {
    "title": " Displaying the image in Edit mode",
    "shortTitle": "06",
    "content": [
     
      "<h1>Displaying the image in Edit mode</h1>" ,
     
      "<p>If you run run the app - we seem to be able to load the image when we create a new placemark, but not when we proceed to edit one.</p>" ,
     
      "<p>This is relatively straightforward. First we define an additional image helper for convenience:</p>" ,
     
      "<h2>ImageHelpers</h2>" ,
     
      "<pre><code>fun readImageFromPath(context: Context, path : String) : Bitmap? {" ,
     
      "  var bitmap : Bitmap? = null" ,
     
      "  val uri = Uri.parse(path)" ,
     
      "  if (uri != null) {" ,
     
      "    try {" ,
     
      "      val parcelFileDescriptor = context.getContentResolver().openFileDescriptor(uri, &quot;r&quot;)" ,
     
      "      val fileDescriptor = parcelFileDescriptor.getFileDescriptor()" ,
     
      "      bitmap = BitmapFactory.decodeFileDescriptor(fileDescriptor)" ,
     
      "      parcelFileDescriptor.close()" ,
     
      "    } catch (e: Exception) {" ,
     
      "    }" ,
     
      "  }" ,
     
      "  return bitmap" ,
     
      "}</code></pre>" ,
     
      "<p>We can now call this when in edit mode:</p>" ,
     
      "<h2>PlacemarkActivity</h2>" ,
     
      "<pre><code>    if (intent.hasExtra(&quot;placemark_edit&quot;)) {" ,
     
      "      //... as before" ,
     
      "      placemarkImage.setImageBitmap(readImageFromPath(this, placemark.image))" ,
     
      "    }</code></pre>" ,
     
      "<p>The image should now appear when we edit a placemark.</p>" ,
     
      "" 
     
    ]
    },
  
    {
    "title": "Solution",
    "shortTitle": "Exercises",
    "content": [
     
      "<h1>Solution</h1>" ,
     
      "<p>Placemark application so far:</p>" ,
     
      "<ul>" ,
     
      "<li><a href='archives/placemark-04.zip'>placemark-04.zip</a></li>" ,
     
      "</ul>" ,
     
      "<h2>Exercise 1</h2>" ,
     
      "<p>As a user, create a new placemark with a title + image. Now edit the placemark and change the title - and update the placemark. Notice that the title has changed in PlacemarkList. </p>" ,
     
      "<p>Edit the placemark and change the image - and update the placemark. Go back in to edit the placemark again - what image do you see?</p>" ,
     
      "<p>There is a bug here - the placemark activity is still showing the original image. See if you can debug and fix this bug.</p>" ,
     
      "<p>(HINT - look in the PlacemarkMemStore class)</p>" ,
     
      "<h2>Exercise 2</h2>" ,
     
      "<p>in PlacemarkActivity, if you are editing a placemark OR if the placemark already has an image, change the button label to be &#39;Change Image&#39; from <code>Add Image</code></p>" ,
     
      "<h2>Exercise 3</h2>" ,
     
      "<p>Introduce a new ImageView into the PlaceMarkCard view (displayed on PlacemarkListAcivity). Display the placemark images here (if an image has been loaded)</p>" ,
     
      "" 
     
    ]
    }
  
  ]
  }

