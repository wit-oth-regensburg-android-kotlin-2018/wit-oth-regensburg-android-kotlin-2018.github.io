


  {
  
  
    "properties" : {},
  
  "type" : "lab",
  "title" : "Lab-07 MapView",
  "img" : "img/main.png",
  "videoid" : "none",
  "objectives" : "<p>Display all placemarks on a map in a new activity</p>",
  "folder" : "book-0-map-view",
  "link" : "index.html",
  "los": [
   ]
,
  "chapters" : [
  
    {
    "title": "Objectives",
    "shortTitle": "Lab-07 MapView",
    "contentMd" : "#Objectives\n\nDisplay all placemarks on a map in a new activity"
    },
  
    {
    "title": " Exercises",
    "shortTitle": "01",
    "contentMd" : "# Exercises\n\n## Exercise 1\n\nChange back to using the PlacemarkMemStore instead of PlacemarkJSONStore. The only change you need to make should be in MainApp.\n\nTry some experiments to make sure the persistence is working as expected:\n\n- Using MemStore - create some placemarks and then kill the app. Relaunch, and verify that all placemarks are gone\n- Using JsonStore - try the same experiment. This time the placemarks should persist between application terminations.\n\n### Exercise 1 Solution\n\nTo switch between the database and memory stores - it should be just a matter of commenting out one of the placemarks declarations:\n\n### Using Json\n\n~~~\n   // placemarks = PlacemarkMemStore()\n    placemarks = PlacemarkJSONStore(applicationContext)\n~~~\n\n\n### Using memory:\n~~~\n    placemarks = PlacemarkMemStore()\n    // placemarks = PlacemarkJSONStore(applicationContext)\n~~~\n\n## Exercise 2: PlacemarkJSONStore update method\n\n\nComplete the implementation of the update method in the PlacemarkJSONStore class. Use the corresponding method in PlacemarkMemStore as a guide (and dont forget to save changes to the file).\n\n## Exercise 2 Solution:\n\n## PlacemarkJSONStore\n\n~~~\n  override fun update(placemark: PlacemarkModel) {\n    val placemarksList = findAll() as ArrayList<PlacemarkModel>\n    var foundPlacemark: PlacemarkModel? = placemarksList.find { p -> p.id == placemark.id }\n    if (foundPlacemark != null) {\n      foundPlacemark.title = placemark.title\n      foundPlacemark.description = placemark.description\n      foundPlacemark.image = placemark.image\n      foundPlacemark.lat = placemark.lat\n      foundPlacemark.lng = placemark.lng\n      foundPlacemark.zoom = placemark.zoom\n    }\n    serialize()\n  }\n~~~\n\n## Exercise 3\n\nCurrently we have no way of deleting placemarks. To support delete, you will need to extend the PlacemarkStore to support removal of placemarks, and then implement this in PlacemarkMemStore and PlacemarkJSONStore These are the implementations you will need:\n\n## PlacemarkStore\n\n~~~\n  fun delete(placemark: PlacemarkModel)\n~~~\n\nIntroduce this to PlacemarkStore now - and write implementations in `PlacemarkMemStore` and `PlacemarkJSONStore` classes :\n\n## PlacemarkMemStore\n\n~~~\n  override fun delete(placemark: PlacemarkModel) {\n    placemarks.remove(placemark)\n  }\n~~~\n\n## PlacemaekJSONStore\n\n\n~~~\n  override fun delete(placemark: PlacemarkModel) {\n    placemarks.remove(placemark)\n    serialize()\n  }\n~~~\n\nTo trigger the actual deletion introduce a new `delete` button alongside the `cancel` button on the PlacemarkActivity. Pressing this button should trigger the delete method.\n\n## Exercise 3 Solution\n\nMake the above change to the model classes. Then, introduce the delete string resource + button:\n\n##strings.xml\n\n~~~\n  <string name=\"menu_deletePlacemark\">Delete</string>\n~~~\n\n## menu_placemark.xml\n\n~~~\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<menu xmlns:android=\"http://schemas.android.com/apk/res/android\"\n  xmlns:app=\"http://schemas.android.com/apk/res-auto\">\n  \n  <item\n    android:id=\"@+id/item_delete\"\n    android:title=\"@string/menu_deletePlacemark\"\n    app:showAsAction=\"always\"/>\n  <item\n    android:id=\"@+id/item_cancel\"\n    android:title=\"@string/menu_cancelPlacemark\"\n    app:showAsAction=\"always\"/>\n</menu>\n~~~\n\n\nThe menu event handler can then be extended to trigger delete:\n\n## PlacemarkActivity\n\n~~~\n  override fun onOptionsItemSelected(item: MenuItem?): Boolean {\n    when (item?.itemId) {\n      R.id.item_delete -> {\n        app.placemarks.delete(placemark)\n        finish()\n      }\n      R.id.item_cancel -> {\n        finish()\n      }\n    }\n    return super.onOptionsItemSelected(item)\n  }\n~~~\n\nTry this now and verify that to works as expected.\n\nFinally - notice that the delete button is always visible - even if we are creating a new placemark (cancel is sufficient in this circumstance).\n\nTo make the appearance of the button conditional, make the following changes:\n\nFirst, make the delete option invisible by default:\n\n~~~\n  <item\n    android:visible=\"false\"\n    android:id=\"@+id/item_delete\"\n    android:title=\"@string/menu_deletePlacemark\"\n    app:showAsAction=\"always\"/>\n~~~\n\nMake the edit flag in PlacemarkActivity  a class member, not a local variable:\n\n## PlacemarkActivity\n\n~~~\nclass PlacemarkActivity : AppCompatActivity(), AnkoLogger {\n  //\n  var edit = false;\n\n\n  ...\n   override fun onCreate(savedInstanceState: Bundle?) {\n     ...\n        edit = true\n     ...\n\n~~~\n\nThen, we check this flag when inflating the menu, and display delete if we are in edit mode:\n\n~~~\n  override fun onCreateOptionsMenu(menu: Menu?): Boolean {\n    menuInflater.inflate(R.menu.menu_placemark, menu)\n    if (edit && menu != null) menu.getItem(0).setVisible(true)\n    return super.onCreateOptionsMenu(menu)\n  }\n~~~\n\nTry this now.\n"
    },
  
    {
    "title": " PlacemarkMapsActivity",
    "shortTitle": "02",
    "contentMd" : "# PlacemarkMapsActivity\n\nWe would like a new activity to show all placemarks in our collection. This should be activated by a new menu option.\n\n## Menu\n\nCreate a new menu option in the `main_menu.xml`:\n\n## res/menu/menu_main.xml\n\n~~~\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<menu xmlns:android=\"http://schemas.android.com/apk/res/android\"\n      xmlns:app=\"http://schemas.android.com/apk/res-auto\">\n\n  <item\n    android:id=\"@+id/item_add\"\n    android:icon=\"@android:drawable/ic_menu_add\"\n    android:title=\"@string/menu_addPlacemark\"\n    app:showAsAction=\"always\"/>\n\n  <item\n      android:id=\"@+id/item_map\"\n      android:icon=\"@android:drawable/ic_menu_mapmode\"\n      android:title=\"@string/menu_addPlacemark\"\n      app:showAsAction=\"always\"/>\n</menu>\n~~~\n\n\nWe have just duplicated the add item - and given it the id `item_map` and the icon `ic_menu_mapmode`. It should look like this in the layout editor:\n\n\n![](img/02.png)\n\n\n## PlacemarkMapsActivity\n\nNow use the wizard in Android to generate a new `Basic` activity call PlacemarkMapsActivity\n\n![](img/01.png)\n\nAccepting the defaults as shown above - your application will have the following class automatically generated by the wizard:\n\n~~~\npackage org.wit.placemark.activities\n\nimport android.os.Bundle\nimport android.support.design.widget.Snackbar\nimport android.support.v7.app.AppCompatActivity\nimport org.wit.placemark.R\n\nimport kotlinx.android.synthetic.main.activity_placemark_maps.*\n\nclass PlacemarkMapsActivity : AppCompatActivity() {\n\n  override fun onCreate(savedInstanceState: Bundle?) {\n    super.onCreate(savedInstanceState)\n    setContentView(R.layout.activity_placemark_maps)\n    setSupportActionBar(toolbar)\n\n    fab.setOnClickListener { view ->\n      Snackbar.make(view, \"Replace with your own action\", Snackbar.LENGTH_LONG)\n          .setAction(\"Action\", null).show()\n    }\n  }\n\n}\n~~~\n\n## res/layout/activity_placemark_maps.xml\n\n~~~\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<android.support.design.widget.CoordinatorLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n  xmlns:app=\"http://schemas.android.com/apk/res-auto\"\n  xmlns:tools=\"http://schemas.android.com/tools\"\n  android:layout_width=\"match_parent\"\n  android:layout_height=\"match_parent\"\n  tools:context=\"org.wit.placemark.activities.PlacemarkMapsActivity\">\n\n  <android.support.design.widget.AppBarLayout\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"wrap_content\"\n    android:theme=\"@style/AppTheme.AppBarOverlay\">\n\n    <android.support.v7.widget.Toolbar\n      android:id=\"@+id/toolbar\"\n      android:layout_width=\"match_parent\"\n      android:layout_height=\"?attr/actionBarSize\"\n      android:background=\"?attr/colorPrimary\"\n      app:popupTheme=\"@style/AppTheme.PopupOverlay\" />\n\n  </android.support.design.widget.AppBarLayout>\n\n  <include layout=\"@layout/content_placemark_maps\" />\n\n  <android.support.design.widget.FloatingActionButton\n    android:id=\"@+id/fab\"\n    android:layout_width=\"wrap_content\"\n    android:layout_height=\"wrap_content\"\n    android:layout_gravity=\"bottom|end\"\n    android:layout_margin=\"@dimen/fab_margin\"\n    app:srcCompat=\"@android:drawable/ic_dialog_email\" />\n\n</android.support.design.widget.CoordinatorLayout>\n~~~\n\n## res/layout/content_placemark_maps.xml\n\n~~~\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<android.support.constraint.ConstraintLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n  xmlns:app=\"http://schemas.android.com/apk/res-auto\"\n  xmlns:tools=\"http://schemas.android.com/tools\"\n  android:layout_width=\"match_parent\"\n  android:layout_height=\"match_parent\"\n  app:layout_behavior=\"@string/appbar_scrolling_view_behavior\"\n  tools:context=\"org.wit.placemark.activities.PlacemarkMapsActivity\"\n  tools:showIn=\"@layout/activity_placemark_maps\">\n\n</android.support.constraint.ConstraintLayout>\n~~~\n\n\n## res/values/strings\n\n~~~\n  <string name=\"title_activity_placemark_maps\">PlacemarkMapsActivity</string>\n~~~\n\n## AndroidManifest.xml\n\n~~~\n    <activity\n      android:name=\".activities.PlacemarkMapsActivity\"\n      android:label=\"@string/title_activity_placemark_maps\"\n      android:theme=\"@style/AppTheme\"></activity>\n~~~\n\n\n## res/values/styles.xml\n\n~~~\n  <style name=\"AppTheme.AppBarOverlay\" parent=\"ThemeOverlay.AppCompat.Dark.ActionBar\" />\n\n  <style name=\"AppTheme.PopupOverlay\" parent=\"ThemeOverlay.AppCompat.Light\" />\n~~~\n\n## res/values/dimens.xml\n\n~~~\n<resources>\n  <dimen name=\"fab_margin\">16dp</dimen>\n</resources>\n~~~\n\nInspect all of these additions - and make suer you have a good idea of the role and purpose of each.\n\n![](img/03.png)\n\nIn PlacemarkListActivity - we can extend the existing menu handler to now also launch this new activity:\n\n## PlacemarkListActivity\n\n~~~\n  override fun onOptionsItemSelected(item: MenuItem?): Boolean {\n    when (item?.itemId) {\n      R.id.item_add -> startActivityForResult<PlacemarkActivity>(200)\n      R.id.item_map -> startActivity<PlacemarkMapsActivity>()\n    }\n    return super.onOptionsItemSelected(item)\n  }\n~~~\n\nWhen the new menu is selected - you will get a (blank) new activity:\n\n![](img/04.png)\n"
    },
  
    {
    "title": " Simplify PlacemarkMapsActivity",
    "shortTitle": "03",
    "contentMd" : "# Simplify PlacemarkMapsActivity\n\nThe wizards in Studio often generate additional options and code that is not really appropriate depending on the app you are building.\n\nModify the layout to have an app bar similar to the other activities:\n\n## activity_placemark_maps.xml\n\n~~~\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<android.support.design.widget.CoordinatorLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n  xmlns:app=\"http://schemas.android.com/apk/res-auto\"\n  xmlns:tools=\"http://schemas.android.com/tools\"\n  android:layout_width=\"match_parent\"\n  android:layout_height=\"match_parent\"\n  tools:context=\"org.wit.placemark.activities.PlacemarkMapsActivity\">\n\n  <android.support.design.widget.AppBarLayout\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"wrap_content\"\n    android:background=\"@color/colorAccent\"\n    android:fitsSystemWindows=\"true\"\n    app:elevation=\"0dip\"\n    app:theme=\"@style/ThemeOverlay.AppCompat.Dark.ActionBar\">\n\n    <android.support.v7.widget.Toolbar\n      android:id=\"@+id/toolbarMaps\"\n      android:layout_width=\"match_parent\"\n      android:layout_height=\"wrap_content\"\n      app:titleTextColor=\"@color/colorPrimary\"/>\n\n  </android.support.design.widget.AppBarLayout>\n\n  <include layout=\"@layout/content_placemark_maps\" />\n\n</android.support.design.widget.CoordinatorLayout>\n~~~\n\nSimplify PlacemarkMapsActivity now to the following:\n\n## PlacemarkMapsActivity\n\n~~~\npackage org.wit.placemark.activities\n\nimport android.os.Bundle\nimport android.support.v7.app.AppCompatActivity\nimport org.wit.placemark.R\nimport kotlinx.android.synthetic.main.activity_placemark_maps.*\n\nclass PlacemarkMapsActivity : AppCompatActivity() {\n\n  override fun onCreate(savedInstanceState: Bundle?) {\n    super.onCreate(savedInstanceState)\n    setContentView(R.layout.activity_placemark_maps)\n    setSupportActionBar(toolbarMaps)\n  }\n}\n~~~\n\n\nFinally, change the generated title:\n\n## res/values/strings.xml\n\n~~~\n  <string name=\"title_activity_placemark_maps\">Map of All Placemarks </string>\n~~~\n\nOur new view will be a single map showing all of the placemarks we have set. We develop this in the next steps.\n"
    },
  
    {
    "title": " content_placemark_maps",
    "shortTitle": "04",
    "contentMd" : "# content_placemark_maps\n\nNotice that the wizard generated 2 layouts:\n\n- activity_placemark_maps.xml\n- content_placemark_maps\n\nThe latter is a blank canvas - based on the ConstraintLayout - which we will now use to design our view.\n\n![](img/05.png)\n\nFirst - drag and drop a `CardView` component onto the canvas:\n\n![](img/06.png)\n\nThen resize it something like this:\n\n![](img/07.png)\n\nThen anchor three of its sides to the edge of the view:\n\n![](img/08.png)\n\nYou do this by selecting each of the circle anchor points and then clicking on the appropriate edge.\n\nNow drag a MapView onto the canvas - and do the same anchoring procedure:\n\n![](img/09.png)\n\nBe sure to attach the bottom of the Map to the top of the Card:\n\n![](img/11.png)\n\nRun the app now - you should see something like this:\n\n![](img/10.png)\n\nThis is the layout at this stage:\n\n## res/content_placemark_maps.xml\n\n~~~\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<android.support.constraint.ConstraintLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n  xmlns:app=\"http://schemas.android.com/apk/res-auto\"\n  xmlns:tools=\"http://schemas.android.com/tools\"\n  android:layout_width=\"match_parent\"\n  android:layout_height=\"match_parent\"\n  app:layout_behavior=\"@string/appbar_scrolling_view_behavior\"\n  tools:context=\"org.wit.placemark.activities.PlacemarkMapsActivity\"\n  tools:showIn=\"@layout/activity_placemark_maps\">\n\n  <android.support.v7.widget.CardView\n    android:id=\"@+id/cardView\"\n    android:layout_width=\"353dp\"\n    android:layout_height=\"114dp\"\n    android:layout_marginBottom=\"16dp\"\n    android:layout_marginEnd=\"8dp\"\n    android:layout_marginStart=\"8dp\"\n    app:layout_constraintBottom_toBottomOf=\"parent\"\n    app:layout_constraintEnd_toEndOf=\"parent\"\n    app:layout_constraintHorizontal_bias=\"0.533\"\n    app:layout_constraintStart_toStartOf=\"parent\" />\n\n  <com.google.android.gms.maps.MapView\n    android:id=\"@+id/mapView\"\n    android:layout_width=\"352dp\"\n    android:layout_height=\"348dp\"\n    android:layout_marginBottom=\"8dp\"\n    android:layout_marginEnd=\"8dp\"\n    android:layout_marginStart=\"8dp\"\n    android:layout_marginTop=\"8dp\"\n    app:layout_constraintBottom_toTopOf=\"@+id/cardView\"\n    app:layout_constraintEnd_toEndOf=\"parent\"\n    app:layout_constraintStart_toStartOf=\"parent\"\n    app:layout_constraintTop_toTopOf=\"parent\" />\n</android.support.constraint.ConstraintLayout>\n~~~\n\n\nNow we can bring in a new attribute into the PlacemarkMapsActivity for the map object we just introduced:\n\n## PlacemarkMapsActivity\n~~~\npackage org.wit.placemark.activities\n\nimport android.os.Bundle\nimport android.support.v7.app.AppCompatActivity\nimport com.google.android.gms.maps.GoogleMap\nimport org.wit.placemark.R\nimport kotlinx.android.synthetic.main.activity_placemark_maps.*\nimport kotlinx.android.synthetic.main.content_placemark_maps.*\n\nclass PlacemarkMapsActivity : AppCompatActivity() {\n\n  lateinit var map: GoogleMap\n\n  override fun onCreate(savedInstanceState: Bundle?) {\n    super.onCreate(savedInstanceState)\n    setContentView(R.layout.activity_placemark_maps)\n    setSupportActionBar(toolbarMaps)\n    mapView.onCreate(savedInstanceState);\n  }\n}\n~~~\n\nNotice we are calling `mapView.onCreate`. This should now display the (empty) map:\n\n![](img/12.png)\n\nTo make the map actually render correctly - we need to rework the class so that we are passing the lifecycle events on to the map from PlacemarkMapsActivity:\n\n## PlacemarkMapsActivity\n~~~\npackage org.wit.placemark.activities\n\nimport android.os.Bundle\nimport android.support.v7.app.AppCompatActivity\nimport com.google.android.gms.maps.GoogleMap\nimport org.wit.placemark.R\nimport kotlinx.android.synthetic.main.activity_placemark_maps.*\nimport kotlinx.android.synthetic.main.content_placemark_maps.*\n\nclass PlacemarkMapsActivity : AppCompatActivity() {\n\n  lateinit var map: GoogleMap\n\n  override fun onCreate(savedInstanceState: Bundle?) {\n    super.onCreate(savedInstanceState)\n    setContentView(R.layout.activity_placemark_maps)\n    setSupportActionBar(toolbarMaps)\n    mapView.onCreate(savedInstanceState);\n  }\n\n  override fun onDestroy() {\n    super.onDestroy()\n    mapView.onDestroy()\n  }\n\n  override fun onLowMemory() {\n    super.onLowMemory()\n    mapView.onLowMemory()\n  }\n\n  override fun onPause() {\n    super.onPause()\n    mapView.onPause()\n  }\n\n  override fun onResume() {\n    super.onResume()\n    mapView.onResume()\n  }\n\n  override fun onSaveInstanceState(outState: Bundle?) {\n    super.onSaveInstanceState(outState)\n    mapView.onSaveInstanceState(outState)\n  }\n}\n~~~\n\n\nThe map should now display correctly:\n\n![](img/13.png)\n"
    },
  
    {
    "title": " Markers",
    "shortTitle": "05",
    "contentMd" : "# Markers\n\nCurrently our new view looks like this:\n\n![](img/14.png)\n\nWe can start to configure the map but introducing a new method to for this purpose:\n\n## PlacemarkMapsActivity\n~~~\n  fun configureMap() {\n    map.uiSettings.setZoomControlsEnabled(true)\n  }\n~~~\n\nTo call this method, we need to first initialize the map object - and then call configureMap()\n\n## PlacemarkMapsActivity\n~~~\n  override fun onCreate(savedInstanceState: Bundle?) {\n    super.onCreate(savedInstanceState)\n    setContentView(R.layout.activity_placemark_maps)\n    setSupportActionBar(toolbarMaps)\n    mapView.onCreate(savedInstanceState);\n    mapView.getMapAsync {\n      map = it\n      configureMap()\n    }\n  }\n~~~\n\nNote carefully the last three lines above - we are asking the MapView for the actual googleMap object (called `it` in this shorthand above). We then store `it` in the `map` property of the class.\n\nRunning the app - you should see new zoom controls:\n\n![](img/14.png)\n\nNow bring in a reference to the `MainApp` object into the class\n\n## PlacemarkMapsActivity\n~~~\nclass PlacemarkMapsActivity : AppCompatActivity() {\n  ...\n  lateinit var app: MainApp\n\n  override fun onCreate(savedInstanceState: Bundle?) {\n    ...\n    app = application as MainApp\n    ...\n  }\n~~~\n\nNotice it is also initialize above in the usual manner.\n\nNow rework condigureMap to iterate through all of the placemarks (fetched from the store) and add a marker at the location of each of them.\n\n~~~\n  fun configureMap() {\n    map.uiSettings.setZoomControlsEnabled(true)\n    app.placemarks.findAll().forEach {\n      val loc = LatLng(it.lat, it.lng)\n      val options = MarkerOptions().title(it.title).position(loc)\n      map.addMarker(options).tag = it.id\n    }\n  }\n~~~\n\nRun the app now and create a few placemarks in different locations. Then display this activity - we expect to see markers in the correct locations (we may need to zoom in to see them).\n\n\nIf we add the following to the loop:\n\n~~~\n        map.moveCamera(CameraUpdateFactory.newLatLngZoom(loc, it.zoom))\n~~~\n\nThen the app should zoom in to the last placemark:\n\n![](img/18.png)\n\nThis is the complete configureMap method at this stage:\n\n~~~\n  fun configureMap() {\n    map.uiSettings.setZoomControlsEnabled(true)\n    app.placemarks.findAll().forEach {\n      val loc = LatLng(it.lat, it.lng)\n      val options = MarkerOptions().title(it.title).position(loc)\n      map.addMarker(options).tag = it.id\n      map.moveCamera(CameraUpdateFactory.newLatLngZoom(loc, it.zoom))\n    }\n  }\n~~~\n\n\n  \n"
    },
  
    {
    "title": " CardView",
    "shortTitle": "06",
    "contentMd" : "# CardView\n\nWe already have a CardView in place. We now start to work inside it. First, install a ConstraintLayout inside the Card:\n\n![](img/19.png)\n\nThen, insert an ImageView:\n\n![](img/20.png)\n\nand 2 TextViews into the card:\n\n![](img/21.png)\n\nCall the TextViews `currentTitle` and `currentDescription` respectively.\n\nAnchor them as shown below:\n\n![](img/22.png)\n\nThis is the complete layout at this stage:\n\n~~~\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<android.support.constraint.ConstraintLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n  xmlns:app=\"http://schemas.android.com/apk/res-auto\"\n  xmlns:tools=\"http://schemas.android.com/tools\"\n  android:layout_width=\"match_parent\"\n  android:layout_height=\"match_parent\"\n  app:layout_behavior=\"@string/appbar_scrolling_view_behavior\"\n  tools:context=\"org.wit.placemark.activities.PlacemarkMapsActivity\"\n  tools:showIn=\"@layout/activity_placemark_maps\">\n\n  <android.support.v7.widget.CardView\n    android:id=\"@+id/cardView\"\n    android:layout_width=\"353dp\"\n    android:layout_height=\"114dp\"\n    android:layout_marginBottom=\"16dp\"\n    android:layout_marginEnd=\"8dp\"\n    android:layout_marginStart=\"8dp\"\n    app:layout_constraintBottom_toBottomOf=\"parent\"\n    app:layout_constraintEnd_toEndOf=\"parent\"\n    app:layout_constraintHorizontal_bias=\"0.533\"\n    app:layout_constraintStart_toStartOf=\"parent\" >\n\n    <android.support.constraint.ConstraintLayout\n      android:layout_width=\"match_parent\"\n      android:layout_height=\"match_parent\">\n\n      <TextView\n        android:id=\"@+id/currentTitle\"\n        android:layout_width=\"135dp\"\n        android:layout_height=\"25dp\"\n        android:layout_marginEnd=\"8dp\"\n        android:layout_marginStart=\"8dp\"\n        android:layout_marginTop=\"20dp\"\n        app:layout_constraintEnd_toStartOf=\"@+id/imageView\"\n        app:layout_constraintHorizontal_bias=\"0.35\"\n        app:layout_constraintStart_toStartOf=\"parent\"\n        app:layout_constraintTop_toTopOf=\"parent\" />\n\n      <TextView\n        android:id=\"@+id/currentDescription\"\n        android:layout_width=\"135dp\"\n        android:layout_height=\"25dp\"\n        android:layout_marginBottom=\"8dp\"\n        android:layout_marginEnd=\"8dp\"\n        android:layout_marginStart=\"8dp\"\n        android:layout_marginTop=\"8dp\"\n        app:layout_constraintBottom_toBottomOf=\"parent\"\n        app:layout_constraintEnd_toStartOf=\"@+id/imageView\"\n        app:layout_constraintHorizontal_bias=\"0.35\"\n        app:layout_constraintStart_toStartOf=\"parent\"\n        app:layout_constraintTop_toBottomOf=\"@+id/currentTitle\"\n        app:layout_constraintVertical_bias=\"0.425\" />\n\n      <ImageView\n        android:id=\"@+id/imageView\"\n        android:layout_width=\"134dp\"\n        android:layout_height=\"70dp\"\n        android:layout_marginBottom=\"8dp\"\n        android:layout_marginEnd=\"8dp\"\n        android:layout_marginTop=\"8dp\"\n        app:layout_constraintBottom_toBottomOf=\"parent\"\n        app:layout_constraintEnd_toEndOf=\"parent\"\n        app:layout_constraintTop_toTopOf=\"parent\"\n        app:srcCompat=\"@drawable/ic_launcher_background\" />\n    </android.support.constraint.ConstraintLayout>\n  </android.support.v7.widget.CardView>\n\n  <com.google.android.gms.maps.MapView\n    android:id=\"@+id/mapView\"\n    android:layout_width=\"352dp\"\n    android:layout_height=\"348dp\"\n    android:layout_marginBottom=\"8dp\"\n    android:layout_marginEnd=\"8dp\"\n    android:layout_marginStart=\"8dp\"\n    android:layout_marginTop=\"8dp\"\n    app:layout_constraintBottom_toTopOf=\"@+id/cardView\"\n    app:layout_constraintEnd_toEndOf=\"parent\"\n    app:layout_constraintStart_toStartOf=\"parent\"\n    app:layout_constraintTop_toTopOf=\"parent\" />\n</android.support.constraint.ConstraintLayout>\n~~~\n\n\n"
    },
  
    {
    "title": " Marker Listener",
    "shortTitle": "07",
    "contentMd" : "# Marker Listener\n\nBack in the class, implement the OnMarkerListener interface:\n\n## PlacemarkMapsActivity\n\n~~~\nclass PlacemarkMapsActivity : AppCompatActivity(), GoogleMap.OnMarkerClickListener {\n~~~\n\nThis is the implementation:\n\n~~~\n  override fun onMarkerClick(marker: Marker): Boolean {\n    currentTitle.text = marker.title\n    return false\n  }\n~~~\n\nIn order to receive events, you will need to register to listen for then. Here is a reworked configureMap to do this:\n\n~~~\n fun configureMap() {\n    ...\n    map.setOnMarkerClickListener(this)\n    ...\n  }\n~~~\n\nRun the app now - and if you click on a marker, it should display its title in the card:\n\n![](img/23.png)"
    },
  
    {
    "title": "# Solution",
    "shortTitle": "08.Exercises",
    "contentMd" : "## Solution\n\nPlacemark application so far:\n\n- [placemark-07.zip](archives/placemark-07.zip)\n\n## Exercise 1\n\nCurrently the PlacemarkActivity layout is hand coded - and is not using the ConstraintLayout. The screen shots below are taken from a refactor the view to make it fully based on the ConstraintLayout. All of this refactoring is carried out using the visual tools.\n\nSee if you can replicate in your project. Keep a close eye on the Component Tree as you work through it.\n\n![](img/24.png)\n\n![](img/25.png)\n\n![](img/26.png)\n\n![](img/27.png)\n\n![](img/28.png)\n\n\n## Exercise 2\n\nCurrently, when you select the marker in the PlacemarkMapsActivity, we display the title of the placemark only:\n\n~~~\n  override fun onMarkerClick(marker: Marker): Boolean {\n    currentTitle.text = marker.title\n    return false\n  }\n~~~\n\nHow would you go about showing the description + the image as well?\n\nHINT: What does this code do in the configureMap function:\n\n~~~\n      map.addMarker(options).tag = it.id\n~~~\n\nHow can we use this to realise this feature?"
    }
  
  ]
  }

