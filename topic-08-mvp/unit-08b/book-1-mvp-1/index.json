


  {
  
  
    "properties" : {},
  
  "type" : "lab",
  "title" : "Lab-08a MVP I",
  "img" : "img/main.jpg",
  "videoid" : "none",
  "objectives" : "<p>Refactor Activities to use the Model View Presenter pattern</p>",
  "folder" : "book-1-mvp-1",
  "link" : "index.html",
  "los": [
   ]
,
  "chapters" : [
  
    {
    "title": "#Objectives",
    "shortTitle": "Lab-08a MVP I",
    "contentMd" : "#Objectives\n\nRefactor Activities to use the Model View Presenter pattern\n"
    },
  
    {
    "title": "# Exercise Solution",
    "shortTitle": "01",
    "contentMd" : "# Exercise Solution\n\n## Exercise 1\n\nCurrently the PlacemarkActivity layout is hand coded - and is not using the ConstraintLayout. The screen shots below are taken from a refactor the view to make it fully based on the ConstraintLayout. All of this refactoring is carried out using the visual tools.\n\n## Solution\n\nYou could start by removing everything - and lust leaving the toolbar + a (new) ConstraintLayout\n\n![](img/01.png)\n\n\n## activity_placemark.xml\n\n~~~\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<android.support.constraint.ConstraintLayout\n    xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    xmlns:app=\"http://schemas.android.com/apk/res-auto\"\n    xmlns:tools=\"http://schemas.android.com/tools\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\"\n    tools:context=\"org.wit.placemark.activities.PlacemarkActivity\">\n\n  <RelativeLayout\n      android:layout_width=\"match_parent\"\n      android:layout_height=\"wrap_content\">\n\n    <android.support.design.widget.AppBarLayout\n      android:id=\"@+id/appBarLayout\"\n      android:layout_width=\"match_parent\"\n      android:layout_height=\"wrap_content\"\n      android:background=\"@color/colorAccent\"\n      android:fitsSystemWindows=\"true\"\n      app:elevation=\"0dip\"\n      app:theme=\"@style/ThemeOverlay.AppCompat.Dark.ActionBar\">\n\n      <android.support.v7.widget.Toolbar\n        android:id=\"@+id/toolbarAdd\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"wrap_content\"\n        app:titleTextColor=\"@color/colorPrimary\" />\n    </android.support.design.widget.AppBarLayout>\n\n    <android.support.constraint.ConstraintLayout\n      android:layout_width=\"match_parent\"\n      android:layout_height=\"match_parent\">\n\n    </android.support.constraint.ConstraintLayout>\n\n  </RelativeLayout>\n</android.support.constraint.ConstraintLayout>\n~~~\n\n\nThe recreate all of the controls:\n\n![](img/02.png)\n\n\n~~~\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<android.support.constraint.ConstraintLayout\n    xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    xmlns:app=\"http://schemas.android.com/apk/res-auto\"\n    xmlns:tools=\"http://schemas.android.com/tools\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\"\n    tools:context=\"org.wit.placemark.activities.PlacemarkActivity\">\n\n  <RelativeLayout\n      android:layout_width=\"match_parent\"\n      android:layout_height=\"wrap_content\">\n\n    <android.support.design.widget.AppBarLayout\n      android:id=\"@+id/appBarLayout\"\n      android:layout_width=\"match_parent\"\n      android:layout_height=\"wrap_content\"\n      android:background=\"@color/colorAccent\"\n      android:fitsSystemWindows=\"true\"\n      app:elevation=\"0dip\"\n      app:theme=\"@style/ThemeOverlay.AppCompat.Dark.ActionBar\">\n\n      <android.support.v7.widget.Toolbar\n        android:id=\"@+id/toolbarAdd\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"wrap_content\"\n        app:titleTextColor=\"@color/colorPrimary\" />\n    </android.support.design.widget.AppBarLayout>\n\n    <android.support.constraint.ConstraintLayout\n      android:layout_width=\"match_parent\"\n      android:layout_height=\"match_parent\">\n\n      <EditText\n        android:id=\"@+id/placemarkTitle\"\n        android:layout_width=\"wrap_content\"\n        android:layout_height=\"wrap_content\"\n        android:ems=\"10\"\n        android:hint=\"@string/hint_placemarkTitle\"\n        android:inputType=\"text\"\n        tools:layout_editor_absoluteX=\"48dp\"\n        tools:layout_editor_absoluteY=\"89dp\" />\n\n      <EditText\n        android:id=\"@+id/description\"\n        android:layout_width=\"wrap_content\"\n        android:layout_height=\"wrap_content\"\n        android:ems=\"10\"\n        android:hint=\"@string/hint_placemarkDescription\"\n        android:inputType=\"textPersonName\"\n        tools:layout_editor_absoluteX=\"55dp\"\n        tools:layout_editor_absoluteY=\"165dp\" />\n\n      <Button\n        android:id=\"@+id/chooseImage\"\n        android:layout_width=\"wrap_content\"\n        android:layout_height=\"wrap_content\"\n        android:text=\"@string/button_addImage\"\n        tools:layout_editor_absoluteX=\"270dp\"\n        tools:layout_editor_absoluteY=\"301dp\" />\n\n      <ImageView\n        android:id=\"@+id/placemarkImage\"\n        android:layout_width=\"wrap_content\"\n        android:layout_height=\"wrap_content\"\n        app:srcCompat=\"@drawable/ic_launcher_background\"\n        tools:layout_editor_absoluteX=\"260dp\"\n        tools:layout_editor_absoluteY=\"443dp\" />\n\n      <Button\n        android:id=\"@+id/placemarkLocation\"\n        android:layout_width=\"wrap_content\"\n        android:layout_height=\"wrap_content\"\n        android:text=\"@string/button_location\"\n        tools:layout_editor_absoluteX=\"64dp\"\n        tools:layout_editor_absoluteY=\"284dp\" />\n\n      <Button\n        android:id=\"@+id/btnAdd\"\n        android:layout_width=\"wrap_content\"\n        android:layout_height=\"wrap_content\"\n        android:text=\"@string/button_addPlacemark\"\n        tools:layout_editor_absoluteX=\"48dp\"\n        tools:layout_editor_absoluteY=\"417dp\" />\n    </android.support.constraint.ConstraintLayout>\n\n  </RelativeLayout>\n</android.support.constraint.ConstraintLayout>\n~~~\n\nAnd finally, wire them together to achieve this layout:\n\n![](img/03.png)\n\n~~~\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<android.support.constraint.ConstraintLayout\n  xmlns:android=\"http://schemas.android.com/apk/res/android\"\n  xmlns:app=\"http://schemas.android.com/apk/res-auto\"\n  xmlns:tools=\"http://schemas.android.com/tools\"\n  android:layout_width=\"match_parent\"\n  android:layout_height=\"match_parent\"\n  tools:context=\"org.wit.placemark.activities.PlacemarkActivity\">\n\n  <android.support.design.widget.AppBarLayout\n    android:id=\"@+id/appBarLayout\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"wrap_content\"\n    android:background=\"@color/colorAccent\"\n    android:fitsSystemWindows=\"true\"\n    app:elevation=\"0dip\"\n    app:theme=\"@style/ThemeOverlay.AppCompat.Dark.ActionBar\">\n\n    <android.support.v7.widget.Toolbar\n      android:id=\"@+id/toolbarAdd\"\n      android:layout_width=\"match_parent\"\n      android:layout_height=\"wrap_content\"\n      app:titleTextColor=\"@color/colorPrimary\" />\n\n  </android.support.design.widget.AppBarLayout>\n\n  <android.support.constraint.ConstraintLayout\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"600dp\"\n    android:layout_marginEnd=\"8dp\"\n    android:layout_marginStart=\"8dp\"\n    app:layout_constraintEnd_toEndOf=\"parent\"\n    app:layout_constraintStart_toStartOf=\"parent\"\n    app:layout_constraintTop_toTopOf=\"parent\">\n\n    <EditText\n      android:id=\"@+id/placemarkTitle\"\n      android:layout_width=\"365dp\"\n      android:layout_height=\"wrap_content\"\n      android:layout_marginEnd=\"8dp\"\n      android:layout_marginStart=\"8dp\"\n      android:layout_marginTop=\"64dp\"\n      android:ems=\"10\"\n      android:hint=\"@string/hint_placemarkTitle\"\n      android:inputType=\"text\"\n      app:layout_constraintEnd_toEndOf=\"parent\"\n      app:layout_constraintHorizontal_bias=\"0.503\"\n      app:layout_constraintStart_toStartOf=\"parent\"\n      app:layout_constraintTop_toTopOf=\"parent\" />\n\n    <EditText\n      android:id=\"@+id/description\"\n      android:layout_width=\"365dp\"\n      android:layout_height=\"wrap_content\"\n      android:layout_marginEnd=\"8dp\"\n      android:layout_marginStart=\"8dp\"\n      android:layout_marginTop=\"8dp\"\n      android:ems=\"10\"\n      android:hint=\"@string/hint_placemarkDescription\"\n      android:inputType=\"textPersonName\"\n      app:layout_constraintEnd_toEndOf=\"parent\"\n      app:layout_constraintStart_toStartOf=\"parent\"\n      app:layout_constraintTop_toBottomOf=\"@+id/placemarkTitle\" />\n\n    <Button\n      android:id=\"@+id/btnAdd\"\n      android:layout_width=\"365dp\"\n      android:layout_height=\"wrap_content\"\n      android:layout_marginEnd=\"8dp\"\n      android:layout_marginStart=\"8dp\"\n      android:text=\"@string/button_addPlacemark\"\n      app:layout_constraintEnd_toEndOf=\"parent\"\n      app:layout_constraintStart_toStartOf=\"parent\"\n      app:layout_constraintTop_toBottomOf=\"@+id/description\" />\n\n    <Button\n      android:id=\"@+id/chooseImage\"\n      android:layout_width=\"150dp\"\n      android:layout_height=\"wrap_content\"\n      android:layout_marginTop=\"8dp\"\n      android:text=\"@string/button_addImage\"\n      app:layout_constraintStart_toStartOf=\"@+id/btnAdd\"\n      app:layout_constraintTop_toBottomOf=\"@+id/btnAdd\" />\n\n    <Button\n      android:id=\"@+id/placemarkLocation\"\n      android:layout_width=\"150dp\"\n      android:layout_height=\"wrap_content\"\n      android:layout_marginEnd=\"8dp\"\n      android:layout_marginStart=\"8dp\"\n      android:layout_marginTop=\"8dp\"\n      android:text=\"@string/button_location\"\n      app:layout_constraintEnd_toEndOf=\"@+id/btnAdd\"\n      app:layout_constraintHorizontal_bias=\"1.0\"\n      app:layout_constraintStart_toEndOf=\"@+id/chooseImage\"\n      app:layout_constraintTop_toBottomOf=\"@+id/btnAdd\" />\n\n    <ImageView\n      android:id=\"@+id/placemarkImage\"\n      android:layout_width=\"0dp\"\n      android:layout_height=\"0dp\"\n      android:layout_marginStart=\"8dp\"\n      android:layout_marginTop=\"8dp\"\n      android:layout_marginEnd=\"8dp\"\n      android:layout_marginBottom=\"8dp\"\n      app:layout_constraintBottom_toBottomOf=\"parent\"\n      app:layout_constraintEnd_toEndOf=\"parent\"\n      app:layout_constraintHorizontal_bias=\"0.555\"\n      app:layout_constraintStart_toStartOf=\"parent\"\n      app:layout_constraintTop_toBottomOf=\"@+id/placemarkLocation\"\n      app:layout_constraintVertical_bias=\"0.173\"\n      app:srcCompat=\"@drawable/ic_launcher_background\" />\n\n  </android.support.constraint.ConstraintLayout>\n\n</android.support.constraint.ConstraintLayout>\n~~~\n\nTake a look at the imageView in the inspector -\n\n![](img/07.png)\n\n.. and note the 'match constraints' setting in the image guides.\n\nRunning the app - the screen should look like this:\n\n![](img/04.png)\n\n![](img/05.png)\n\n\n## content_placeark_maps.xml\n\nFinally, some small adjustments to the Map control in the PlacemarkMapsActivity:\n\n~~~\n  <com.google.android.gms.maps.MapView\n    android:id=\"@+id/mapView\"\n    android:layout_width=\"0dp\"\n    android:layout_height=\"0dp\"\n    android:layout_marginStart=\"8dp\"\n    android:layout_marginTop=\"8dp\"\n    android:layout_marginEnd=\"8dp\"\n    android:layout_marginBottom=\"8dp\"\n    app:layout_constraintBottom_toTopOf=\"@+id/cardView\"\n    app:layout_constraintEnd_toEndOf=\"parent\"\n    app:layout_constraintStart_toStartOf=\"parent\"\n    app:layout_constraintTop_toTopOf=\"parent\" />\n~~~\n\nThese adjustments are made via the attribute inspector again:\n\n![](img/08.png)"
    },
  
    {
    "title": "# Exercise Solution",
    "shortTitle": "02",
    "contentMd" : "# Exercise Solution\n\n## Exercise 2\n\nCurrently, when you select the marker in the PlacemarkMapsActivity, we display the title of the placemark only:\n\n~~~\n  override fun onMarkerClick(marker: Marker): Boolean {\n    currentTitle.text = marker.title\n    return false\n  }\n~~~\n\nHow would you go about showing the description + the image as well?\n\nHINT: What does this code do in the configureMap function:\n\n~~~\n      map.addMarker(options).tag = it.id\n~~~\n\nHow can we use this to realise this feature?\n\n## Solution\n\nCurrently we do not have any way retrieving a placemark by its ID. Having this ability is a useful utility method for a variety of scenarios.\n\nWe can start by introducing this into the PlacemarkStore and PlacemarkMemStore\n\n## PlacemarkStore\n\n~~~\n...\n  fun findById(id:Long) : PlacemarkModel?\n...  \n~~~\n\n\n## PlacemarkMemStore\n\n~~~\n...\n  override fun findById(id:Long) : PlacemarkModel? {\n    val foundPlacemark: PlacemarkModel? = placemarks.find { it.id == id }\n    return foundPlacemark\n  }\n...  \n~~~\n\n\nThis implements the facility only if we are using in-memory store. Now implement the same feature when we are using the PlacemarkJSONStore implementation:\n\n~~~\n  override fun findById(id:Long) : PlacemarkModel? {\n    val foundPlacemark: PlacemarkModel? = placemarks.find { it.id == id }\n    return foundPlacemark\n  }\n~~~\n\nIt is in fact the same.\n\nNow, back to PlacemarkMapsActivity. This line:\n\n~~~\n        map.addMarker(options).tag = it.id\n~~~\n\nThis is doing two things:\n\n- adding a marker to the map\n- \"Tagging\" the marker with the ID of the placemark\n\nThis means the each placemark will have the ID (from the datastore) of the placemark is is representing. We can now use this `tag` to update the card containing details of the selected placemark. This is the current version of the onMarkerCLick event hander:\n\n\n## PlacemarkMapsActivity\n\n~~~\n...\n  override fun onMarkerClick(marker: Marker): Boolean {\n    currentTitle.text = marker.title\n    return false\n  }\n...  \n~~~\n\nReplace it with the following:\n\n\n~~~\n...\n  override fun onMarkerClick(marker: Marker): Boolean {\n    val tag = marker.tag as Long\n    val placemark = app.placemarks.findById(tag)\n    currentTitle.text = placemark!!.title\n    currentDescription.text = placemark!!.description\n    imageView.setImageBitmap(readImageFromPath(this@PlacemarkMapsActivity, placemark.image))\n    return true\n  }\n...\n~~~  \n\nLook carefully at method - when a user clicks on a placemark in the map, we do the following:\n\n- retrieve the tag from the marker\n- look up the datatore for a placemark based in this ID\n- set the currentTitle, currentDescription & imageView to contains the details of the placemark\n\nTry this out now - it should display the placemark details on the panel as each marker is selected.\n\n![](img/06.png)\n\n"
    },
  
    {
    "title": "# Gradle Version",
    "shortTitle": "03",
    "contentMd" : "# Gradle Version\n\nBump the gradle revision the latest release:\n\n~~~\n    classpath 'com.android.tools.build:gradle:3.2.1'\n~~~\n\nThis will require a complete rebuild."
    },
  
    {
    "title": "# PlacemarkPresenter",
    "shortTitle": "04",
    "contentMd" : "# PlacemarkPresenter\n\nThis is our current PlacemarkActivity:\n\n## PlacemarkActivity\n\n~~~\npackage org.wit.placemark.activities\n\nimport android.content.Intent\nimport android.support.v7.app.AppCompatActivity\nimport android.os.Bundle\nimport android.view.Menu\nimport android.view.MenuItem\nimport kotlinx.android.synthetic.main.activity_placemark.*\nimport org.jetbrains.anko.AnkoLogger\nimport org.jetbrains.anko.info\nimport org.jetbrains.anko.intentFor\nimport org.jetbrains.anko.toast\nimport org.wit.placemark.R\nimport org.wit.placemark.helpers.readImage\nimport org.wit.placemark.helpers.readImageFromPath\nimport org.wit.placemark.helpers.showImagePicker\nimport org.wit.placemark.main.MainApp\nimport org.wit.placemark.models.Location\nimport org.wit.placemark.models.PlacemarkModel\n\nclass PlacemarkActivity : AppCompatActivity(), AnkoLogger {\n\n  var placemark = PlacemarkModel()\n  lateinit var app: MainApp\n  val IMAGE_REQUEST = 1\n  val LOCATION_REQUEST = 2\n  var edit = false;\n\n  override fun onCreate(savedInstanceState: Bundle?) {\n    super.onCreate(savedInstanceState)\n    setContentView(R.layout.activity_placemark)\n    toolbarAdd.title = title\n    setSupportActionBar(toolbarAdd)\n    info(\"Placemark Activity started..\")\n\n    app = application as MainApp\n\n    if (intent.hasExtra(\"placemark_edit\")) {\n      edit = true\n      placemark = intent.extras.getParcelable<PlacemarkModel>(\"placemark_edit\")\n      placemarkTitle.setText(placemark.title)\n      description.setText(placemark.description)\n      placemarkImage.setImageBitmap(readImageFromPath(this, placemark.image))\n      if (placemark.image != null) {\n        chooseImage.setText(R.string.change_placemark_image)\n      }\n      btnAdd.setText(R.string.save_placemark)\n    }\n\n    btnAdd.setOnClickListener() {\n      placemark.title = placemarkTitle.text.toString()\n      placemark.description = description.text.toString()\n      if (placemark.title.isEmpty()) {\n        toast(R.string.enter_placemark_title)\n      } else {\n        if (edit) {\n          app.placemarks.update(placemark.copy())\n        } else {\n\n          app.placemarks.create(placemark.copy())\n        }\n      }\n      info(\"add Button Pressed: $placemarkTitle\")\n      setResult(AppCompatActivity.RESULT_OK)\n      finish()\n    }\n\n    chooseImage.setOnClickListener {\n      showImagePicker(this, IMAGE_REQUEST)\n    }\n\n    placemarkLocation.setOnClickListener {\n      val location = Location(52.245696, -7.139102, 15f)\n      if (placemark.zoom != 0f) {\n        location.lat = placemark.lat\n        location.lng = placemark.lng\n        location.zoom = placemark.zoom\n      }\n      startActivityForResult(intentFor<MapsActivity>().putExtra(\"location\", location), LOCATION_REQUEST)\n    }\n  }\n\n  override fun onCreateOptionsMenu(menu: Menu?): Boolean {\n    menuInflater.inflate(R.menu.menu_placemark, menu)\n    if (edit && menu != null) menu.getItem(0).setVisible(true)\n    return super.onCreateOptionsMenu(menu)\n  }\n\n  override fun onOptionsItemSelected(item: MenuItem?): Boolean {\n    when (item?.itemId) {\n      R.id.item_delete -> {\n        app.placemarks.delete(placemark)\n        finish()\n      }\n      R.id.item_cancel -> {\n        finish()\n      }\n    }\n    return super.onOptionsItemSelected(item)\n  }\n\n  override fun onActivityResult(requestCode: Int, resultCode: Int, data: Intent?) {\n    super.onActivityResult(requestCode, resultCode, data)\n    when (requestCode) {\n      IMAGE_REQUEST -> {\n        if (data != null) {\n          placemark.image = data.getData().toString()\n          placemarkImage.setImageBitmap(readImage(this, resultCode, data))\n          chooseImage.setText(R.string.change_placemark_image)\n        }\n      }\n      LOCATION_REQUEST -> {\n        if (data != null) {\n          val location = data.extras.getParcelable<Location>(\"location\")\n          placemark.lat = location.lat\n          placemark.lng = location.lng\n          placemark.zoom = location.zoom\n        }\n      }\n    }\n  }\n}\n\n~~~\n\nOver 120 lines of code - which has multiple responsibilities. These include:\n\n- Initialising the the various controls\n- Establishing the event handlers\n- Overriding life cycle methods\n- Determining what actions to take in response to menu events\n- Keeping track of edit mode\n- Interacting with the model\n\nIf we were to add additional features into this activity, for instance location tracking, or a maps control, then the complexity of the class would continue to expand.\n\nThis is a well understood problem, with a range of possible solutions. Our chosen method is called Model View Presenter (MVP). This involves creating 2 classes from this single class, dividing the responsibilities as follows:\n\n- View: \n    - initialising the the various controls\n    - establishing the event handlers\n    - overriding life cycle methods\n\n- Presenter:\n    - determining what actions to take in response to menu events\n    - keeping track of edit mode  \n    - interacting with the model \n\nThis is a new class called PlacemarkPresenter:\n\n## PlacemarkPresenter:\n\n~~~\npackage org.wit.placemark.activities\n\nimport android.content.Intent\nimport org.jetbrains.anko.intentFor\nimport org.wit.placemark.helpers.showImagePicker\nimport org.wit.placemark.main.MainApp\nimport org.wit.placemark.models.Location\nimport org.wit.placemark.models.PlacemarkModel\n\nclass PlacemarkPresenter(val activity: PlacemarkActivity) {\n\n  val IMAGE_REQUEST = 1\n  val LOCATION_REQUEST = 2\n\n  var placemark = PlacemarkModel()\n  var location = Location(52.245696, -7.139102, 15f)\n  var app: MainApp\n  var edit = false;\n\n  init {\n    app = activity.application as MainApp\n    if (activity.intent.hasExtra(\"placemark_edit\")) {\n      edit = true\n      placemark = activity.intent.extras.getParcelable<PlacemarkModel>(\"placemark_edit\")\n      activity.showPlacemark(placemark)\n    }\n  }\n\n  fun doAddOrSave(title: String, description: String) {\n    placemark.title = title\n    placemark.description = description\n    if (edit) {\n      app.placemarks.update(placemark)\n    } else {\n      app.placemarks.create(placemark)\n    }\n    activity.finish()\n  }\n\n  fun doCancel() {\n    activity.finish()\n  }\n\n  fun doDelete() {\n    app.placemarks.delete(placemark)\n    activity.finish()\n  }\n\n  fun doSelectImage() {\n    showImagePicker(activity, IMAGE_REQUEST)\n  }\n\n  fun doSetLocation() {\n    if (placemark.zoom != 0f) {\n      location.lat = placemark.lat\n      location.lng = placemark.lng\n      location.zoom = placemark.zoom\n    }\n    activity.startActivityForResult(activity.intentFor<MapsActivity>().putExtra(\"location\", location), LOCATION_REQUEST)\n  }\n\n  fun doActivityResult(requestCode: Int, resultCode: Int, data: Intent) {\n    when (requestCode) {\n      IMAGE_REQUEST -> {\n        placemark.image = data.data.toString()\n        activity.showPlacemark(placemark)\n      }\n      LOCATION_REQUEST -> {\n        location = data.extras.getParcelable<Location>(\"location\")\n        placemark.lat = location.lat\n        placemark.lng = location.lng\n        placemark.zoom = location.zoom\n      }\n    }\n  }\n}\n~~~\n\nLook at it carefully. Notice that it receives a PlacemarkActivity in its constructor, and that it invokes this actvity in a number of methods. Try to get a sense of the responsibilities of this class.\n\nAnd this is a revised PlacemarkActivity, which creates the presenter and defers to it as outlined above:\n\n## PlacemarkActivity\n\n~~~\npackage org.wit.placemark.activities\n\nimport android.content.Intent\nimport android.support.v7.app.AppCompatActivity\nimport android.os.Bundle\nimport android.view.Menu\nimport android.view.MenuItem\nimport kotlinx.android.synthetic.main.activity_placemark.*\nimport org.jetbrains.anko.AnkoLogger\nimport org.jetbrains.anko.toast\nimport org.wit.placemark.R\nimport org.wit.placemark.helpers.readImageFromPath\nimport org.wit.placemark.models.PlacemarkModel\n\nclass PlacemarkActivity : AppCompatActivity(), AnkoLogger {\n\n  lateinit var presenter: PlacemarkPresenter\n  var placemark = PlacemarkModel()\n\n  override fun onCreate(savedInstanceState: Bundle?) {\n    super.onCreate(savedInstanceState)\n    setContentView(R.layout.activity_placemark)\n    toolbarAdd.title = title\n    setSupportActionBar(toolbarAdd)\n\n    presenter = PlacemarkPresenter(this)\n\n    btnAdd.setOnClickListener {\n      if (placemarkTitle.text.toString().isEmpty()) {\n        toast(R.string.enter_placemark_title)\n      } else {\n        presenter.doAddOrSave(placemarkTitle.text.toString(), description.text.toString())\n      }\n    }\n\n    chooseImage.setOnClickListener { presenter.doSelectImage() }\n\n    placemarkLocation.setOnClickListener { presenter.doSetLocation() }\n  }\n\n  fun showPlacemark(placemark: PlacemarkModel) {\n    placemarkTitle.setText(placemark.title)\n    description.setText(placemark.description)\n    placemarkImage.setImageBitmap(readImageFromPath(this, placemark.image))\n    if (placemark.image != null) {\n      chooseImage.setText(R.string.change_placemark_image)\n    }\n    btnAdd.setText(R.string.save_placemark)\n  }\n\n  override fun onCreateOptionsMenu(menu: Menu): Boolean {\n    menuInflater.inflate(R.menu.menu_placemark, menu)\n    if (presenter.edit) menu.getItem(0).setVisible(true)\n    return super.onCreateOptionsMenu(menu)\n  }\n\n  override fun onOptionsItemSelected(item: MenuItem?): Boolean {\n    when (item?.itemId) {\n      R.id.item_delete -> {\n        presenter.doDelete()\n      }\n      R.id.item_cancel -> {\n        presenter.doCancel()\n      }\n    }\n    return super.onOptionsItemSelected(item)\n  }\n\n  override fun onActivityResult(requestCode: Int, resultCode: Int, data: Intent?) {\n    super.onActivityResult(requestCode, resultCode, data)\n    if (data != null) {\n      presenter.doActivityResult(requestCode, resultCode, data)\n    }\n  }\n}\n\n\n~~~\n\nThis version is simpler that the original, is focus now is primarily on the user interface, with model update and tracking responsibilities delegated to the presenter.\n\nHave a close look at the responsibilities \n"
    },
  
    {
    "title": "# PlacemarkListPresenter",
    "shortTitle": "05",
    "contentMd" : "# PlacemarkListPresenter\n\nThis is our current PlacemarkListActivity:\n\n## PlacenarListActivity \n\n~~~\npackage org.wit.placemark.activities\n\nimport android.content.Intent\nimport android.support.v7.app.AppCompatActivity\nimport android.os.Bundle\nimport android.support.v7.widget.LinearLayoutManager\nimport android.view.*\nimport kotlinx.android.synthetic.main.activity_placemark_list.*\nimport org.jetbrains.anko.intentFor\nimport org.jetbrains.anko.startActivity\nimport org.jetbrains.anko.startActivityForResult\nimport org.wit.placemark.R\nimport org.wit.placemark.main.MainApp\nimport org.wit.placemark.models.PlacemarkModel\n\nclass PlacemarkListActivity : AppCompatActivity(), PlacemarkListener {\n\n  lateinit var app: MainApp\n\n  override fun onCreate(savedInstanceState: Bundle?) {\n    super.onCreate(savedInstanceState)\n    setContentView(R.layout.activity_placemark_list)\n    app = application as MainApp\n    toolbarMain.title = title\n    setSupportActionBar(toolbarMain)\n\n    val layoutManager = LinearLayoutManager(this)\n    recyclerView.layoutManager = layoutManager\n    recyclerView.adapter = PlacemarkAdapter(app.placemarks.findAll(), this)\n    loadPlacemarks()\n  }\n\n  private fun loadPlacemarks() {\n    showPlacemarks( app.placemarks.findAll())\n  }\n\n  fun showPlacemarks (placemarks: List<PlacemarkModel>) {\n    recyclerView.adapter = PlacemarkAdapter(placemarks, this)\n    recyclerView.adapter?.notifyDataSetChanged()\n  }\n\n  override fun onCreateOptionsMenu(menu: Menu?): Boolean {\n    menuInflater.inflate(R.menu.menu_main, menu)\n    return super.onCreateOptionsMenu(menu)\n  }\n\n  override fun onOptionsItemSelected(item: MenuItem?): Boolean {\n    when (item?.itemId) {\n      R.id.item_add -> startActivityForResult<PlacemarkActivity>(0)\n      R.id.item_map -> startActivity<PlacemarkMapsActivity>()\n    }\n    return super.onOptionsItemSelected(item)\n  }\n\n  override fun onPlacemarkClick(placemark: PlacemarkModel) {\n    startActivityForResult(intentFor<PlacemarkActivity>().putExtra(\"placemark_edit\", placemark), 0)\n  }\n\n  override fun onActivityResult(requestCode: Int, resultCode: Int, data: Intent?) {\n    loadPlacemarks()\n    super.onActivityResult(requestCode, resultCode, data)\n  }\n}\n~~~\n\nAnd this is a new PlacemarkListPresenter:\n\n## PlacemarkListPresenter\n\n~~~\npackage org.wit.placemark.activities\n\nimport org.jetbrains.anko.intentFor\nimport org.jetbrains.anko.startActivity\nimport org.jetbrains.anko.startActivityForResult\nimport org.wit.placemark.main.MainApp\nimport org.wit.placemark.models.PlacemarkModel\n\nclass PlacemarkListPresenter(val activity: PlacemarkListActivity) {\n\n  var app: MainApp\n\n  init {\n    app = activity.application as MainApp\n  }\n\n  fun getPlacemarks() = app.placemarks.findAll()\n\n  fun doAddPlacemark() {\n    activity.startActivityForResult<PlacemarkActivity>(0)\n  }\n\n  fun doEditPlacemark(placemark: PlacemarkModel) {\n    activity.startActivityForResult(activity.intentFor<PlacemarkActivity>().putExtra(\"placemark_edit\", placemark), 0)\n  }\n\n  fun doShowPlacemarksMap() {\n    activity.startActivity<PlacemarkMapsActivity>()\n  }\n}\n~~~\n\nThis is a revised PlacemarkListActivity to defer some responsibilities to the presenter:\n\n## PlacemarkListActivity\n\n~~~\npackage org.wit.placemark.activities\n\nimport android.content.Intent\nimport android.support.v7.app.AppCompatActivity\nimport android.os.Bundle\nimport android.support.v7.widget.LinearLayoutManager\nimport android.view.*\nimport kotlinx.android.synthetic.main.activity_placemark_list.*\nimport org.wit.placemark.R\nimport org.wit.placemark.models.PlacemarkModel\n\nclass PlacemarkListActivity : AppCompatActivity(), PlacemarkListener {\n\n  lateinit var presenter: PlacemarkListPresenter\n\n  override fun onCreate(savedInstanceState: Bundle?) {\n    super.onCreate(savedInstanceState)\n    setContentView(R.layout.activity_placemark_list)\n    toolbarMain.title = title\n    setSupportActionBar(toolbarMain)\n\n    presenter = PlacemarkListPresenter(this)\n    val layoutManager = LinearLayoutManager(this)\n    recyclerView.layoutManager = layoutManager\n    recyclerView.adapter = PlacemarkAdapter(presenter.getPlacemarks(), this)\n    recyclerView.adapter?.notifyDataSetChanged()\n  }\n\n  override fun onCreateOptionsMenu(menu: Menu?): Boolean {\n    menuInflater.inflate(R.menu.menu_main, menu)\n    return super.onCreateOptionsMenu(menu)\n  }\n\n  override fun onOptionsItemSelected(item: MenuItem?): Boolean {\n    when (item?.itemId) {\n      R.id.item_add -> presenter.doAddPlacemark()\n      R.id.item_map -> presenter.doShowPlacemarksMap()\n    }\n    return super.onOptionsItemSelected(item)\n  }\n\n  override fun onPlacemarkClick(placemark: PlacemarkModel) {\n    presenter.doEditPlacemark(placemark)\n  }\n\n  override fun onActivityResult(requestCode: Int, resultCode: Int, data: Intent?) {\n    recyclerView.adapter?.notifyDataSetChanged()\n    super.onActivityResult(requestCode, resultCode, data)\n  }\n}\n~~~\n\nThe PlacemarkAdapter is not effected by these changes\n"
    },
  
    {
    "title": "# MapsPresenter",
    "shortTitle": "06",
    "contentMd" : "# MapsPresenter\n\nThe Current Maps Activity:\n\n## MapsActivity\n\n~~~\npackage org.wit.placemark.activities\n\nimport android.app.Activity\nimport android.content.Intent\nimport android.support.v7.app.AppCompatActivity\nimport android.os.Bundle\n\nimport com.google.android.gms.maps.CameraUpdateFactory\nimport com.google.android.gms.maps.GoogleMap\nimport com.google.android.gms.maps.OnMapReadyCallback\nimport com.google.android.gms.maps.SupportMapFragment\nimport com.google.android.gms.maps.model.LatLng\nimport com.google.android.gms.maps.model.Marker\nimport com.google.android.gms.maps.model.MarkerOptions\nimport org.wit.placemark.R\nimport org.wit.placemark.models.Location\n\nclass MapsActivity : AppCompatActivity(), OnMapReadyCallback, GoogleMap.OnMarkerDragListener, GoogleMap.OnMarkerClickListener {\n\n  private lateinit var map: GoogleMap\n  var location = Location()\n\n  override fun onCreate(savedInstanceState: Bundle?) {\n    super.onCreate(savedInstanceState)\n    setContentView(R.layout.activity_maps)\n    location = intent.extras.getParcelable<Location>(\"location\")\n    val mapFragment = supportFragmentManager\n        .findFragmentById(R.id.map) as SupportMapFragment\n    mapFragment.getMapAsync(this)\n  }\n\n  override fun onMapReady(googleMap: GoogleMap) {\n    map = googleMap\n    map.setOnMarkerDragListener(this)\n    map.setOnMarkerClickListener(this)\n    val loc = LatLng(location.lat, location.lng)\n    val options = MarkerOptions()\n        .title(\"Placemark\")\n        .snippet(\"GPS : \" + loc.toString())\n        .draggable(true)\n        .position(loc)\n    map.addMarker(options)\n    map.moveCamera(CameraUpdateFactory.newLatLngZoom(loc, location.zoom))\n  }\n\n  override fun onMarkerDragStart(marker: Marker) {\n  }\n\n  override fun onMarkerDrag(marker: Marker) {\n  }\n\n  override fun onMarkerDragEnd(marker: Marker) {\n    location.lat = marker.position.latitude\n    location.lng = marker.position.longitude\n    location.zoom = map.cameraPosition.zoom\n  }\n\n  override fun onBackPressed() {\n    val resultIntent = Intent()\n    resultIntent.putExtra(\"location\", location)\n    setResult(Activity.RESULT_OK, resultIntent)\n    finish()\n    super.onBackPressed()\n  }\n\n  override fun onMarkerClick(marker: Marker): Boolean {\n    val loc = LatLng(location.lat, location.lng)\n    marker.setSnippet(\"GPS : \" + loc.toString())\n    return false\n  }\n}\n~~~\n\nA new Presenter class:\n\n## MapsPresenter\n\n~~~\npackage org.wit.placemark.activities\n\nimport android.app.Activity\nimport android.content.Intent\nimport com.google.android.gms.maps.CameraUpdateFactory\nimport com.google.android.gms.maps.GoogleMap\nimport com.google.android.gms.maps.model.LatLng\nimport com.google.android.gms.maps.model.Marker\nimport com.google.android.gms.maps.model.MarkerOptions\nimport org.wit.placemark.models.Location\n\nclass MapsPresenter(val activity: MapsActivity) {\n\n  var location = Location()\n\n  init {\n    location = activity.intent.extras.getParcelable<Location>(\"location\")\n  }\n\n  fun initMap(map: GoogleMap) {\n    val loc = LatLng(location.lat, location.lng)\n    val options = MarkerOptions()\n        .title(\"Placemark\")\n        .snippet(\"GPS : \" + loc.toString())\n        .draggable(true)\n        .position(loc)\n    map.addMarker(options)\n    map.moveCamera(CameraUpdateFactory.newLatLngZoom(loc, location.zoom))\n  }\n\n  fun doUpdateLocation(lat: Double, lng: Double, zoom: Float) {\n    location.lat = lat\n    location.lng = lng\n    location.zoom = zoom\n  }\n\n  fun doOnBackPressed() {\n    val resultIntent = Intent()\n    resultIntent.putExtra(\"location\", location)\n    activity.setResult(Activity.RESULT_OK, resultIntent)\n    activity.finish()\n  }\n\n  fun doUpdateMarker(marker: Marker) {\n    val loc = LatLng(location.lat, location.lng)\n    marker.setSnippet(\"GPS : \" + loc.toString())\n  }\n}\n~~~\n\nRevised MapsActivity to use this class:\n\n## MapsActivity \n\n~~~\npackage org.wit.placemark.activities\n\nimport android.support.v7.app.AppCompatActivity\nimport android.os.Bundle\nimport com.google.android.gms.maps.GoogleMap\nimport com.google.android.gms.maps.SupportMapFragment\nimport com.google.android.gms.maps.model.Marker\nimport org.wit.placemark.R\n\nclass MapsActivity : AppCompatActivity(), GoogleMap.OnMarkerDragListener, GoogleMap.OnMarkerClickListener {\n\n  lateinit var map: GoogleMap\n  lateinit var presenter: MapsPresenter\n\n  override fun onCreate(savedInstanceState: Bundle?) {\n    super.onCreate(savedInstanceState)\n    setContentView(R.layout.activity_maps)\n    val mapFragment = supportFragmentManager.findFragmentById(R.id.map) as SupportMapFragment\n    presenter = MapsPresenter(this)\n    mapFragment.getMapAsync {\n      map = it\n      map.setOnMarkerDragListener(this)\n      map.setOnMarkerClickListener(this)\n      presenter.initMap(map)\n    }\n  }\n\n  override fun onMarkerDragStart(marker: Marker) {}\n\n  override fun onMarkerDrag(marker: Marker) {}\n\n  override fun onMarkerDragEnd(marker: Marker) {\n    presenter.doUpdateLocation(marker.position.latitude, marker.position.longitude, map.cameraPosition.zoom)\n  }\n\n  override fun onBackPressed() {\n    presenter.doOnBackPressed()\n  }\n\n  override fun onMarkerClick(marker: Marker): Boolean {\n    presenter.doUpdateMarker(marker)\n    return false\n  }\n}\n~~~"
    },
  
    {
    "title": "## Rename & Refactor",
    "shortTitle": "07",
    "contentMd" : "## Rename & Refactor\n\nWe might take this opportunity to tidy up some of the names we have been using\n\n## 1: MapsActivity/MapsPresenter\n\nThis class has a poor name choice, as it conflicts somewhat with one of our other activities.\n\n- Rename MapsActivity to EditLoctionActivity\n- Rename MapsPresenter to EditLocationPresenter\n\nBe sure to use the refactoring tools to do this. In particular, make sure that the various resources to refer to the activity class are appropriately updated.\n\nA good way of doing this is to keep an eye on the git changes once the refactoring is complete.\n\nDo not proceed until you have completed a complete rebuild and also test of the application.\n\n## 2: Rename all `Activities` to `Views`\n\nAs we are now using the MVP pattern - it would be a good idea to adjust our class naming to reveal this.\n\n- Rename all XxxxActivity classes to ViewActivity\n- Rename all `activity` references in the Presenters to `view`\n\nSo we would have `PlacemarkView` and `PlacemarkPresenter`, with the `activity` property in PlacemarkPresenter renamed to `view`:\n\n~~~\n...\nclass PlacemarkPresenter(val view: PlacemarkView) {\n...\n~~~\n\nAgain, try to use the refactoring tools to do this.\n\n## Refactor package structure\n\nFinally, this is our current package structure:\n\n![](img/11.png)\n\nHave a look at this revised version:\n\n![](img/10.png)\n\nNotice that we have created a `views` packages - and then this contains a package for each view/presenter pair.\n\nSee if you can replicate this now in your project."
    },
  
    {
    "title": "# Exercises",
    "shortTitle": "Exercises",
    "contentMd" : "# Exercises\n\nPlacemark application so far:\n\n- [archive.zip](archives/archive.zip)\n\n## Exercise 1\n\nConvert the PlacemarkMaps Activity into PlacemarkMapView + PlacemarkPresenter. Perhaps aim for this final structure:\n\n![](img/12.png)\n\n## Exercise 2:\n\nSimplify the UX for PlacemarkActivity, removing the `Add Placemark` button, and including a `save` menu option to perform equivalent functionality:\n\n![](img/09.png)\n"
    }
  
  ]
  }

