


  {
  
  
  "type" : "lab",
  "title" : "Lab-08b MVP II",
  "img" : "book-2-mvp-2/img/main.jpg",
  "videoid" : "none",
  "objectives" : "<p>Complete the presenter pattern implementation, introducing BaseView &amp; BasePresenter classes</p>",
    
      "properties" : {},
    
    
      "folder" : "book-2-mvp-2",
    
    
      "link" : "book-2-mvp-2/index.html",
    
  "los": [
     ]
,
  "chapters" : [
  
    {
    "title": " Objectives",
    "shortTitle": "Lab-08b MVP II",
    
     
      
     
    
    "contentMd" : "# Objectives\n\nComplete the presenter pattern implementation, introducing BaseView & BasePresenter classes"
    
    
      
    
    
    },
  
    {
    "title": " Solutions",
    "shortTitle": "01",
    
     
      
     
    
    "contentMd" : "# Solutions\n\n## Exercise 1\n\nConvert the PlacemarkMaps Activity into PlacemarkMapView + PlacemarkPresenter. Perhaps aim for this final structure:\n\n![](img/01.png)\n\n## Exercise 1 Solution\n\n## PlacemarkMapPresenter \n\n~~~\npackage org.wit.placemark.views.map\n\nimport com.google.android.gms.maps.CameraUpdateFactory\nimport com.google.android.gms.maps.GoogleMap\nimport com.google.android.gms.maps.model.LatLng\nimport com.google.android.gms.maps.model.Marker\nimport com.google.android.gms.maps.model.MarkerOptions\nimport org.wit.placemark.main.MainApp\n\nclass PlacemarkMapPresenter(val view: PlacemarkMapView) {\n\n  var app: MainApp\n\n  init {\n    app = view.application as MainApp\n  }\n\n  fun doPopulateMap(map: GoogleMap) {\n    map.uiSettings.setZoomControlsEnabled(true)\n    map.setOnMarkerClickListener(view)\n    app.placemarks.findAll().forEach {\n      val loc = LatLng(it.lat, it.lng)\n      val options = MarkerOptions().title(it.title).position(loc)\n      map.addMarker(options).tag = it.id\n      map.moveCamera(CameraUpdateFactory.newLatLngZoom(loc, it.zoom))\n    }\n  }\n\n  fun doMarkerSelected(marker: Marker) {\n    val tag = marker.tag as Long\n    val placemark = app.placemarks.findById(tag)\n    if (placemark != null) view.showPlacemark(placemark)\n  }\n}\n~~~\n\n## PlacemarkMapView\n\n\n~~~\npackage org.wit.placemark.views.map\n\nimport android.os.Bundle\nimport android.support.v7.app.AppCompatActivity\nimport com.google.android.gms.maps.GoogleMap\nimport com.google.android.gms.maps.model.Marker\nimport org.wit.placemark.R\nimport kotlinx.android.synthetic.main.activity_placemark_map.*\nimport kotlinx.android.synthetic.main.content_placemark_map.*\nimport org.wit.placemark.helpers.readImageFromPath\nimport org.wit.placemark.models.PlacemarkModel\n\nclass PlacemarkMapView : AppCompatActivity(), GoogleMap.OnMarkerClickListener {\n\n  lateinit var presenter: PlacemarkMapPresenter\n\n  override fun onCreate(savedInstanceState: Bundle?) {\n    super.onCreate(savedInstanceState)\n    setContentView(R.layout.activity_placemark_map)\n    setSupportActionBar(toolbarMaps)\n    presenter = PlacemarkMapPresenter(this)\n\n    mapView.onCreate(savedInstanceState);\n    mapView.getMapAsync {\n      presenter.doPopulateMap(it)\n    }\n  }\n\n  fun showPlacemark(placemark: PlacemarkModel) {\n    currentTitle.text = placemark.title\n    currentDescription.text = placemark.description\n    imageView.setImageBitmap(readImageFromPath(this, placemark.image))\n  }\n\n  override fun onMarkerClick(marker: Marker): Boolean {\n    presenter.doMarkerSelected(marker)\n    return true\n  }\n\n  override fun onDestroy() {\n    super.onDestroy()\n    mapView.onDestroy()\n  }\n\n  override fun onLowMemory() {\n    super.onLowMemory()\n    mapView.onLowMemory()\n  }\n\n  override fun onPause() {\n    super.onPause()\n    mapView.onPause()\n  }\n\n  override fun onResume() {\n    super.onResume()\n    mapView.onResume()\n  }\n\n  override fun onSaveInstanceState(outState: Bundle?) {\n    super.onSaveInstanceState(outState)\n    mapView.onSaveInstanceState(outState)\n  }\n}\n~~~\n\n\n## AndroidManifest.xml\n\n~~~\n    <activity\n      android:name=\".views.map.PlacemarkMapView\"\n      android:label=\"@string/title_activity_placemark_maps\"\n      android:theme=\"@style/AppTheme\"></activity>\n~~~\n\n## activity_placemark_map.xml\n\n~~~\n<android.support.design.widget.CoordinatorLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n  xmlns:app=\"http://schemas.android.com/apk/res-auto\"\n  xmlns:tools=\"http://schemas.android.com/tools\"\n  android:layout_width=\"match_parent\"\n  android:layout_height=\"match_parent\"\n  tools:context=\"org.wit.placemark.views.map.PlacemarkMapView\">\n\n  ...\n  <include layout=\"@layout/content_placemark_map\" />\n  ...\n~~~\n\n## content_placemark_map.xml\n\n~~~\n<android.support.constraint.ConstraintLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n  xmlns:app=\"http://schemas.android.com/apk/res-auto\"\n  xmlns:tools=\"http://schemas.android.com/tools\"\n  android:layout_width=\"match_parent\"\n  android:layout_height=\"match_parent\"\n  app:layout_behavior=\"@string/appbar_scrolling_view_behavior\"\n  tools:context=\"org.wit.placemark.views.map.PlacemarkMapView\"\n  tools:showIn=\"@layout/activity_placemark_map\">\n...\n~~~\n\n\n\n"
    
    
      
    
    
    },
  
    {
    "title": " Solutions",
    "shortTitle": "02",
    
     
      
     
    
    "contentMd" : "# Solutions\n\n## Exercise 2:\n\nSimplify the UX for PlacemarkActivity, removing the `Add Placemark` button, and including a `save` menu option to perform equivalent functionality:\n\n![](img/02.png)\n\n## Solution\n\n## strings.xml\n\n~~~\n  <string name=\"menu_savePlacemark\">Save</string>\n~~~\n\n## menu_placemark.xml\n\n~~~\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<menu xmlns:android=\"http://schemas.android.com/apk/res/android\"\n  xmlns:app=\"http://schemas.android.com/apk/res-auto\">\n\n  <item\n    android:id=\"@+id/item_save\"\n    android:title=\"@string/menu_savePlacemark\"\n    app:showAsAction=\"always\"/>\n  <item\n    android:id=\"@+id/item_delete\"\n    android:title=\"@string/menu_deletePlacemark\"\n    app:showAsAction=\"always\"/>\n</menu>\n~~~\n\n## activity_placemark\n\n~~~\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<android.support.constraint.ConstraintLayout\n  xmlns:android=\"http://schemas.android.com/apk/res/android\"\n  xmlns:app=\"http://schemas.android.com/apk/res-auto\"\n  xmlns:tools=\"http://schemas.android.com/tools\"\n  android:layout_width=\"match_parent\"\n  android:layout_height=\"match_parent\"\n  tools:context=\"org.wit.placemark.views.placemark.PlacemarkView\">\n\n  <android.support.design.widget.AppBarLayout\n    android:id=\"@+id/appBarLayout\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"wrap_content\"\n    android:background=\"@color/colorAccent\"\n    android:fitsSystemWindows=\"true\"\n    app:elevation=\"0dip\"\n    app:theme=\"@style/ThemeOverlay.AppCompat.Dark.ActionBar\">\n\n    <android.support.v7.widget.Toolbar\n      android:id=\"@+id/toolbarAdd\"\n      android:layout_width=\"match_parent\"\n      android:layout_height=\"wrap_content\"\n      app:titleTextColor=\"@color/colorPrimary\" />\n\n  </android.support.design.widget.AppBarLayout>\n\n  <android.support.constraint.ConstraintLayout\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"600dp\"\n    android:layout_marginEnd=\"8dp\"\n    android:layout_marginStart=\"8dp\"\n    app:layout_constraintEnd_toEndOf=\"parent\"\n    app:layout_constraintStart_toStartOf=\"parent\"\n    app:layout_constraintTop_toTopOf=\"parent\">\n\n    <EditText\n      android:id=\"@+id/placemarkTitle\"\n      android:layout_width=\"365dp\"\n      android:layout_height=\"wrap_content\"\n      android:layout_marginEnd=\"8dp\"\n      android:layout_marginStart=\"8dp\"\n      android:layout_marginTop=\"64dp\"\n      android:ems=\"10\"\n      android:hint=\"@string/hint_placemarkTitle\"\n      android:inputType=\"text\"\n      app:layout_constraintEnd_toEndOf=\"parent\"\n      app:layout_constraintHorizontal_bias=\"0.503\"\n      app:layout_constraintStart_toStartOf=\"parent\"\n      app:layout_constraintTop_toTopOf=\"parent\" />\n\n    <EditText\n      android:id=\"@+id/description\"\n      android:layout_width=\"365dp\"\n      android:layout_height=\"wrap_content\"\n      android:layout_marginEnd=\"8dp\"\n      android:layout_marginStart=\"8dp\"\n      android:layout_marginTop=\"8dp\"\n      android:ems=\"10\"\n      android:hint=\"@string/hint_placemarkDescription\"\n      android:inputType=\"textPersonName\"\n      app:layout_constraintEnd_toEndOf=\"parent\"\n      app:layout_constraintStart_toStartOf=\"parent\"\n      app:layout_constraintTop_toBottomOf=\"@+id/placemarkTitle\" />\n\n    <Button\n      android:id=\"@+id/chooseImage\"\n      android:layout_width=\"158dp\"\n      android:layout_height=\"wrap_content\"\n      android:layout_marginStart=\"8dp\"\n      android:text=\"@string/button_addImage\"\n      app:layout_constraintStart_toStartOf=\"parent\"\n      app:layout_constraintTop_toBottomOf=\"@+id/description\" />\n\n    <Button\n      android:id=\"@+id/placemarkLocation\"\n      android:layout_width=\"167dp\"\n      android:layout_height=\"wrap_content\"\n      android:layout_marginEnd=\"8dp\"\n      android:text=\"@string/button_location\"\n      app:layout_constraintEnd_toEndOf=\"parent\"\n      app:layout_constraintTop_toBottomOf=\"@+id/description\" />\n\n    <ImageView\n      android:id=\"@+id/placemarkImage\"\n      android:layout_width=\"0dp\"\n      android:layout_height=\"0dp\"\n      android:layout_marginStart=\"8dp\"\n      android:layout_marginTop=\"8dp\"\n      android:layout_marginEnd=\"8dp\"\n      android:layout_marginBottom=\"8dp\"\n      app:layout_constraintBottom_toBottomOf=\"parent\"\n      app:layout_constraintEnd_toEndOf=\"parent\"\n      app:layout_constraintHorizontal_bias=\"0.555\"\n      app:layout_constraintStart_toStartOf=\"parent\"\n      app:layout_constraintTop_toBottomOf=\"@+id/placemarkLocation\"\n      app:layout_constraintVertical_bias=\"0.173\"\n      app:srcCompat=\"@drawable/ic_launcher_background\" />\n\n  </android.support.constraint.ConstraintLayout>\n\n</android.support.constraint.ConstraintLayout>\n~~~\n\n## PlacemarkView\n\n~~~\npackage org.wit.placemark.views.placemark\n\nimport android.content.Intent\nimport android.support.v7.app.AppCompatActivity\nimport android.os.Bundle\nimport android.view.Menu\nimport android.view.MenuItem\nimport kotlinx.android.synthetic.main.activity_placemark.*\nimport org.jetbrains.anko.AnkoLogger\nimport org.jetbrains.anko.toast\nimport org.wit.placemark.R\nimport org.wit.placemark.helpers.readImageFromPath\nimport org.wit.placemark.models.PlacemarkModel\n\nclass PlacemarkView : AppCompatActivity(), AnkoLogger {\n\n  lateinit var presenter: PlacemarkPresenter\n  var placemark = PlacemarkModel()\n\n  override fun onCreate(savedInstanceState: Bundle?) {\n    super.onCreate(savedInstanceState)\n    setContentView(R.layout.activity_placemark)\n    toolbarAdd.title = title\n    setSupportActionBar(toolbarAdd)\n\n    presenter = PlacemarkPresenter(this)\n\n    chooseImage.setOnClickListener { presenter.doSelectImage() }\n\n    placemarkLocation.setOnClickListener { presenter.doSetLocation() }\n  }\n\n  fun showPlacemark(placemark: PlacemarkModel) {\n    placemarkTitle.setText(placemark.title)\n    description.setText(placemark.description)\n    placemarkImage.setImageBitmap(readImageFromPath(this, placemark.image))\n    if (placemark.image != null) {\n      chooseImage.setText(R.string.change_placemark_image)\n    }\n  }\n\n  override fun onCreateOptionsMenu(menu: Menu): Boolean {\n    menuInflater.inflate(R.menu.menu_placemark, menu)\n    return super.onCreateOptionsMenu(menu)\n  }\n\n  override fun onOptionsItemSelected(item: MenuItem?): Boolean {\n    when (item?.itemId) {\n      R.id.item_delete -> {\n        presenter.doDelete()\n      }\n      R.id.item_save -> {\n        if (placemarkTitle.text.toString().isEmpty()) {\n          toast(R.string.enter_placemark_title)\n        } else {\n          presenter.doAddOrSave(placemarkTitle.text.toString(), description.text.toString())\n        }\n      }\n    }\n    return super.onOptionsItemSelected(item)\n  }\n\n  override fun onActivityResult(requestCode: Int, resultCode: Int, data: Intent?) {\n    super.onActivityResult(requestCode, resultCode, data)\n    if (data != null) {\n      presenter.doActivityResult(requestCode, resultCode, data)\n    }\n  }\n\n  override fun onBackPressed() {\n    presenter.doCancel()\n  }\n}\n~~~"
    
    
      
    
    
    },
  
    {
    "title": " BaseView/Presenter",
    "shortTitle": "03",
    
     
      
     
    
    "contentMd" : "# BaseView/Presenter\n\nThese new classes will implement some commonality that can be extracted from our MVP implementation.\n\nFirst, a base class for all Presenters:\n\n\n## BasePresenter\n\n~~~\npackage org.wit.placemark.views\n\nimport android.content.Intent\nimport org.wit.placemark.main.MainApp\n\nopen class BasePresenter(var view: BaseView?) {\n\n  var app: MainApp =  view?.application as MainApp\n\n  open fun doActivityResult(requestCode: Int, resultCode: Int, data: Intent) {\n  }\n\n  open fun doRequestPermissionsResult(requestCode: Int, permissions: Array<String>, grantResults: IntArray) {\n  }\n\n  open fun onDestroy() {\n    view = null\n  }\n}\n~~~\n\nNotice this is where we keep our app reference.\n\nTHen the base class for all Views:\n\n## BaseView\n\n~~~\npackage org.wit.placemark.views\n\nimport android.content.Intent\n\nimport android.os.Parcelable\nimport android.support.v7.app.AppCompatActivity\nimport android.support.v7.widget.Toolbar\nimport org.jetbrains.anko.AnkoLogger\n\nimport org.wit.placemark.models.PlacemarkModel\nimport org.wit.placemark.views.editlocation.EditLocationView\nimport org.wit.placemark.views.map.PlacemarkMapView\nimport org.wit.placemark.views.placemark.PlacemarkView\nimport org.wit.placemark.views.placemarklist.PlacemarkListView\n\nval IMAGE_REQUEST = 1\nval LOCATION_REQUEST = 2\n\nenum class VIEW {\n  LOCATION, PLACEMARK, MAPS, LIST\n}\n\nopen abstract class BaseView() : AppCompatActivity(), AnkoLogger {\n\n  var basePresenter: BasePresenter? = null\n\n  fun navigateTo(view: VIEW, code: Int = 0, key: String = \"\", value: Parcelable? = null) {\n    var intent = Intent(this, PlacemarkListView::class.java)\n    when (view) {\n      VIEW.LOCATION -> intent = Intent(this, EditLocationView::class.java)\n      VIEW.PLACEMARK -> intent = Intent(this, PlacemarkView::class.java)\n      VIEW.MAPS -> intent = Intent(this, PlacemarkMapView::class.java)\n      VIEW.LIST -> intent = Intent(this, PlacemarkListView::class.java)\n    }\n    if (key != \"\") {\n      intent.putExtra(key, value)\n    }\n    startActivityForResult(intent, code)\n  }\n\n  fun initPresenter(presenter: BasePresenter): BasePresenter {\n    basePresenter = presenter\n    return presenter\n  }\n\n  fun init(toolbar: Toolbar) {\n    toolbar.title = title\n    setSupportActionBar(toolbar)\n  }\n\n  override fun onDestroy() {\n    basePresenter?.onDestroy()\n    super.onDestroy()\n  }\n\n\n  override fun onActivityResult(requestCode: Int, resultCode: Int, data: Intent?) {\n    super.onActivityResult(requestCode, resultCode, data)\n    if (data != null) {\n      basePresenter?.doActivityResult(requestCode, resultCode, data)\n    }\n  }\n\n  override fun onRequestPermissionsResult(requestCode: Int, permissions: Array<String>, grantResults: IntArray) {\n    basePresenter?.doRequestPermissionsResult(requestCode, permissions, grantResults)\n  }\n\n  open fun showPlacemark(placemark: PlacemarkModel) {}\n  open fun showPlacemarks(placemarks: List<PlacemarkModel>) {}\n  open fun showProgress() {}\n  open fun hideProgress() {}\n}\n~~~\n\nThis is more involved, including:\n\n- utility method for launching activities\n- some default lifecycle implementations \n- shared initialisation of the toolbar\n- stubbed specification of useful methods which concrete View classes will implement.\n"
    
    
      
    
    
    },
  
    {
    "title": " PlacemarkPresenter/View",
    "shortTitle": "04",
    
     
      
     
    
    "contentMd" : "# PlacemarkPresenter/View\n\nNotice in this implementation that the view reference may be null, thus all access is via null safe calls.\n\n## PlacemarkPresenter\n\n~~~\npackage org.wit.placemark.views.placemark\n\nimport android.content.Intent\nimport org.wit.placemark.helpers.showImagePicker\nimport org.wit.placemark.models.Location\nimport org.wit.placemark.models.PlacemarkModel\nimport org.wit.placemark.views.*\n\nclass PlacemarkPresenter(view: BaseView) : BasePresenter(view) {\n\n  var placemark = PlacemarkModel()\n  var defaultLocation = Location(52.245696, -7.139102, 15f)\n  var edit = false;\n\n  init {\n    if (view.intent.hasExtra(\"placemark_edit\")) {\n      edit = true\n      placemark = view.intent.extras.getParcelable<PlacemarkModel>(\"placemark_edit\")\n      view.showPlacemark(placemark)\n    }\n  }\n\n  fun doAddOrSave(title: String, description: String) {\n    placemark.title = title\n    placemark.description = description\n    if (edit) {\n      app.placemarks.update(placemark)\n    } else {\n      app.placemarks.create(placemark)\n    }\n    view?.finish()\n  }\n\n  fun doCancel() {\n    view?.finish()\n  }\n\n  fun doDelete() {\n    app.placemarks.delete(placemark)\n    view?.finish()\n  }\n\n  fun doSelectImage() {\n     view?.let{\n       showImagePicker(view!!, IMAGE_REQUEST)\n     }\n  }\n\n  fun doSetLocation() {\n    if (edit == false) {\n      view?.navigateTo(VIEW.LOCATION, LOCATION_REQUEST, \"location\", defaultLocation)\n    } else {\n      view?.navigateTo(VIEW.LOCATION, LOCATION_REQUEST, \"location\", Location(placemark.lat, placemark.lng, placemark.zoom))\n    }\n  }\n\n  override fun doActivityResult(requestCode: Int, resultCode: Int, data: Intent) {\n    when (requestCode) {\n      IMAGE_REQUEST -> {\n        placemark.image = data.data.toString()\n        view?.showPlacemark(placemark)\n      }\n      LOCATION_REQUEST -> {\n        val location = data.extras.getParcelable<Location>(\"location\")\n        placemark.lat = location.lat\n        placemark.lng = location.lng\n        placemark.zoom = location.zoom\n      }\n    }\n  }\n}\n~~~\n\nThis is the view:\n\n## PlacemarkView\n\n~~~\nimport org.wit.placemark.views.BaseView\n\nclass PlacemarkView : BaseView(), AnkoLogger {\n\n  lateinit var presenter: PlacemarkPresenter\n  var placemark = PlacemarkModel()\n\n  override fun onCreate(savedInstanceState: Bundle?) {\n    super.onCreate(savedInstanceState)\n    setContentView(R.layout.activity_placemark)\n\n    init(toolbarAdd)\n\n    presenter = initPresenter (PlacemarkPresenter(this)) as PlacemarkPresenter\n\n    chooseImage.setOnClickListener { presenter.doSelectImage() }\n\n    placemarkLocation.setOnClickListener { presenter.doSetLocation() }\n  }\n\n  override fun showPlacemark(placemark: PlacemarkModel) {\n    placemarkTitle.setText(placemark.title)\n    description.setText(placemark.description)\n    placemarkImage.setImageBitmap(readImageFromPath(this, placemark.image))\n    if (placemark.image != null) {\n      chooseImage.setText(R.string.change_placemark_image)\n    }\n  }\n\n  override fun onCreateOptionsMenu(menu: Menu): Boolean {\n    menuInflater.inflate(R.menu.menu_placemark, menu)\n    return super.onCreateOptionsMenu(menu)\n  }\n\n  override fun onOptionsItemSelected(item: MenuItem?): Boolean {\n    when (item?.itemId) {\n      R.id.item_delete -> {\n        presenter.doDelete()\n      }\n      R.id.item_save -> {\n        if (placemarkTitle.text.toString().isEmpty()) {\n          toast(R.string.enter_placemark_title)\n        } else {\n          presenter.doAddOrSave(placemarkTitle.text.toString(), description.text.toString())\n        }\n      }\n    }\n    return super.onOptionsItemSelected(item)\n  }\n\n  override fun onActivityResult(requestCode: Int, resultCode: Int, data: Intent?) {\n    super.onActivityResult(requestCode, resultCode, data)\n    if (data != null) {\n      presenter.doActivityResult(requestCode, resultCode, data)\n    }\n  }\n\n  override fun onBackPressed() {\n    presenter.doCancel()\n  }\n}\n~~~"
    
    
      
    
    
    },
  
    {
    "title": " PlacemarkListView/Presenter",
    "shortTitle": "05",
    
     
      
     
    
    "contentMd" : "# PlacemarkListView/Presenter\n\n\nNotice in the presenter a more attractive signature for launching activities in the `navigateTo` method:\n\n## PlacemarkListPresenter\n\n~~~\npackage org.wit.placemark.views.placemarklist\n\nimport org.wit.placemark.models.PlacemarkModel\nimport org.wit.placemark.views.BasePresenter\nimport org.wit.placemark.views.BaseView\nimport org.wit.placemark.views.VIEW\n\nclass PlacemarkListPresenter(view: BaseView) : BasePresenter(view) {\n\n  fun doAddPlacemark() {\n    view?.navigateTo(VIEW.PLACEMARK)\n  }\n\n  fun doEditPlacemark(placemark: PlacemarkModel) {\n    view?.navigateTo(VIEW.PLACEMARK, 0, \"placemark_edit\", placemark)\n  }\n\n  fun doShowPlacemarksMap() {\n    view?.navigateTo(VIEW.MAPS)\n  }\n\n  fun loadPlacemarks() {\n    view?.showPlacemarks(app.placemarks.findAll())\n  }\n}\n~~~\n\nThis is the view:\n\n## PlacemarkListView\n\n~~~\npackage org.wit.placemark.views.placemarklist\n\nimport android.content.Intent\nimport android.os.Bundle\nimport android.support.v7.widget.LinearLayoutManager\nimport android.view.*\nimport kotlinx.android.synthetic.main.activity_placemark_list.*\nimport org.wit.placemark.R\nimport org.wit.placemark.models.PlacemarkModel\nimport org.wit.placemark.views.BaseView\n\nclass PlacemarkListView :  BaseView(), PlacemarkListener {\n\n  lateinit var presenter: PlacemarkListPresenter\n\n  override fun onCreate(savedInstanceState: Bundle?) {\n    super.onCreate(savedInstanceState)\n    setContentView(R.layout.activity_placemark_list)\n    init(toolbarMain)\n\n    presenter = initPresenter(PlacemarkListPresenter(this)) as PlacemarkListPresenter\n\n    val layoutManager = LinearLayoutManager(this)\n    recyclerView.layoutManager = layoutManager\n    presenter.loadPlacemarks()\n  }\n\n  override fun showPlacemarks(placemarks: List<PlacemarkModel>) {\n    recyclerView.adapter = PlacemarkAdapter(placemarks, this)\n    recyclerView.adapter?.notifyDataSetChanged()\n  }\n\n  override fun onCreateOptionsMenu(menu: Menu?): Boolean {\n    menuInflater.inflate(R.menu.menu_main, menu)\n    return super.onCreateOptionsMenu(menu)\n  }\n\n  override fun onOptionsItemSelected(item: MenuItem?): Boolean {\n    when (item?.itemId) {\n      R.id.item_add -> presenter.doAddPlacemark()\n      R.id.item_map -> presenter.doShowPlacemarksMap()\n    }\n    return super.onOptionsItemSelected(item)\n  }\n\n  override fun onPlacemarkClick(placemark: PlacemarkModel) {\n    presenter.doEditPlacemark(placemark)\n  }\n\n  override fun onActivityResult(requestCode: Int, resultCode: Int, data: Intent?) {\n    presenter.loadPlacemarks()\n    super.onActivityResult(requestCode, resultCode, data)\n  }\n}\n~~~"
    
    
      
    
    
    },
  
    {
    "title": "Solution",
    "shortTitle": "Exercises",
    
     
      
     
    
    "contentMd" : "#Solution\n\nPlacemark application so far:\n\n- [archive.zip](archives/archive.zip)\n\n\n# Exercise 1\n\nUsing this lab as a guide, convert PlacemarkMapView/Presenter to use the PlacemarkView/Presenter base classes\n\n# Exercise 2\n\nAlso convert EditLoctionView/Presenter to use the base classes"
    
    
      
    
    
    }
  
  ]
  }

