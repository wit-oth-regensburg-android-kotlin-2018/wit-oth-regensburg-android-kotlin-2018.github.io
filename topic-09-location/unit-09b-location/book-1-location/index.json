


  {
  
  
  "type" : "lab",
  "title" : "Lab-09a Location",
  "folder" : "book-1-location",
  
    "link" : "book-1-location/index.html",
  
  "img" : "book-1-location/img/main.png",
  "videoid" : "none",
  "objectives" : "<p>When creating a new placemark, use the current location as the starting point.</p>",
  "properties" : {},
  "los": [  ]
,
  "chapters" : [
  
    {
    "title": " Objectives",
    "shortTitle": "Lab-09a Location",
    "content": [
     
      "<h1>Objectives</h1>" ,
     
      "<p>When creating a new placemark, use the current location as the starting point.</p>" ,
     
      "" 
     
    ]
    },
  
    {
    "title": " Solutions",
    "shortTitle": "01",
    "content": [
     
      "<h1>Solutions</h1>" ,
     
      "<h1>Exercise 1</h1>" ,
     
      "<p>Using this lab as a guide, convert PlacemarkMapView/Presenter to use the PlacemarkView/Presenter base classes</p>" ,
     
      "<h2>Solution</h2>" ,
     
      "<h2>PlacemarkMapPresenter</h2>" ,
     
      "<pre><code>package org.wit.placemark.views.map" ,
     
      "" ,
     
      "import com.google.android.gms.maps.CameraUpdateFactory" ,
     
      "import com.google.android.gms.maps.GoogleMap" ,
     
      "import com.google.android.gms.maps.model.LatLng" ,
     
      "import com.google.android.gms.maps.model.Marker" ,
     
      "import com.google.android.gms.maps.model.MarkerOptions" ,
     
      "import org.wit.placemark.models.PlacemarkModel" ,
     
      "import org.wit.placemark.views.BasePresenter" ,
     
      "import org.wit.placemark.views.BaseView" ,
     
      "" ,
     
      "class PlacemarkMapPresenter(view: BaseView) : BasePresenter(view) {" ,
     
      "" ,
     
      "  fun doPopulateMap(map: GoogleMap, placemarks: List&lt;PlacemarkModel&gt;) {" ,
     
      "    map.uiSettings.setZoomControlsEnabled(true)" ,
     
      "    placemarks.forEach {" ,
     
      "      val loc = LatLng(it.lat, it.lng)" ,
     
      "      val options = MarkerOptions().title(it.title).position(loc)" ,
     
      "      map.addMarker(options).tag = it.id" ,
     
      "      map.moveCamera(CameraUpdateFactory.newLatLngZoom(loc, it.zoom))" ,
     
      "    }" ,
     
      "  }" ,
     
      "" ,
     
      "  fun doMarkerSelected(marker: Marker) {" ,
     
      "    val tag = marker.tag as Long" ,
     
      "    val placemark = app.placemarks.findById(tag)" ,
     
      "    if (placemark != null) view?.showPlacemark(placemark)" ,
     
      "" ,
     
      "  }" ,
     
      "" ,
     
      "  fun loadPlacemarks() {" ,
     
      "    view?.showPlacemarks(app.placemarks.findAll())" ,
     
      "  }" ,
     
      "}</code></pre>" ,
     
      "<h2>PlacemarkMapView</h2>" ,
     
      "<pre><code>package org.wit.placemark.views.map" ,
     
      "" ,
     
      "import android.os.Bundle" ,
     
      "import com.google.android.gms.maps.GoogleMap" ,
     
      "import com.google.android.gms.maps.model.Marker" ,
     
      "import org.wit.placemark.R" ,
     
      "import kotlinx.android.synthetic.main.activity_placemark_map.*" ,
     
      "import kotlinx.android.synthetic.main.content_placemark_map.*" ,
     
      "import org.wit.placemark.helpers.readImageFromPath" ,
     
      "import org.wit.placemark.models.PlacemarkModel" ,
     
      "import org.wit.placemark.views.BaseView" ,
     
      "" ,
     
      "class PlacemarkMapView : BaseView(), GoogleMap.OnMarkerClickListener {" ,
     
      "" ,
     
      "  lateinit var presenter: PlacemarkMapPresenter" ,
     
      "  lateinit var map : GoogleMap" ,
     
      "" ,
     
      "  override fun onCreate(savedInstanceState: Bundle?) {" ,
     
      "    super.onCreate(savedInstanceState)" ,
     
      "    setContentView(R.layout.activity_placemark_map)" ,
     
      "    super.init(toolbarMaps)" ,
     
      "" ,
     
      "    presenter = initPresenter (PlacemarkMapPresenter(this)) as PlacemarkMapPresenter" ,
     
      "" ,
     
      "    mapView.onCreate(savedInstanceState);" ,
     
      "    mapView.getMapAsync {" ,
     
      "      map = it" ,
     
      "      map.setOnMarkerClickListener(this)" ,
     
      "      presenter.loadPlacemarks()" ,
     
      "    }" ,
     
      "  }" ,
     
      "" ,
     
      "  override fun showPlacemark(placemark: PlacemarkModel) {" ,
     
      "    currentTitle.text = placemark.title" ,
     
      "    currentDescription.text = placemark.description" ,
     
      "    imageView.setImageBitmap(readImageFromPath(this, placemark.image))" ,
     
      "  }" ,
     
      "" ,
     
      "  override fun showPlacemarks(placemarks: List&lt;PlacemarkModel&gt;) {" ,
     
      "    presenter.doPopulateMap(map, placemarks)" ,
     
      "  }" ,
     
      "" ,
     
      "  override fun onMarkerClick(marker: Marker): Boolean {" ,
     
      "    presenter.doMarkerSelected(marker)" ,
     
      "    return true" ,
     
      "  }" ,
     
      "" ,
     
      "  override fun onDestroy() {" ,
     
      "    super.onDestroy()" ,
     
      "    mapView.onDestroy()" ,
     
      "  }" ,
     
      "" ,
     
      "  override fun onLowMemory() {" ,
     
      "    super.onLowMemory()" ,
     
      "    mapView.onLowMemory()" ,
     
      "  }" ,
     
      "" ,
     
      "  override fun onPause() {" ,
     
      "    super.onPause()" ,
     
      "    mapView.onPause()" ,
     
      "  }" ,
     
      "" ,
     
      "  override fun onResume() {" ,
     
      "    super.onResume()" ,
     
      "    mapView.onResume()" ,
     
      "  }" ,
     
      "" ,
     
      "  override fun onSaveInstanceState(outState: Bundle?) {" ,
     
      "    super.onSaveInstanceState(outState)" ,
     
      "    mapView.onSaveInstanceState(outState)" ,
     
      "  }" ,
     
      "}</code></pre>" ,
     
      "" 
     
    ]
    },
  
    {
    "title": " Solutions",
    "shortTitle": "02",
    "content": [
     
      "<h1>Solutions</h1>" ,
     
      "<h1>Exercise 2</h1>" ,
     
      "<p>Also convert EditLoctionView/Presenter to use the base classes</p>" ,
     
      "<h2>Solution</h2>" ,
     
      "<h2>EditLocationPresenter</h2>" ,
     
      "<pre><code>import com.google.android.gms.maps.model.MarkerOptions" ,
     
      "import org.wit.placemark.models.Location" ,
     
      "import org.wit.placemark.views.BasePresenter" ,
     
      "import org.wit.placemark.views.BaseView" ,
     
      "" ,
     
      "class EditLocationPresenter(view: BaseView) : BasePresenter(view) {" ,
     
      "" ,
     
      "  var location = Location()" ,
     
      "" ,
     
      "  init {" ,
     
      "    location = view.intent.extras.getParcelable&lt;Location&gt;(&quot;location&quot;)" ,
     
      "  }" ,
     
      "" ,
     
      "  fun doConfigureMap(map: GoogleMap) {" ,
     
      "    val loc = LatLng(location.lat, location.lng)" ,
     
      "    val options = MarkerOptions()" ,
     
      "        .title(&quot;Placemark&quot;)" ,
     
      "        .snippet(&quot;GPS : &quot; + loc.toString())" ,
     
      "        .draggable(true)" ,
     
      "        .position(loc)" ,
     
      "    map.addMarker(options)" ,
     
      "    map.moveCamera(CameraUpdateFactory.newLatLngZoom(loc, location.zoom))" ,
     
      "  }" ,
     
      "" ,
     
      "  fun doUpdateLocation(lat: Double, lng: Double) {" ,
     
      "    location.lat = lat" ,
     
      "    location.lng = lng" ,
     
      "  }" ,
     
      "" ,
     
      "  fun doSave() {" ,
     
      "    val resultIntent = Intent()" ,
     
      "    resultIntent.putExtra(&quot;location&quot;, location)" ,
     
      "    view?.setResult(0, resultIntent)" ,
     
      "    view?.finish()" ,
     
      "  }" ,
     
      "" ,
     
      "  fun doUpdateMarker(marker: Marker) {" ,
     
      "    val loc = LatLng(location.lat, location.lng)" ,
     
      "    marker.setSnippet(&quot;GPS : &quot; + loc.toString())" ,
     
      "  }" ,
     
      "}</code></pre>" ,
     
      "<h2>EditLocationView</h2>" ,
     
      "<pre><code>package org.wit.placemark.views.editlocation" ,
     
      "" ,
     
      "import android.os.Bundle" ,
     
      "import com.google.android.gms.maps.GoogleMap" ,
     
      "import com.google.android.gms.maps.SupportMapFragment" ,
     
      "import com.google.android.gms.maps.model.Marker" ,
     
      "import org.wit.placemark.R" ,
     
      "import org.wit.placemark.views.BaseView" ,
     
      "" ,
     
      "class EditLocationView : BaseView(), GoogleMap.OnMarkerDragListener, GoogleMap.OnMarkerClickListener {" ,
     
      "" ,
     
      "  lateinit var map: GoogleMap" ,
     
      "  lateinit var presenter: EditLocationPresenter" ,
     
      "" ,
     
      "  override fun onCreate(savedInstanceState: Bundle?) {" ,
     
      "    super.onCreate(savedInstanceState)" ,
     
      "    setContentView(R.layout.activity_maps)" ,
     
      "    val mapFragment = supportFragmentManager.findFragmentById(R.id.map) as SupportMapFragment" ,
     
      "    presenter = EditLocationPresenter(this)" ,
     
      "    mapFragment.getMapAsync {" ,
     
      "      map = it" ,
     
      "      map.setOnMarkerDragListener(this)" ,
     
      "      map.setOnMarkerClickListener(this)" ,
     
      "      presenter.doConfigureMap(map)" ,
     
      "    }" ,
     
      "  }" ,
     
      "" ,
     
      "  override fun onMarkerDragStart(marker: Marker) {}" ,
     
      "" ,
     
      "  override fun onMarkerDrag(marker: Marker) {}" ,
     
      "" ,
     
      "  override fun onMarkerDragEnd(marker: Marker) {" ,
     
      "    presenter.doUpdateLocation(marker.position.latitude, marker.position.longitude)" ,
     
      "  }" ,
     
      "" ,
     
      "  override fun onBackPressed() {" ,
     
      "    presenter.doSave()" ,
     
      "  }" ,
     
      "" ,
     
      "  override fun onMarkerClick(marker: Marker): Boolean {" ,
     
      "    presenter.doUpdateMarker(marker)" ,
     
      "    return false" ,
     
      "  }" ,
     
      "}</code></pre>" ,
     
      "" 
     
    ]
    },
  
    {
    "title": " MapView",
    "shortTitle": "03",
    "content": [
     
      "<h1>MapView</h1>" ,
     
      "<p>Using the Layout Editor, restructure activity_placemark to contain a MapView:</p>" ,
     
      "<p><img src='img/03.png' alt=''></p>" ,
     
      "<p>This is the layout file:</p>" ,
     
      "<h2>activity_placemark.xml</h2>" ,
     
      "<pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;" ,
     
      "&lt;android.support.constraint.ConstraintLayout" ,
     
      "  xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;" ,
     
      "  xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot;" ,
     
      "  xmlns:tools=&quot;http://schemas.android.com/tools&quot;" ,
     
      "  android:layout_width=&quot;match_parent&quot;" ,
     
      "  android:layout_height=&quot;match_parent&quot;" ,
     
      "  tools:context=&quot;org.wit.placemark.views.placemark.PlacemarkView&quot;&gt;" ,
     
      "" ,
     
      "  &lt;android.support.design.widget.AppBarLayout" ,
     
      "    android:id=&quot;@+id/appBarLayout&quot;" ,
     
      "    android:layout_width=&quot;match_parent&quot;" ,
     
      "    android:layout_height=&quot;wrap_content&quot;" ,
     
      "    android:background=&quot;@color/colorAccent&quot;" ,
     
      "    android:fitsSystemWindows=&quot;true&quot;" ,
     
      "    app:elevation=&quot;0dip&quot;" ,
     
      "    app:theme=&quot;@style/ThemeOverlay.AppCompat.Dark.ActionBar&quot;&gt;" ,
     
      "" ,
     
      "    &lt;android.support.v7.widget.Toolbar" ,
     
      "      android:id=&quot;@+id/toolbarAdd&quot;" ,
     
      "      android:layout_width=&quot;match_parent&quot;" ,
     
      "      android:layout_height=&quot;wrap_content&quot;" ,
     
      "      app:titleTextColor=&quot;@color/colorPrimary&quot; /&gt;" ,
     
      "" ,
     
      "  &lt;/android.support.design.widget.AppBarLayout&gt;" ,
     
      "" ,
     
      "  &lt;android.support.constraint.ConstraintLayout" ,
     
      "    android:layout_width=&quot;match_parent&quot;" ,
     
      "    android:layout_height=&quot;600dp&quot;" ,
     
      "    android:layout_marginEnd=&quot;8dp&quot;" ,
     
      "    android:layout_marginStart=&quot;8dp&quot;" ,
     
      "    app:layout_constraintEnd_toEndOf=&quot;parent&quot;" ,
     
      "    app:layout_constraintStart_toStartOf=&quot;parent&quot;" ,
     
      "    app:layout_constraintTop_toTopOf=&quot;parent&quot;&gt;" ,
     
      "" ,
     
      "    &lt;EditText" ,
     
      "      android:id=&quot;@+id/placemarkTitle&quot;" ,
     
      "      android:layout_width=&quot;365dp&quot;" ,
     
      "      android:layout_height=&quot;wrap_content&quot;" ,
     
      "      android:layout_marginEnd=&quot;8dp&quot;" ,
     
      "      android:layout_marginStart=&quot;8dp&quot;" ,
     
      "      android:layout_marginTop=&quot;64dp&quot;" ,
     
      "      android:ems=&quot;10&quot;" ,
     
      "      android:hint=&quot;@string/hint_placemarkTitle&quot;" ,
     
      "      android:inputType=&quot;text&quot;" ,
     
      "      app:layout_constraintEnd_toEndOf=&quot;parent&quot;" ,
     
      "      app:layout_constraintHorizontal_bias=&quot;0.503&quot;" ,
     
      "      app:layout_constraintStart_toStartOf=&quot;parent&quot;" ,
     
      "      app:layout_constraintTop_toTopOf=&quot;parent&quot; /&gt;" ,
     
      "" ,
     
      "    &lt;EditText" ,
     
      "      android:id=&quot;@+id/description&quot;" ,
     
      "      android:layout_width=&quot;365dp&quot;" ,
     
      "      android:layout_height=&quot;wrap_content&quot;" ,
     
      "      android:layout_marginEnd=&quot;8dp&quot;" ,
     
      "      android:layout_marginStart=&quot;8dp&quot;" ,
     
      "      android:layout_marginTop=&quot;8dp&quot;" ,
     
      "      android:ems=&quot;10&quot;" ,
     
      "      android:hint=&quot;@string/hint_placemarkDescription&quot;" ,
     
      "      android:inputType=&quot;textPersonName&quot;" ,
     
      "      app:layout_constraintEnd_toEndOf=&quot;parent&quot;" ,
     
      "      app:layout_constraintStart_toStartOf=&quot;parent&quot;" ,
     
      "      app:layout_constraintTop_toBottomOf=&quot;@+id/placemarkTitle&quot; /&gt;" ,
     
      "" ,
     
      "    &lt;Button" ,
     
      "      android:id=&quot;@+id/chooseImage&quot;" ,
     
      "      android:layout_width=&quot;0dp&quot;" ,
     
      "      android:layout_height=&quot;wrap_content&quot;" ,
     
      "      android:layout_marginStart=&quot;8dp&quot;" ,
     
      "      android:layout_marginEnd=&quot;8dp&quot;" ,
     
      "      android:text=&quot;@string/button_addImage&quot;" ,
     
      "      app:layout_constraintEnd_toEndOf=&quot;parent&quot;" ,
     
      "      app:layout_constraintStart_toStartOf=&quot;parent&quot;" ,
     
      "      app:layout_constraintTop_toBottomOf=&quot;@+id/description&quot; /&gt;" ,
     
      "" ,
     
      "    &lt;Button" ,
     
      "      android:id=&quot;@+id/placemarkLocation&quot;" ,
     
      "      android:layout_width=&quot;0dp&quot;" ,
     
      "      android:layout_height=&quot;wrap_content&quot;" ,
     
      "      android:layout_marginStart=&quot;8dp&quot;" ,
     
      "      android:layout_marginTop=&quot;8dp&quot;" ,
     
      "      android:layout_marginEnd=&quot;8dp&quot;" ,
     
      "      android:text=&quot;@string/button_location&quot;" ,
     
      "      app:layout_constraintEnd_toEndOf=&quot;parent&quot;" ,
     
      "      app:layout_constraintStart_toStartOf=&quot;parent&quot;" ,
     
      "      app:layout_constraintTop_toBottomOf=&quot;@+id/placemarkImage&quot; /&gt;" ,
     
      "" ,
     
      "    &lt;ImageView" ,
     
      "      android:id=&quot;@+id/placemarkImage&quot;" ,
     
      "      android:layout_width=&quot;355dp&quot;" ,
     
      "      android:layout_height=&quot;139dp&quot;" ,
     
      "      android:layout_marginStart=&quot;8dp&quot;" ,
     
      "      android:layout_marginTop=&quot;16dp&quot;" ,
     
      "      android:layout_marginEnd=&quot;8dp&quot;" ,
     
      "      app:layout_constraintEnd_toEndOf=&quot;parent&quot;" ,
     
      "      app:layout_constraintHorizontal_bias=&quot;0.0&quot;" ,
     
      "      app:layout_constraintStart_toStartOf=&quot;parent&quot;" ,
     
      "      app:layout_constraintTop_toBottomOf=&quot;@+id/chooseImage&quot;" ,
     
      "      app:srcCompat=&quot;@drawable/ic_launcher_background&quot; /&gt;" ,
     
      "" ,
     
      "    &lt;com.google.android.gms.maps.MapView" ,
     
      "      android:id=&quot;@+id/mapView&quot;" ,
     
      "      android:layout_width=&quot;0dp&quot;" ,
     
      "      android:layout_height=&quot;163dp&quot;" ,
     
      "      android:layout_marginStart=&quot;8dp&quot;" ,
     
      "      android:layout_marginTop=&quot;8dp&quot;" ,
     
      "      android:layout_marginEnd=&quot;8dp&quot;" ,
     
      "      android:layout_marginBottom=&quot;8dp&quot;" ,
     
      "      app:layout_constraintBottom_toBottomOf=&quot;parent&quot;" ,
     
      "      app:layout_constraintEnd_toEndOf=&quot;parent&quot;" ,
     
      "      app:layout_constraintStart_toStartOf=&quot;parent&quot;" ,
     
      "      app:layout_constraintTop_toBottomOf=&quot;@+id/placemarkLocation&quot; /&gt;" ,
     
      "" ,
     
      "  &lt;/android.support.constraint.ConstraintLayout&gt;" ,
     
      "" ,
     
      "&lt;/android.support.constraint.ConstraintLayout&gt;</code></pre>" ,
     
      "" 
     
    ]
    },
  
    {
    "title": "# PlacemarkView",
    "shortTitle": "04",
    "content": [
     
      "<h2>PlacemarkView</h2>" ,
     
      "<p>We should be familiar with manually managing a MapView component, which involves:</p>" ,
     
      "<ul>" ,
     
      "<li>declaring a GoogleMap reference</li>" ,
     
      "<li>initialising the mapView widget + using it to acquire the googleMap reference</li>" ,
     
      "<li>manage the mapView lifecycle</li>" ,
     
      "</ul>" ,
     
      "<pre><code>..." ,
     
      "class PlacemarkView : BaseView(), AnkoLogger {" ,
     
      "  ..." ,
     
      "  lateinit var map: GoogleMap" ,
     
      "  ..." ,
     
      "" ,
     
      "  override fun onCreate(savedInstanceState: Bundle?) {" ,
     
      "    ..." ,
     
      "    mapView.onCreate(savedInstanceState);" ,
     
      "    mapView.getMapAsync {" ,
     
      "      map = it" ,
     
      "      presenter.doConfigureMap(map)" ,
     
      "    }" ,
     
      "  }" ,
     
      "" ,
     
      "  ..." ,
     
      "" ,
     
      "  override fun onDestroy() {" ,
     
      "    super.onDestroy()" ,
     
      "    mapView.onDestroy()" ,
     
      "  }" ,
     
      "" ,
     
      "  override fun onLowMemory() {" ,
     
      "    super.onLowMemory()" ,
     
      "    mapView.onLowMemory()" ,
     
      "  }" ,
     
      "" ,
     
      "  override fun onPause() {" ,
     
      "    super.onPause()" ,
     
      "    mapView.onPause()" ,
     
      "  }" ,
     
      "" ,
     
      "  override fun onResume() {" ,
     
      "    super.onResume()" ,
     
      "    mapView.onResume()" ,
     
      "  }" ,
     
      "" ,
     
      "  override fun onSaveInstanceState(outState: Bundle?) {" ,
     
      "    super.onSaveInstanceState(outState)" ,
     
      "    mapView.onSaveInstanceState(outState)" ,
     
      "  }" ,
     
      "}</code></pre>" ,
     
      "<pre><code>class PlacemarkPresenter(view: BaseView) : BasePresenter(view) {" ,
     
      "" ,
     
      "  var map: GoogleMap? = null" ,
     
      "" ,
     
      "" ,
     
      "  fun doConfigureMap(m: GoogleMap) {" ,
     
      "    map = m" ,
     
      "    locationUpdate(placemark.lat, placemark.lng)" ,
     
      "  }" ,
     
      "" ,
     
      "  fun locationUpdate(lat: Double, lng: Double) {" ,
     
      "    placemark.lat = lat" ,
     
      "    placemark.lng = lng" ,
     
      "    placemark.zoom = 15f" ,
     
      "    map?.clear()" ,
     
      "    map?.uiSettings?.setZoomControlsEnabled(true)" ,
     
      "    val options = MarkerOptions().title(placemark.title).position(LatLng(placemark.lat, placemark.lng))" ,
     
      "    map?.addMarker(options)" ,
     
      "    map?.moveCamera(CameraUpdateFactory.newLatLngZoom(LatLng(placemark.lat, placemark.lng), placemark.zoom))" ,
     
      "    view?.showPlacemark(placemark)" ,
     
      "  }</code></pre>" ,
     
      "<p>This will ensure that the marker is placed on the map correctly - if the placemark already exists. For a new placemark, we would need to take special measures:</p>" ,
     
      "<p>In the init block, if we are not in edit mode, set the location to the default:</p>" ,
     
      "<pre><code>  init {" ,
     
      "    if (view.intent.hasExtra(&quot;placemark_edit&quot;)) {" ,
     
      "      edit = true" ,
     
      "      placemark = view.intent.extras.getParcelable&lt;PlacemarkModel&gt;(&quot;placemark_edit&quot;)" ,
     
      "      view.showPlacemark(placemark)" ,
     
      "    } else {" ,
     
      "      placemark.lat = defaultLocation.lat" ,
     
      "      placemark.lng = defaultLocation.lng" ,
     
      "    }" ,
     
      "  }</code></pre>" ,
     
      "<p>Also, when the user has edited the location - make sure to also update the position:</p>" ,
     
      "<pre><code>  override fun doActivityResult(requestCode: Int, resultCode: Int, data: Intent) {" ,
     
      "    ..." ,
     
      "    ..." ,
     
      "      LOCATION_REQUEST -&gt; {" ,
     
      "        val location = data.extras.getParcelable&lt;Location&gt;(&quot;location&quot;)" ,
     
      "        placemark.lat = location.lat" ,
     
      "        placemark.lng = location.lng" ,
     
      "        placemark.zoom = location.zoom" ,
     
      "        locationUpdate(placemark.lat, placemark.lng)" ,
     
      "      }" ,
     
      "    }" ,
     
      "  }</code></pre>" ,
     
      "<p>This is the complete class at this stage:</p>" ,
     
      "<h2>PlacemarkPresenter</h2>" ,
     
      "<pre><code>class PlacemarkPresenter(view: BaseView) : BasePresenter(view) {" ,
     
      "" ,
     
      "  var map: GoogleMap? = null" ,
     
      "  var placemark = PlacemarkModel()" ,
     
      "  var defaultLocation = Location(52.245696, -7.139102, 15f)" ,
     
      "  var edit = false;" ,
     
      "" ,
     
      "  init {" ,
     
      "    if (view.intent.hasExtra(&quot;placemark_edit&quot;)) {" ,
     
      "      edit = true" ,
     
      "      placemark = view.intent.extras.getParcelable&lt;PlacemarkModel&gt;(&quot;placemark_edit&quot;)" ,
     
      "      view.showPlacemark(placemark)" ,
     
      "    } else {" ,
     
      "      placemark.lat = defaultLocation.lat" ,
     
      "      placemark.lng = defaultLocation.lng" ,
     
      "    }" ,
     
      "  }" ,
     
      "" ,
     
      "  fun doConfigureMap(m: GoogleMap) {" ,
     
      "    map = m" ,
     
      "    locationUpdate(placemark.lat, placemark.lng)" ,
     
      "  }" ,
     
      "" ,
     
      "  fun locationUpdate(lat: Double, lng: Double) {" ,
     
      "    placemark.lat = lat" ,
     
      "    placemark.lng = lng" ,
     
      "    placemark.zoom = 15f" ,
     
      "    map?.clear()" ,
     
      "    map?.uiSettings?.setZoomControlsEnabled(true)" ,
     
      "    val options = MarkerOptions().title(placemark.title).position(LatLng(placemark.lat, placemark.lng))" ,
     
      "    map?.addMarker(options)" ,
     
      "    map?.moveCamera(CameraUpdateFactory.newLatLngZoom(LatLng(placemark.lat, placemark.lng), placemark.zoom))" ,
     
      "    view?.showPlacemark(placemark)" ,
     
      "  }" ,
     
      "" ,
     
      "  fun doAddOrSave(title: String, description: String) {" ,
     
      "    placemark.title = title" ,
     
      "    placemark.description = description" ,
     
      "    if (edit) {" ,
     
      "      app.placemarks.update(placemark)" ,
     
      "    } else {" ,
     
      "      app.placemarks.create(placemark)" ,
     
      "    }" ,
     
      "    view?.finish()" ,
     
      "  }" ,
     
      "" ,
     
      "  fun doCancel() {" ,
     
      "    view?.finish()" ,
     
      "  }" ,
     
      "" ,
     
      "  fun doDelete() {" ,
     
      "    app.placemarks.delete(placemark)" ,
     
      "    view?.finish()" ,
     
      "  }" ,
     
      "" ,
     
      "  fun doSelectImage() {" ,
     
      "     view?.let{" ,
     
      "       showImagePicker(view!!, IMAGE_REQUEST)" ,
     
      "     }" ,
     
      "  }" ,
     
      "" ,
     
      "  fun doSetLocation() {" ,
     
      "    if (edit == false) {" ,
     
      "      view?.navigateTo(VIEW.LOCATION, LOCATION_REQUEST, &quot;location&quot;, defaultLocation)" ,
     
      "    } else {" ,
     
      "      view?.navigateTo(VIEW.LOCATION, LOCATION_REQUEST, &quot;location&quot;, Location(placemark.lat, placemark.lng, placemark.zoom))" ,
     
      "    }" ,
     
      "  }" ,
     
      "" ,
     
      "  override fun doActivityResult(requestCode: Int, resultCode: Int, data: Intent) {" ,
     
      "    when (requestCode) {" ,
     
      "      IMAGE_REQUEST -&gt; {" ,
     
      "        placemark.image = data.data.toString()" ,
     
      "        view?.showPlacemark(placemark)" ,
     
      "      }" ,
     
      "      LOCATION_REQUEST -&gt; {" ,
     
      "        val location = data.extras.getParcelable&lt;Location&gt;(&quot;location&quot;)" ,
     
      "        placemark.lat = location.lat" ,
     
      "        placemark.lng = location.lng" ,
     
      "        placemark.zoom = location.zoom" ,
     
      "        locationUpdate(placemark.lat, placemark.lng)" ,
     
      "      }" ,
     
      "    }" ,
     
      "  }" ,
     
      "}</code></pre>" ,
     
      "<p>It still does not determine the actual current location.</p>" ,
     
      "" 
     
    ]
    },
  
    {
    "title": " Location Libraries",
    "shortTitle": "05",
    "content": [
     
      "<h1>Location Libraries</h1>" ,
     
      "<p>In order to determine the current location, we need the google play service location libraries:</p>" ,
     
      "<h2>gradle</h2>" ,
     
      "<pre><code>..." ,
     
      "  implementation &quot;com.google.android.gms:play-services-location:16.0.0&quot;" ,
     
      "...</code></pre>" ,
     
      "<p>We also need this new helper class:</p>" ,
     
      "<h2>LocationHelpers</h2>" ,
     
      "<pre><code>package org.wit.placemark.helpers" ,
     
      "" ,
     
      "import android.Manifest" ,
     
      "import android.app.Activity" ,
     
      "import android.content.pm.PackageManager" ,
     
      "import android.support.v4.app.ActivityCompat" ,
     
      "import android.util.Log" ,
     
      "" ,
     
      "val REQUEST_PERMISSIONS_REQUEST_CODE = 34" ,
     
      "" ,
     
      "fun checkLocationPermissions(activity: Activity) : Boolean {" ,
     
      "  if (ActivityCompat.checkSelfPermission(activity, Manifest.permission.ACCESS_FINE_LOCATION) == PackageManager.PERMISSION_GRANTED) {" ,
     
      "    return true" ,
     
      "  }" ,
     
      "  else {" ,
     
      "    ActivityCompat.requestPermissions(activity, arrayOf(Manifest.permission.ACCESS_FINE_LOCATION), REQUEST_PERMISSIONS_REQUEST_CODE)" ,
     
      "    return false" ,
     
      "  }" ,
     
      "}" ,
     
      "" ,
     
      "fun isPermissionGranted(code: Int, grantResults: IntArray): Boolean {" ,
     
      "  var permissionGranted = false;" ,
     
      "  if (code == REQUEST_PERMISSIONS_REQUEST_CODE) {" ,
     
      "    when {" ,
     
      "      grantResults.isEmpty() -&gt; Log.i(&quot;Location&quot;, &quot;User interaction was cancelled.&quot;)" ,
     
      "      (grantResults[0] == PackageManager.PERMISSION_GRANTED) -&gt; {" ,
     
      "        permissionGranted = true" ,
     
      "        Log.i(&quot;Location&quot;, &quot;Permission Granted.&quot;)" ,
     
      "      }" ,
     
      "      else -&gt; Log.i(&quot;Location&quot;, &quot;Permission Denied.&quot;)" ,
     
      "    }" ,
     
      "  }" ,
     
      "  return permissionGranted" ,
     
      "}</code></pre>" ,
     
      "" 
     
    ]
    },
  
    {
    "title": " Location Permissions",
    "shortTitle": "06",
    "content": [
     
      "<h1>Location Permissions</h1>" ,
     
      "<p>If we wish to access the devices current location, we will need to prompt the user to grant this permission - and be able to proceed in an orderly manner if this permission is denied.</p>" ,
     
      "<p>First, in the presenter, acquire a reference to the location provider client:</p>" ,
     
      "<pre><code>  var locationService: FusedLocationProviderClient = LocationServices.getFusedLocationProviderClient(view)</code></pre>" ,
     
      "<p>Th init block is modified to check to see if permission is requires (or already has been granted):</p>" ,
     
      "<pre><code>  init {" ,
     
      "    if (view.intent.hasExtra(&quot;placemark_edit&quot;)) {" ,
     
      "      edit = true" ,
     
      "      placemark = view.intent.extras.getParcelable&lt;PlacemarkModel&gt;(&quot;placemark_edit&quot;)" ,
     
      "      view.showPlacemark(placemark)" ,
     
      "    } else {" ,
     
      "      if (checkLocationPermissions(view)) {" ,
     
      "        // todo get the current location" ,
     
      "      }" ,
     
      "    }" ,
     
      "  }</code></pre>" ,
     
      "<p>This method will be called with the users response to the permissions dialog:</p>" ,
     
      "<pre><code>  override fun doRequestPermissionsResult(requestCode: Int, permissions: Array&lt;String&gt;, grantResults: IntArray) {" ,
     
      "    if (isPermissionGranted(requestCode, grantResults)) {" ,
     
      "      // todo get the current location" ,
     
      "    } else {" ,
     
      "      // permissions denied, so use the default location" ,
     
      "      locationUpdate(defaultLocation.lat, defaultLocation.lng)" ,
     
      "    }" ,
     
      "  }</code></pre>" ,
     
      "<p>Run the application now - when you create a new placemark you should see this dialog:</p>" ,
     
      "<p><img src='img/01x.png' alt=''></p>" ,
     
      "<p>Close the app and run it again. Does the dialog appear? (it doesnt).</p>" ,
     
      "<p>Now, close the app and delete from the phone. Rerun - and the dialog will reappear. Android is persisting the permission request/response, only displaying once.</p>" ,
     
      "<p>This is the presenter at this stage (we still are not acquiring the current location)</p>" ,
     
      "<h2>PlacemarkPresenter</h2>" ,
     
      "<pre><code>package org.wit.placemark.views.placemark" ,
     
      "" ,
     
      "import android.annotation.SuppressLint" ,
     
      "import android.content.Intent" ,
     
      "import com.google.android.gms.location.FusedLocationProviderClient" ,
     
      "import com.google.android.gms.location.LocationServices" ,
     
      "import com.google.android.gms.maps.CameraUpdateFactory" ,
     
      "import com.google.android.gms.maps.GoogleMap" ,
     
      "import com.google.android.gms.maps.model.LatLng" ,
     
      "import com.google.android.gms.maps.model.MarkerOptions" ,
     
      "import kotlinx.android.synthetic.main.activity_maps.*" ,
     
      "import org.wit.placemark.helpers.checkLocationPermissions" ,
     
      "import org.wit.placemark.helpers.isPermissionGranted" ,
     
      "import org.wit.placemark.helpers.showImagePicker" ,
     
      "import org.wit.placemark.models.Location" ,
     
      "import org.wit.placemark.models.PlacemarkModel" ,
     
      "import org.wit.placemark.views.*" ,
     
      "" ,
     
      "class PlacemarkPresenter(view: BaseView) : BasePresenter(view) {" ,
     
      "" ,
     
      "  var map: GoogleMap? = null" ,
     
      "  var locationService: FusedLocationProviderClient = LocationServices.getFusedLocationProviderClient(view)" ,
     
      "" ,
     
      "  var placemark = PlacemarkModel()" ,
     
      "  var defaultLocation = Location(52.245696, -7.139102, 15f)" ,
     
      "  var edit = false;" ,
     
      "" ,
     
      "  init {" ,
     
      "    if (view.intent.hasExtra(&quot;placemark_edit&quot;)) {" ,
     
      "      edit = true" ,
     
      "      placemark = view.intent.extras.getParcelable&lt;PlacemarkModel&gt;(&quot;placemark_edit&quot;)" ,
     
      "      view.showPlacemark(placemark)" ,
     
      "    } else {" ,
     
      "      if (checkLocationPermissions(view)) {" ,
     
      "        // todo get the current location" ,
     
      "      }" ,
     
      "    }" ,
     
      "  }" ,
     
      "" ,
     
      "  fun doConfigureMap(m: GoogleMap) {" ,
     
      "    map = m" ,
     
      "    locationUpdate(placemark.lat, placemark.lng)" ,
     
      "  }" ,
     
      "" ,
     
      "  fun locationUpdate(lat: Double, lng: Double) {" ,
     
      "    placemark.lat = lat" ,
     
      "    placemark.lng = lng" ,
     
      "    placemark.zoom = 15f" ,
     
      "    map?.clear()" ,
     
      "    map?.uiSettings?.setZoomControlsEnabled(true)" ,
     
      "    val options = MarkerOptions().title(placemark.title).position(LatLng(placemark.lat, placemark.lng))" ,
     
      "    map?.addMarker(options)" ,
     
      "    map?.moveCamera(CameraUpdateFactory.newLatLngZoom(LatLng(placemark.lat, placemark.lng), placemark.zoom))" ,
     
      "    view?.showPlacemark(placemark)" ,
     
      "  }" ,
     
      "" ,
     
      "  override fun doRequestPermissionsResult(requestCode: Int, permissions: Array&lt;String&gt;, grantResults: IntArray) {" ,
     
      "    if (isPermissionGranted(requestCode, grantResults)) {" ,
     
      "      // todo get the current location" ,
     
      "    } else {" ,
     
      "      // permissions denied, so use the default location" ,
     
      "      locationUpdate(defaultLocation.lat, defaultLocation.lng)" ,
     
      "    }" ,
     
      "  }" ,
     
      "" ,
     
      "  fun doAddOrSave(title: String, description: String) {" ,
     
      "    placemark.title = title" ,
     
      "    placemark.description = description" ,
     
      "    if (edit) {" ,
     
      "      app.placemarks.update(placemark)" ,
     
      "    } else {" ,
     
      "      app.placemarks.create(placemark)" ,
     
      "    }" ,
     
      "    view?.finish()" ,
     
      "  }" ,
     
      "" ,
     
      "  fun doCancel() {" ,
     
      "    view?.finish()" ,
     
      "  }" ,
     
      "" ,
     
      "  fun doDelete() {" ,
     
      "    app.placemarks.delete(placemark)" ,
     
      "    view?.finish()" ,
     
      "  }" ,
     
      "" ,
     
      "  fun doSelectImage() {" ,
     
      "    view?.let {" ,
     
      "      showImagePicker(view!!, IMAGE_REQUEST)" ,
     
      "    }" ,
     
      "  }" ,
     
      "" ,
     
      "  fun doSetLocation() {" ,
     
      "    if (edit == false) {" ,
     
      "      view?.navigateTo(VIEW.LOCATION, LOCATION_REQUEST, &quot;location&quot;, defaultLocation)" ,
     
      "    } else {" ,
     
      "      view?.navigateTo(VIEW.LOCATION, LOCATION_REQUEST, &quot;location&quot;, Location(placemark.lat, placemark.lng, placemark.zoom))" ,
     
      "    }" ,
     
      "  }" ,
     
      "" ,
     
      "  override fun doActivityResult(requestCode: Int, resultCode: Int, data: Intent) {" ,
     
      "    when (requestCode) {" ,
     
      "      IMAGE_REQUEST -&gt; {" ,
     
      "        placemark.image = data.data.toString()" ,
     
      "        view?.showPlacemark(placemark)" ,
     
      "      }" ,
     
      "      LOCATION_REQUEST -&gt; {" ,
     
      "        val location = data.extras.getParcelable&lt;Location&gt;(&quot;location&quot;)" ,
     
      "        placemark.lat = location.lat" ,
     
      "        placemark.lng = location.lng" ,
     
      "        placemark.zoom = location.zoom" ,
     
      "        locationUpdate(placemark.lat, placemark.lng)" ,
     
      "      }" ,
     
      "    }" ,
     
      "  }" ,
     
      "}</code></pre>" ,
     
      "" 
     
    ]
    },
  
    {
    "title": " Requesting the Current Location",
    "shortTitle": "07",
    "content": [
     
      "<h1>Requesting the Current Location</h1>" ,
     
      "<p>Introduce this new method into the presenter:</p>" ,
     
      "<pre><code>  @SuppressLint(&quot;MissingPermission&quot;)" ,
     
      "  fun doSetCurrentLocation() {" ,
     
      "    locationService.lastLocation.addOnSuccessListener {" ,
     
      "      locationUpdate(it.latitude, it.longitude)" ,
     
      "    }" ,
     
      "  }</code></pre>" ,
     
      "<p>In the init block, we can now call this method:</p>" ,
     
      "<pre><code>      if (checkLocationPermissions(view)) {" ,
     
      "        doSetCurrentLocation()" ,
     
      "      }</code></pre>" ,
     
      "<p>Finally, we can complete the permissions response:</p>" ,
     
      "<pre><code>  override fun doRequestPermissionsResult(requestCode: Int, permissions: Array&lt;String&gt;, grantResults: IntArray) {" ,
     
      "    if (isPermissionGranted(requestCode, grantResults)) {" ,
     
      "      doSetCurrentLocation()" ,
     
      "    } else {" ,
     
      "      locationUpdate(defaultLocation.lat, defaultLocation.lng)" ,
     
      "    }" ,
     
      "  }</code></pre>" ,
     
      "<p>Also, our doSetLocation can be simplified:</p>" ,
     
      "<pre><code>  fun doSetLocation() {" ,
     
      "    view?.navigateTo(VIEW.LOCATION, LOCATION_REQUEST, &quot;location&quot;, Location(placemark.lat, placemark.lng, placemark.zoom))" ,
     
      "  }</code></pre>" ,
     
      "<p>Testing this in the emulator, you do have the ability to set the simulator location:</p>" ,
     
      "<p><img src='img/02x.png' alt=''></p>" ,
     
      "<p>However, if you change the location it might take a few minutes before it percolates into the location provider.</p>" ,
     
      "<p>This is the complete Presenter at this stage:</p>" ,
     
      "<pre><code>package org.wit.placemark.views.placemark" ,
     
      "" ,
     
      "import android.annotation.SuppressLint" ,
     
      "import android.content.Intent" ,
     
      "import com.google.android.gms.location.FusedLocationProviderClient" ,
     
      "import com.google.android.gms.location.LocationServices" ,
     
      "import com.google.android.gms.maps.CameraUpdateFactory" ,
     
      "import com.google.android.gms.maps.GoogleMap" ,
     
      "import com.google.android.gms.maps.model.LatLng" ,
     
      "import com.google.android.gms.maps.model.MarkerOptions" ,
     
      "import org.wit.placemark.helpers.checkLocationPermissions" ,
     
      "import org.wit.placemark.helpers.isPermissionGranted" ,
     
      "import org.wit.placemark.helpers.showImagePicker" ,
     
      "import org.wit.placemark.models.Location" ,
     
      "import org.wit.placemark.models.PlacemarkModel" ,
     
      "import org.wit.placemark.views.*" ,
     
      "" ,
     
      "class PlacemarkPresenter(view: BaseView) : BasePresenter(view) {" ,
     
      "" ,
     
      "  var map: GoogleMap? = null" ,
     
      "  var placemark = PlacemarkModel()" ,
     
      "  var defaultLocation = Location(52.245696, -7.139102, 15f)" ,
     
      "  var edit = false;" ,
     
      "  var locationService: FusedLocationProviderClient = LocationServices.getFusedLocationProviderClient(view)" ,
     
      "" ,
     
      "  init {" ,
     
      "    if (view.intent.hasExtra(&quot;placemark_edit&quot;)) {" ,
     
      "      edit = true" ,
     
      "      placemark = view.intent.extras.getParcelable&lt;PlacemarkModel&gt;(&quot;placemark_edit&quot;)" ,
     
      "      view.showPlacemark(placemark)" ,
     
      "    } else {" ,
     
      "      if (checkLocationPermissions(view)) {" ,
     
      "        doSetCurrentLocation()" ,
     
      "      }" ,
     
      "    }" ,
     
      "  }" ,
     
      "" ,
     
      "  @SuppressLint(&quot;MissingPermission&quot;)" ,
     
      "  fun doSetCurrentLocation() {" ,
     
      "    locationService.lastLocation.addOnSuccessListener {" ,
     
      "      locationUpdate(it.latitude, it.longitude)" ,
     
      "    }" ,
     
      "  }" ,
     
      "" ,
     
      "  override fun doRequestPermissionsResult(requestCode: Int, permissions: Array&lt;String&gt;, grantResults: IntArray) {" ,
     
      "    if (isPermissionGranted(requestCode, grantResults)) {" ,
     
      "      doSetCurrentLocation()" ,
     
      "    } else {" ,
     
      "      locationUpdate(defaultLocation.lat, defaultLocation.lng)" ,
     
      "    }" ,
     
      "  }" ,
     
      "" ,
     
      "  fun doConfigureMap(m: GoogleMap) {" ,
     
      "    map = m" ,
     
      "    locationUpdate(placemark.lat, placemark.lng)" ,
     
      "  }" ,
     
      "" ,
     
      "  fun locationUpdate(lat: Double, lng: Double) {" ,
     
      "    placemark.lat = lat" ,
     
      "    placemark.lng = lng" ,
     
      "    placemark.zoom = 15f" ,
     
      "    map?.clear()" ,
     
      "    map?.uiSettings?.setZoomControlsEnabled(true)" ,
     
      "    val options = MarkerOptions().title(placemark.title).position(LatLng(placemark.lat, placemark.lng))" ,
     
      "    map?.addMarker(options)" ,
     
      "    map?.moveCamera(CameraUpdateFactory.newLatLngZoom(LatLng(placemark.lat, placemark.lng), placemark.zoom))" ,
     
      "    view?.showPlacemark(placemark)" ,
     
      "  }" ,
     
      "" ,
     
      "" ,
     
      "  fun doAddOrSave(title: String, description: String) {" ,
     
      "    placemark.title = title" ,
     
      "    placemark.description = description" ,
     
      "    if (edit) {" ,
     
      "      app.placemarks.update(placemark)" ,
     
      "    } else {" ,
     
      "      app.placemarks.create(placemark)" ,
     
      "    }" ,
     
      "    view?.finish()" ,
     
      "  }" ,
     
      "" ,
     
      "  fun doCancel() {" ,
     
      "    view?.finish()" ,
     
      "  }" ,
     
      "" ,
     
      "  fun doDelete() {" ,
     
      "    app.placemarks.delete(placemark)" ,
     
      "    view?.finish()" ,
     
      "  }" ,
     
      "" ,
     
      "  fun doSelectImage() {" ,
     
      "    view?.let {" ,
     
      "      showImagePicker(view!!, IMAGE_REQUEST)" ,
     
      "    }" ,
     
      "  }" ,
     
      "" ,
     
      "  fun doSetLocation() {" ,
     
      "    view?.navigateTo(VIEW.LOCATION, LOCATION_REQUEST, &quot;location&quot;, Location(placemark.lat, placemark.lng, placemark.zoom))" ,
     
      "  }" ,
     
      "" ,
     
      "  override fun doActivityResult(requestCode: Int, resultCode: Int, data: Intent) {" ,
     
      "    when (requestCode) {" ,
     
      "      IMAGE_REQUEST -&gt; {" ,
     
      "        placemark.image = data.data.toString()" ,
     
      "        view?.showPlacemark(placemark)" ,
     
      "      }" ,
     
      "      LOCATION_REQUEST -&gt; {" ,
     
      "        val location = data.extras.getParcelable&lt;Location&gt;(&quot;location&quot;)" ,
     
      "        placemark.lat = location.lat" ,
     
      "        placemark.lng = location.lng" ,
     
      "        placemark.zoom = location.zoom" ,
     
      "        locationUpdate(placemark.lat, placemark.lng)" ,
     
      "      }" ,
     
      "    }" ,
     
      "  }" ,
     
      "}</code></pre>" ,
     
      "" 
     
    ]
    },
  
    {
    "title": "Solution",
    "shortTitle": "Exercises",
    "content": [
     
      "<h1>Solution</h1>" ,
     
      "<p>Placemark application so far:</p>" ,
     
      "<ul>" ,
     
      "<li><a href='archives/archive.zip'>archive.zip</a></li>" ,
     
      "</ul>" ,
     
      "<h2>Exercises</h2>" ,
     
      "<p>Look at the following version of the placemark activity:</p>" ,
     
      "<p><img src='img/03x.png' alt=''></p>" ,
     
      "<h2>Exercise 1:</h2>" ,
     
      "<p>As in the above, show the latitude/longitude of the placemark on the view.</p>" ,
     
      "<h2>Exercise 2:</h2>" ,
     
      "<p>Notice in the above that the &#39;Set Location&#39; button has been removed. If the map widget itself is clicked, then we will launch the EditLocation activity. Implement this capability</p>" ,
     
      "" 
     
    ]
    }
  
  ]
  }

