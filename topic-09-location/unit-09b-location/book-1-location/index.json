


  {
  
  
    "properties" : {},
  
  "type" : "lab",
  "title" : "Lab-09a Location",
  "img" : "img/main.png",
  "videoid" : "none",
  "objectives" : "<p>When creating a new placemark, use the current location as the starting point.</p>",
  "folder" : "book-1-location",
  "link" : "index.html",
  "los": [
   ]
,
  "chapters" : [
  
    {
    "title": "# Objectives",
    "shortTitle": "Lab-09a Location",
    "contentMd" : "# Objectives\n\nWhen creating a new placemark, use the current location as the starting point.\n"
    },
  
    {
    "title": "# Solutions",
    "shortTitle": "01",
    "contentMd" : "# Solutions\n\n# Exercise 1\n\nUsing this lab as a guide, convert PlacemarkMapView/Presenter to use the PlacemarkView/Presenter base classes\n\n## Solution\n\n## PlacemarkMapPresenter\n\n~~~\npackage org.wit.placemark.views.map\n\nimport com.google.android.gms.maps.CameraUpdateFactory\nimport com.google.android.gms.maps.GoogleMap\nimport com.google.android.gms.maps.model.LatLng\nimport com.google.android.gms.maps.model.Marker\nimport com.google.android.gms.maps.model.MarkerOptions\nimport org.wit.placemark.models.PlacemarkModel\nimport org.wit.placemark.views.BasePresenter\nimport org.wit.placemark.views.BaseView\n\nclass PlacemarkMapPresenter(view: BaseView) : BasePresenter(view) {\n\n  fun doPopulateMap(map: GoogleMap, placemarks: List<PlacemarkModel>) {\n    map.uiSettings.setZoomControlsEnabled(true)\n    placemarks.forEach {\n      val loc = LatLng(it.lat, it.lng)\n      val options = MarkerOptions().title(it.title).position(loc)\n      map.addMarker(options).tag = it.id\n      map.moveCamera(CameraUpdateFactory.newLatLngZoom(loc, it.zoom))\n    }\n  }\n\n  fun doMarkerSelected(marker: Marker) {\n    val tag = marker.tag as Long\n    val placemark = app.placemarks.findById(tag)\n    if (placemark != null) view?.showPlacemark(placemark)\n\n  }\n\n  fun loadPlacemarks() {\n    view?.showPlacemarks(app.placemarks.findAll())\n  }\n}\n~~~\n\n## PlacemarkMapView\n\n~~~\npackage org.wit.placemark.views.map\n\nimport android.os.Bundle\nimport com.google.android.gms.maps.GoogleMap\nimport com.google.android.gms.maps.model.Marker\nimport org.wit.placemark.R\nimport kotlinx.android.synthetic.main.activity_placemark_map.*\nimport kotlinx.android.synthetic.main.content_placemark_map.*\nimport org.wit.placemark.helpers.readImageFromPath\nimport org.wit.placemark.models.PlacemarkModel\nimport org.wit.placemark.views.BaseView\n\nclass PlacemarkMapView : BaseView(), GoogleMap.OnMarkerClickListener {\n\n  lateinit var presenter: PlacemarkMapPresenter\n  lateinit var map : GoogleMap\n\n  override fun onCreate(savedInstanceState: Bundle?) {\n    super.onCreate(savedInstanceState)\n    setContentView(R.layout.activity_placemark_map)\n    super.init(toolbarMaps)\n\n    presenter = initPresenter (PlacemarkMapPresenter(this)) as PlacemarkMapPresenter\n\n    mapView.onCreate(savedInstanceState);\n    mapView.getMapAsync {\n      map = it\n      map.setOnMarkerClickListener(this)\n      presenter.loadPlacemarks()\n    }\n  }\n\n  override fun showPlacemark(placemark: PlacemarkModel) {\n    currentTitle.text = placemark.title\n    currentDescription.text = placemark.description\n    imageView.setImageBitmap(readImageFromPath(this, placemark.image))\n  }\n\n  override fun showPlacemarks(placemarks: List<PlacemarkModel>) {\n    presenter.doPopulateMap(map, placemarks)\n  }\n\n  override fun onMarkerClick(marker: Marker): Boolean {\n    presenter.doMarkerSelected(marker)\n    return true\n  }\n\n  override fun onDestroy() {\n    super.onDestroy()\n    mapView.onDestroy()\n  }\n\n  override fun onLowMemory() {\n    super.onLowMemory()\n    mapView.onLowMemory()\n  }\n\n  override fun onPause() {\n    super.onPause()\n    mapView.onPause()\n  }\n\n  override fun onResume() {\n    super.onResume()\n    mapView.onResume()\n  }\n\n  override fun onSaveInstanceState(outState: Bundle?) {\n    super.onSaveInstanceState(outState)\n    mapView.onSaveInstanceState(outState)\n  }\n}\n~~~"
    },
  
    {
    "title": "# Solutions",
    "shortTitle": "02",
    "contentMd" : "# Solutions\n\n# Exercise 2\n\nAlso convert EditLoctionView/Presenter to use the base classes\n\n## Solution\n\n## EditLocationPresenter\n\n~~~\nimport com.google.android.gms.maps.model.MarkerOptions\nimport org.wit.placemark.models.Location\nimport org.wit.placemark.views.BasePresenter\nimport org.wit.placemark.views.BaseView\n\nclass EditLocationPresenter(view: BaseView) : BasePresenter(view) {\n\n  var location = Location()\n\n  init {\n    location = view.intent.extras.getParcelable<Location>(\"location\")\n  }\n\n  fun doConfigureMap(map: GoogleMap) {\n    val loc = LatLng(location.lat, location.lng)\n    val options = MarkerOptions()\n        .title(\"Placemark\")\n        .snippet(\"GPS : \" + loc.toString())\n        .draggable(true)\n        .position(loc)\n    map.addMarker(options)\n    map.moveCamera(CameraUpdateFactory.newLatLngZoom(loc, location.zoom))\n  }\n\n  fun doUpdateLocation(lat: Double, lng: Double) {\n    location.lat = lat\n    location.lng = lng\n  }\n\n  fun doSave() {\n    val resultIntent = Intent()\n    resultIntent.putExtra(\"location\", location)\n    view?.setResult(0, resultIntent)\n    view?.finish()\n  }\n\n  fun doUpdateMarker(marker: Marker) {\n    val loc = LatLng(location.lat, location.lng)\n    marker.setSnippet(\"GPS : \" + loc.toString())\n  }\n}\n~~~\n\n## EditLocationView\n\n~~~\npackage org.wit.placemark.views.editlocation\n\nimport android.os.Bundle\nimport com.google.android.gms.maps.GoogleMap\nimport com.google.android.gms.maps.SupportMapFragment\nimport com.google.android.gms.maps.model.Marker\nimport org.wit.placemark.R\nimport org.wit.placemark.views.BaseView\n\nclass EditLocationView : BaseView(), GoogleMap.OnMarkerDragListener, GoogleMap.OnMarkerClickListener {\n\n  lateinit var map: GoogleMap\n  lateinit var presenter: EditLocationPresenter\n\n  override fun onCreate(savedInstanceState: Bundle?) {\n    super.onCreate(savedInstanceState)\n    setContentView(R.layout.activity_maps)\n    val mapFragment = supportFragmentManager.findFragmentById(R.id.map) as SupportMapFragment\n    presenter = EditLocationPresenter(this)\n    mapFragment.getMapAsync {\n      map = it\n      map.setOnMarkerDragListener(this)\n      map.setOnMarkerClickListener(this)\n      presenter.doConfigureMap(map)\n    }\n  }\n\n  override fun onMarkerDragStart(marker: Marker) {}\n\n  override fun onMarkerDrag(marker: Marker) {}\n\n  override fun onMarkerDragEnd(marker: Marker) {\n    presenter.doUpdateLocation(marker.position.latitude, marker.position.longitude)\n  }\n\n  override fun onBackPressed() {\n    presenter.doSave()\n  }\n\n  override fun onMarkerClick(marker: Marker): Boolean {\n    presenter.doUpdateMarker(marker)\n    return false\n  }\n}\n~~~"
    },
  
    {
    "title": "# MapView",
    "shortTitle": "03",
    "contentMd" : "# MapView\n\nUsing the Layout Editor, restructure activity_placemark to contain a MapView:\n\n\n![](img/03.png)\n\nThis is the layout file:\n\n## activity_placemark.xml\n\n~~~\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<android.support.constraint.ConstraintLayout\n  xmlns:android=\"http://schemas.android.com/apk/res/android\"\n  xmlns:app=\"http://schemas.android.com/apk/res-auto\"\n  xmlns:tools=\"http://schemas.android.com/tools\"\n  android:layout_width=\"match_parent\"\n  android:layout_height=\"match_parent\"\n  tools:context=\"org.wit.placemark.views.placemark.PlacemarkView\">\n\n  <android.support.design.widget.AppBarLayout\n    android:id=\"@+id/appBarLayout\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"wrap_content\"\n    android:background=\"@color/colorAccent\"\n    android:fitsSystemWindows=\"true\"\n    app:elevation=\"0dip\"\n    app:theme=\"@style/ThemeOverlay.AppCompat.Dark.ActionBar\">\n\n    <android.support.v7.widget.Toolbar\n      android:id=\"@+id/toolbarAdd\"\n      android:layout_width=\"match_parent\"\n      android:layout_height=\"wrap_content\"\n      app:titleTextColor=\"@color/colorPrimary\" />\n\n  </android.support.design.widget.AppBarLayout>\n\n  <android.support.constraint.ConstraintLayout\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"600dp\"\n    android:layout_marginEnd=\"8dp\"\n    android:layout_marginStart=\"8dp\"\n    app:layout_constraintEnd_toEndOf=\"parent\"\n    app:layout_constraintStart_toStartOf=\"parent\"\n    app:layout_constraintTop_toTopOf=\"parent\">\n\n    <EditText\n      android:id=\"@+id/placemarkTitle\"\n      android:layout_width=\"365dp\"\n      android:layout_height=\"wrap_content\"\n      android:layout_marginEnd=\"8dp\"\n      android:layout_marginStart=\"8dp\"\n      android:layout_marginTop=\"64dp\"\n      android:ems=\"10\"\n      android:hint=\"@string/hint_placemarkTitle\"\n      android:inputType=\"text\"\n      app:layout_constraintEnd_toEndOf=\"parent\"\n      app:layout_constraintHorizontal_bias=\"0.503\"\n      app:layout_constraintStart_toStartOf=\"parent\"\n      app:layout_constraintTop_toTopOf=\"parent\" />\n\n    <EditText\n      android:id=\"@+id/description\"\n      android:layout_width=\"365dp\"\n      android:layout_height=\"wrap_content\"\n      android:layout_marginEnd=\"8dp\"\n      android:layout_marginStart=\"8dp\"\n      android:layout_marginTop=\"8dp\"\n      android:ems=\"10\"\n      android:hint=\"@string/hint_placemarkDescription\"\n      android:inputType=\"textPersonName\"\n      app:layout_constraintEnd_toEndOf=\"parent\"\n      app:layout_constraintStart_toStartOf=\"parent\"\n      app:layout_constraintTop_toBottomOf=\"@+id/placemarkTitle\" />\n\n    <Button\n      android:id=\"@+id/chooseImage\"\n      android:layout_width=\"0dp\"\n      android:layout_height=\"wrap_content\"\n      android:layout_marginStart=\"8dp\"\n      android:layout_marginEnd=\"8dp\"\n      android:text=\"@string/button_addImage\"\n      app:layout_constraintEnd_toEndOf=\"parent\"\n      app:layout_constraintStart_toStartOf=\"parent\"\n      app:layout_constraintTop_toBottomOf=\"@+id/description\" />\n\n    <Button\n      android:id=\"@+id/placemarkLocation\"\n      android:layout_width=\"0dp\"\n      android:layout_height=\"wrap_content\"\n      android:layout_marginStart=\"8dp\"\n      android:layout_marginTop=\"8dp\"\n      android:layout_marginEnd=\"8dp\"\n      android:text=\"@string/button_location\"\n      app:layout_constraintEnd_toEndOf=\"parent\"\n      app:layout_constraintStart_toStartOf=\"parent\"\n      app:layout_constraintTop_toBottomOf=\"@+id/placemarkImage\" />\n\n    <ImageView\n      android:id=\"@+id/placemarkImage\"\n      android:layout_width=\"355dp\"\n      android:layout_height=\"139dp\"\n      android:layout_marginStart=\"8dp\"\n      android:layout_marginTop=\"16dp\"\n      android:layout_marginEnd=\"8dp\"\n      app:layout_constraintEnd_toEndOf=\"parent\"\n      app:layout_constraintHorizontal_bias=\"0.0\"\n      app:layout_constraintStart_toStartOf=\"parent\"\n      app:layout_constraintTop_toBottomOf=\"@+id/chooseImage\"\n      app:srcCompat=\"@drawable/ic_launcher_background\" />\n\n    <com.google.android.gms.maps.MapView\n      android:id=\"@+id/mapView\"\n      android:layout_width=\"0dp\"\n      android:layout_height=\"163dp\"\n      android:layout_marginStart=\"8dp\"\n      android:layout_marginTop=\"8dp\"\n      android:layout_marginEnd=\"8dp\"\n      android:layout_marginBottom=\"8dp\"\n      app:layout_constraintBottom_toBottomOf=\"parent\"\n      app:layout_constraintEnd_toEndOf=\"parent\"\n      app:layout_constraintStart_toStartOf=\"parent\"\n      app:layout_constraintTop_toBottomOf=\"@+id/placemarkLocation\" />\n\n  </android.support.constraint.ConstraintLayout>\n\n</android.support.constraint.ConstraintLayout>\n~~~\n\n"
    },
  
    {
    "title": "## PlacemarkView",
    "shortTitle": "04",
    "contentMd" : "## PlacemarkView\n\nWe should be familiar with manually managing a MapView component, which involves:\n\n- declaring a GoogleMap reference\n- initialising the mapView widget + using it to acquire the googleMap reference\n- manage the mapView lifecycle\n\n\n~~~\n...\nclass PlacemarkView : BaseView(), AnkoLogger {\n  ...\n  lateinit var map: GoogleMap\n  ...\n\n  override fun onCreate(savedInstanceState: Bundle?) {\n    ...\n    mapView.onCreate(savedInstanceState);\n    mapView.getMapAsync {\n      map = it\n      presenter.doConfigureMap(map)\n    }\n  }\n\n  ...\n\n  override fun onDestroy() {\n    super.onDestroy()\n    mapView.onDestroy()\n  }\n\n  override fun onLowMemory() {\n    super.onLowMemory()\n    mapView.onLowMemory()\n  }\n\n  override fun onPause() {\n    super.onPause()\n    mapView.onPause()\n  }\n\n  override fun onResume() {\n    super.onResume()\n    mapView.onResume()\n  }\n\n  override fun onSaveInstanceState(outState: Bundle?) {\n    super.onSaveInstanceState(outState)\n    mapView.onSaveInstanceState(outState)\n  }\n}\n~~~\n\n\n~~~\nclass PlacemarkPresenter(view: BaseView) : BasePresenter(view) {\n\n  var map: GoogleMap? = null\n\n\n  fun doConfigureMap(m: GoogleMap) {\n    map = m\n    locationUpdate(placemark.lat, placemark.lng)\n  }\n\n  fun locationUpdate(lat: Double, lng: Double) {\n    placemark.lat = lat\n    placemark.lng = lng\n    placemark.zoom = 15f\n    map?.clear()\n    map?.uiSettings?.setZoomControlsEnabled(true)\n    val options = MarkerOptions().title(placemark.title).position(LatLng(placemark.lat, placemark.lng))\n    map?.addMarker(options)\n    map?.moveCamera(CameraUpdateFactory.newLatLngZoom(LatLng(placemark.lat, placemark.lng), placemark.zoom))\n    view?.showPlacemark(placemark)\n  }\n~~~\n\nThis will ensure that the marker is placed on the map correctly - if the placemark already exists. For a new placemark, we would need to take special measures:\n\nIn the init block, if we are not in edit mode, set the location to the default:\n\n~~~\n  init {\n    if (view.intent.hasExtra(\"placemark_edit\")) {\n      edit = true\n      placemark = view.intent.extras.getParcelable<PlacemarkModel>(\"placemark_edit\")\n      view.showPlacemark(placemark)\n    } else {\n      placemark.lat = defaultLocation.lat\n      placemark.lng = defaultLocation.lng\n    }\n  }\n~~~\n\nAlso, when the user has edited the location - make sure to also update the position:\n\n~~~\n  override fun doActivityResult(requestCode: Int, resultCode: Int, data: Intent) {\n    ...\n    ...\n      LOCATION_REQUEST -> {\n        val location = data.extras.getParcelable<Location>(\"location\")\n        placemark.lat = location.lat\n        placemark.lng = location.lng\n        placemark.zoom = location.zoom\n        locationUpdate(placemark.lat, placemark.lng)\n      }\n    }\n  }\n~~~  \n\n\n\nThis is the complete class at this stage:\n\n## PlacemarkPresenter\n\n~~~\nclass PlacemarkPresenter(view: BaseView) : BasePresenter(view) {\n\n  var map: GoogleMap? = null\n  var placemark = PlacemarkModel()\n  var defaultLocation = Location(52.245696, -7.139102, 15f)\n  var edit = false;\n\n  init {\n    if (view.intent.hasExtra(\"placemark_edit\")) {\n      edit = true\n      placemark = view.intent.extras.getParcelable<PlacemarkModel>(\"placemark_edit\")\n      view.showPlacemark(placemark)\n    } else {\n      placemark.lat = defaultLocation.lat\n      placemark.lng = defaultLocation.lng\n    }\n  }\n\n  fun doConfigureMap(m: GoogleMap) {\n    map = m\n    locationUpdate(placemark.lat, placemark.lng)\n  }\n\n  fun locationUpdate(lat: Double, lng: Double) {\n    placemark.lat = lat\n    placemark.lng = lng\n    placemark.zoom = 15f\n    map?.clear()\n    map?.uiSettings?.setZoomControlsEnabled(true)\n    val options = MarkerOptions().title(placemark.title).position(LatLng(placemark.lat, placemark.lng))\n    map?.addMarker(options)\n    map?.moveCamera(CameraUpdateFactory.newLatLngZoom(LatLng(placemark.lat, placemark.lng), placemark.zoom))\n    view?.showPlacemark(placemark)\n  }\n\n  fun doAddOrSave(title: String, description: String) {\n    placemark.title = title\n    placemark.description = description\n    if (edit) {\n      app.placemarks.update(placemark)\n    } else {\n      app.placemarks.create(placemark)\n    }\n    view?.finish()\n  }\n\n  fun doCancel() {\n    view?.finish()\n  }\n\n  fun doDelete() {\n    app.placemarks.delete(placemark)\n    view?.finish()\n  }\n\n  fun doSelectImage() {\n     view?.let{\n       showImagePicker(view!!, IMAGE_REQUEST)\n     }\n  }\n\n  fun doSetLocation() {\n    if (edit == false) {\n      view?.navigateTo(VIEW.LOCATION, LOCATION_REQUEST, \"location\", defaultLocation)\n    } else {\n      view?.navigateTo(VIEW.LOCATION, LOCATION_REQUEST, \"location\", Location(placemark.lat, placemark.lng, placemark.zoom))\n    }\n  }\n\n  override fun doActivityResult(requestCode: Int, resultCode: Int, data: Intent) {\n    when (requestCode) {\n      IMAGE_REQUEST -> {\n        placemark.image = data.data.toString()\n        view?.showPlacemark(placemark)\n      }\n      LOCATION_REQUEST -> {\n        val location = data.extras.getParcelable<Location>(\"location\")\n        placemark.lat = location.lat\n        placemark.lng = location.lng\n        placemark.zoom = location.zoom\n        locationUpdate(placemark.lat, placemark.lng)\n      }\n    }\n  }\n}\n~~~\n\nIt still does not determine the actual current location.\n\n"
    },
  
    {
    "title": "# Location Libraries",
    "shortTitle": "05",
    "contentMd" : "# Location Libraries\n\nIn order to determine the current location, we need the google play service location libraries:\n\n## gradle\n\n~~~\n...\n  implementation \"com.google.android.gms:play-services-location:16.0.0\"\n...  \n~~~\n\nWe also need this new helper class:\n\n\n## LocationHelpers\n\n~~~\npackage org.wit.placemark.helpers\n\nimport android.Manifest\nimport android.app.Activity\nimport android.content.pm.PackageManager\nimport android.support.v4.app.ActivityCompat\nimport android.util.Log\n\nval REQUEST_PERMISSIONS_REQUEST_CODE = 34\n\nfun checkLocationPermissions(activity: Activity) : Boolean {\n  if (ActivityCompat.checkSelfPermission(activity, Manifest.permission.ACCESS_FINE_LOCATION) == PackageManager.PERMISSION_GRANTED) {\n    return true\n  }\n  else {\n    ActivityCompat.requestPermissions(activity, arrayOf(Manifest.permission.ACCESS_FINE_LOCATION), REQUEST_PERMISSIONS_REQUEST_CODE)\n    return false\n  }\n}\n\nfun isPermissionGranted(code: Int, grantResults: IntArray): Boolean {\n  var permissionGranted = false;\n  if (code == REQUEST_PERMISSIONS_REQUEST_CODE) {\n    when {\n      grantResults.isEmpty() -> Log.i(\"Location\", \"User interaction was cancelled.\")\n      (grantResults[0] == PackageManager.PERMISSION_GRANTED) -> {\n        permissionGranted = true\n        Log.i(\"Location\", \"Permission Granted.\")\n      }\n      else -> Log.i(\"Location\", \"Permission Denied.\")\n    }\n  }\n  return permissionGranted\n}\n~~~\n\n"
    },
  
    {
    "title": "# Location Permissions",
    "shortTitle": "06",
    "contentMd" : "# Location Permissions\n\nIf we wish to access the devices current location, we will need to prompt the user to grant this permission - and be able to proceed in an orderly manner if this permission is denied.\n\nFirst, in the presenter, acquire a reference to the location provider client:\n\n~~~\n  var locationService: FusedLocationProviderClient = LocationServices.getFusedLocationProviderClient(view)\n~~~\n\nTh init block is modified to check to see if permission is requires (or already has been granted):\n\n~~~\n  init {\n    if (view.intent.hasExtra(\"placemark_edit\")) {\n      edit = true\n      placemark = view.intent.extras.getParcelable<PlacemarkModel>(\"placemark_edit\")\n      view.showPlacemark(placemark)\n    } else {\n      if (checkLocationPermissions(view)) {\n        // todo get the current location\n      }\n    }\n  }\n~~~\n\nThis method will be called with the users response to the permissions dialog:\n\n~~~\n  override fun doRequestPermissionsResult(requestCode: Int, permissions: Array<String>, grantResults: IntArray) {\n    if (isPermissionGranted(requestCode, grantResults)) {\n      // todo get the current location\n    } else {\n      // permissions denied, so use the default location\n      locationUpdate(defaultLocation.lat, defaultLocation.lng)\n    }\n  }\n~~~\n\n\nRun the application now - when you create a new placemark you should see this dialog:\n\n![](img/01x.png)\n\nClose the app and run it again. Does the dialog appear? (it doesnt).\n\nNow, close the app and delete from the phone. Rerun - and the dialog will reappear. Android is persisting the permission request/response, only displaying once.\n\nThis is the presenter at this stage (we still are not acquiring the current location)\n\n## PlacemarkPresenter\n\n~~~\npackage org.wit.placemark.views.placemark\n\nimport android.annotation.SuppressLint\nimport android.content.Intent\nimport com.google.android.gms.location.FusedLocationProviderClient\nimport com.google.android.gms.location.LocationServices\nimport com.google.android.gms.maps.CameraUpdateFactory\nimport com.google.android.gms.maps.GoogleMap\nimport com.google.android.gms.maps.model.LatLng\nimport com.google.android.gms.maps.model.MarkerOptions\nimport kotlinx.android.synthetic.main.activity_maps.*\nimport org.wit.placemark.helpers.checkLocationPermissions\nimport org.wit.placemark.helpers.isPermissionGranted\nimport org.wit.placemark.helpers.showImagePicker\nimport org.wit.placemark.models.Location\nimport org.wit.placemark.models.PlacemarkModel\nimport org.wit.placemark.views.*\n\nclass PlacemarkPresenter(view: BaseView) : BasePresenter(view) {\n\n  var map: GoogleMap? = null\n  var locationService: FusedLocationProviderClient = LocationServices.getFusedLocationProviderClient(view)\n\n  var placemark = PlacemarkModel()\n  var defaultLocation = Location(52.245696, -7.139102, 15f)\n  var edit = false;\n\n  init {\n    if (view.intent.hasExtra(\"placemark_edit\")) {\n      edit = true\n      placemark = view.intent.extras.getParcelable<PlacemarkModel>(\"placemark_edit\")\n      view.showPlacemark(placemark)\n    } else {\n      if (checkLocationPermissions(view)) {\n        // todo get the current location\n      }\n    }\n  }\n\n  fun doConfigureMap(m: GoogleMap) {\n    map = m\n    locationUpdate(placemark.lat, placemark.lng)\n  }\n\n  fun locationUpdate(lat: Double, lng: Double) {\n    placemark.lat = lat\n    placemark.lng = lng\n    placemark.zoom = 15f\n    map?.clear()\n    map?.uiSettings?.setZoomControlsEnabled(true)\n    val options = MarkerOptions().title(placemark.title).position(LatLng(placemark.lat, placemark.lng))\n    map?.addMarker(options)\n    map?.moveCamera(CameraUpdateFactory.newLatLngZoom(LatLng(placemark.lat, placemark.lng), placemark.zoom))\n    view?.showPlacemark(placemark)\n  }\n\n  override fun doRequestPermissionsResult(requestCode: Int, permissions: Array<String>, grantResults: IntArray) {\n    if (isPermissionGranted(requestCode, grantResults)) {\n      // todo get the current location\n    } else {\n      // permissions denied, so use the default location\n      locationUpdate(defaultLocation.lat, defaultLocation.lng)\n    }\n  }\n\n  fun doAddOrSave(title: String, description: String) {\n    placemark.title = title\n    placemark.description = description\n    if (edit) {\n      app.placemarks.update(placemark)\n    } else {\n      app.placemarks.create(placemark)\n    }\n    view?.finish()\n  }\n\n  fun doCancel() {\n    view?.finish()\n  }\n\n  fun doDelete() {\n    app.placemarks.delete(placemark)\n    view?.finish()\n  }\n\n  fun doSelectImage() {\n    view?.let {\n      showImagePicker(view!!, IMAGE_REQUEST)\n    }\n  }\n\n  fun doSetLocation() {\n    if (edit == false) {\n      view?.navigateTo(VIEW.LOCATION, LOCATION_REQUEST, \"location\", defaultLocation)\n    } else {\n      view?.navigateTo(VIEW.LOCATION, LOCATION_REQUEST, \"location\", Location(placemark.lat, placemark.lng, placemark.zoom))\n    }\n  }\n\n  override fun doActivityResult(requestCode: Int, resultCode: Int, data: Intent) {\n    when (requestCode) {\n      IMAGE_REQUEST -> {\n        placemark.image = data.data.toString()\n        view?.showPlacemark(placemark)\n      }\n      LOCATION_REQUEST -> {\n        val location = data.extras.getParcelable<Location>(\"location\")\n        placemark.lat = location.lat\n        placemark.lng = location.lng\n        placemark.zoom = location.zoom\n        locationUpdate(placemark.lat, placemark.lng)\n      }\n    }\n  }\n}\n~~~\n\n"
    },
  
    {
    "title": "# Requesting the Current Location",
    "shortTitle": "07",
    "contentMd" : "# Requesting the Current Location\n\nIntroduce this new method into the presenter:\n\n~~~\n  @SuppressLint(\"MissingPermission\")\n  fun doSetCurrentLocation() {\n    locationService.lastLocation.addOnSuccessListener {\n      locationUpdate(it.latitude, it.longitude)\n    }\n  }\n~~~\n\nIn the init block, we can now call this method:\n\n~~~\n      if (checkLocationPermissions(view)) {\n        doSetCurrentLocation()\n      }\n~~~\n\nFinally, we can complete the permissions response:\n\n~~~\n  override fun doRequestPermissionsResult(requestCode: Int, permissions: Array<String>, grantResults: IntArray) {\n    if (isPermissionGranted(requestCode, grantResults)) {\n      doSetCurrentLocation()\n    } else {\n      locationUpdate(defaultLocation.lat, defaultLocation.lng)\n    }\n  }\n~~~\n\nAlso, our doSetLocation can be simplified:\n\n~~~\n  fun doSetLocation() {\n    view?.navigateTo(VIEW.LOCATION, LOCATION_REQUEST, \"location\", Location(placemark.lat, placemark.lng, placemark.zoom))\n  }\n~~~\n\n\nTesting this in the emulator, you do have the ability to set the simulator location:\n\n![](img/02x.png)\n\nHowever, if you change the location it might take a few minutes before it percolates into the location provider.\n\nThis is the complete Presenter at this stage:\n\n~~~\npackage org.wit.placemark.views.placemark\n\nimport android.annotation.SuppressLint\nimport android.content.Intent\nimport com.google.android.gms.location.FusedLocationProviderClient\nimport com.google.android.gms.location.LocationServices\nimport com.google.android.gms.maps.CameraUpdateFactory\nimport com.google.android.gms.maps.GoogleMap\nimport com.google.android.gms.maps.model.LatLng\nimport com.google.android.gms.maps.model.MarkerOptions\nimport org.wit.placemark.helpers.checkLocationPermissions\nimport org.wit.placemark.helpers.isPermissionGranted\nimport org.wit.placemark.helpers.showImagePicker\nimport org.wit.placemark.models.Location\nimport org.wit.placemark.models.PlacemarkModel\nimport org.wit.placemark.views.*\n\nclass PlacemarkPresenter(view: BaseView) : BasePresenter(view) {\n\n  var map: GoogleMap? = null\n  var placemark = PlacemarkModel()\n  var defaultLocation = Location(52.245696, -7.139102, 15f)\n  var edit = false;\n  var locationService: FusedLocationProviderClient = LocationServices.getFusedLocationProviderClient(view)\n\n  init {\n    if (view.intent.hasExtra(\"placemark_edit\")) {\n      edit = true\n      placemark = view.intent.extras.getParcelable<PlacemarkModel>(\"placemark_edit\")\n      view.showPlacemark(placemark)\n    } else {\n      if (checkLocationPermissions(view)) {\n        doSetCurrentLocation()\n      }\n    }\n  }\n\n  @SuppressLint(\"MissingPermission\")\n  fun doSetCurrentLocation() {\n    locationService.lastLocation.addOnSuccessListener {\n      locationUpdate(it.latitude, it.longitude)\n    }\n  }\n\n  override fun doRequestPermissionsResult(requestCode: Int, permissions: Array<String>, grantResults: IntArray) {\n    if (isPermissionGranted(requestCode, grantResults)) {\n      doSetCurrentLocation()\n    } else {\n      locationUpdate(defaultLocation.lat, defaultLocation.lng)\n    }\n  }\n\n  fun doConfigureMap(m: GoogleMap) {\n    map = m\n    locationUpdate(placemark.lat, placemark.lng)\n  }\n\n  fun locationUpdate(lat: Double, lng: Double) {\n    placemark.lat = lat\n    placemark.lng = lng\n    placemark.zoom = 15f\n    map?.clear()\n    map?.uiSettings?.setZoomControlsEnabled(true)\n    val options = MarkerOptions().title(placemark.title).position(LatLng(placemark.lat, placemark.lng))\n    map?.addMarker(options)\n    map?.moveCamera(CameraUpdateFactory.newLatLngZoom(LatLng(placemark.lat, placemark.lng), placemark.zoom))\n    view?.showPlacemark(placemark)\n  }\n\n\n  fun doAddOrSave(title: String, description: String) {\n    placemark.title = title\n    placemark.description = description\n    if (edit) {\n      app.placemarks.update(placemark)\n    } else {\n      app.placemarks.create(placemark)\n    }\n    view?.finish()\n  }\n\n  fun doCancel() {\n    view?.finish()\n  }\n\n  fun doDelete() {\n    app.placemarks.delete(placemark)\n    view?.finish()\n  }\n\n  fun doSelectImage() {\n    view?.let {\n      showImagePicker(view!!, IMAGE_REQUEST)\n    }\n  }\n\n  fun doSetLocation() {\n    view?.navigateTo(VIEW.LOCATION, LOCATION_REQUEST, \"location\", Location(placemark.lat, placemark.lng, placemark.zoom))\n  }\n\n  override fun doActivityResult(requestCode: Int, resultCode: Int, data: Intent) {\n    when (requestCode) {\n      IMAGE_REQUEST -> {\n        placemark.image = data.data.toString()\n        view?.showPlacemark(placemark)\n      }\n      LOCATION_REQUEST -> {\n        val location = data.extras.getParcelable<Location>(\"location\")\n        placemark.lat = location.lat\n        placemark.lng = location.lng\n        placemark.zoom = location.zoom\n        locationUpdate(placemark.lat, placemark.lng)\n      }\n    }\n  }\n}\n~~~  "
    },
  
    {
    "title": "#Solution",
    "shortTitle": "Exercises",
    "contentMd" : "#Solution\n\nPlacemark application so far:\n\n- [archive.zip](archives/archive.zip)\n\n\n## Exercises\n\nLook at the following version of the placemark activity:\n\n![](img/03x.png)\n\n## Exercise 1:\n\nAs in the above, show the latitude/longitude of the placemark on the view.\n\n## Exercise 2:\n\nNotice in the above that the 'Set Location' button has been removed. If the map widget itself is clicked, then we will launch the EditLocation activity. Implement this capability\n"
    }
  
  ]
  }

